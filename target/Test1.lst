
/home/danbot/Documents/ParticleCode/Test1/target/Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002138  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000161e4  2**0
                  CONTENTS
  3 .data         00000068  2003e364  000d6150  0000e364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000424  2003e3cc  2003e3cc  0001e3cc  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d61b8  000d61b8  000161b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d61e0  000d61e0  000161e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a175e  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ed6a  00000000  00000000  000b7942  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001ac8  00000000  00000000  000c66ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00030db3  00000000  00000000  000c8174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000236f0  00000000  00000000  000f8f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000d3706  00000000  00000000  0011c617  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010bca  00000000  00000000  001efd1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002c30  00000000  00000000  002008e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a9e0  00000000  00000000  00203518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	ec 5d 0d 00                                         .]..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe99 	bl	d5d64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe9e 	bl	d5d7a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e364 	.word	0x2003e364
   d4048:	000d6150 	.word	0x000d6150
   d404c:	2003e3cc 	.word	0x2003e3cc
   d4050:	2003e3cc 	.word	0x2003e3cc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fdc1 	bl	d4be0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6148 	.word	0x000d6148
   d4080:	000d610c 	.word	0x000d610c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b850 	b.w	d4128 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f857 	bl	d413c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd73 	b.w	d4b7c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba3d 	b.w	d4514 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba3b 	b.w	d4514 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN14pressureSensorC1Ev>:
 */

#include <appSystem.h>


pressureSensor::pressureSensor()
   d40ae:	b510      	push	{r4, lr}
{
    pinMode(PIN_PRESSURESENSOR, INPUT); // dont need to do this but it does make it clear that we are going to use this pin as AN in
   d40b0:	2100      	movs	r1, #0
 */

#include <appSystem.h>


pressureSensor::pressureSensor()
   d40b2:	4604      	mov	r4, r0
{
    pinMode(PIN_PRESSURESENSOR, INPUT); // dont need to do this but it does make it clear that we are going to use this pin as AN in
   d40b4:	200e      	movs	r0, #14
   d40b6:	f000 ffd1 	bl	d505c <pinMode>
}
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <_ZN14pressureSensor10getVoltageEv>:
    _pressure = pressureSensor::getVoltage();
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}

float pressureSensor::getVoltage()
{
   d40c0:	b538      	push	{r3, r4, r5, lr}
   d40c2:	4604      	mov	r4, r0
   d40c4:	2514      	movs	r5, #20
    for (int count = 0; count < ADC_AVERAGE ; count++)
        _voltage += analogRead(PIN_PRESSURESENSOR); //TODO: software check to ensure we dont go over the type max here.
   d40c6:	200e      	movs	r0, #14
   d40c8:	f000 ffd9 	bl	d507e <analogRead>
   d40cc:	ee07 0a90 	vmov	s15, r0
   d40d0:	ed94 7a00 	vldr	s14, [r4]
   d40d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}

float pressureSensor::getVoltage()
{
    for (int count = 0; count < ADC_AVERAGE ; count++)
   d40d8:	3d01      	subs	r5, #1
        _voltage += analogRead(PIN_PRESSURESENSOR); //TODO: software check to ensure we dont go over the type max here.
   d40da:	ee77 7a87 	vadd.f32	s15, s15, s14
   d40de:	edc4 7a00 	vstr	s15, [r4]
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}

float pressureSensor::getVoltage()
{
    for (int count = 0; count < ADC_AVERAGE ; count++)
   d40e2:	d1f0      	bne.n	d40c6 <_ZN14pressureSensor10getVoltageEv+0x6>
        _voltage += analogRead(PIN_PRESSURESENSOR); //TODO: software check to ensure we dont go over the type max here.

    _voltage /= ADC_AVERAGE;
    _voltage /= ADC_MAX;
    _voltage *= ADC_REF;    // TODO: make the maths neat here.
   d40e4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
   d40e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d40ec:	eddf 7a0c 	vldr	s15, [pc, #48]	; d4120 <_ZN14pressureSensor10getVoltageEv+0x60>
   d40f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d40f4:	ee16 0a90 	vmov	r0, s13
   d40f8:	f001 fa8a 	bl	d5610 <__aeabi_f2d>
   d40fc:	a306      	add	r3, pc, #24	; (adr r3, d4118 <_ZN14pressureSensor10getVoltageEv+0x58>)
   d40fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4102:	f001 fad9 	bl	d56b8 <__aeabi_dmul>
   d4106:	f001 fdcf 	bl	d5ca8 <__aeabi_d2f>
   d410a:	6020      	str	r0, [r4, #0]

    return _voltage;
}
   d410c:	ee00 0a10 	vmov	s0, r0
   d4110:	bd38      	pop	{r3, r4, r5, pc}
   d4112:	bf00      	nop
   d4114:	f3af 8000 	nop.w
   d4118:	66666666 	.word	0x66666666
   d411c:	400a6666 	.word	0x400a6666
   d4120:	457ff000 	.word	0x457ff000

000d4124 <_GLOBAL__sub_I__ZN14pressureSensorC2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4124:	f000 b942 	b.w	d43ac <HAL_Pin_Map>

000d4128 <setup>:
#include <appSystem.h> // How do we get these into their own subfolders nicely?

void setup();
void loop();

void setup() {
   d4128:	b508      	push	{r3, lr}
  Serial.begin(115200);
   d412a:	f000 fc67 	bl	d49fc <_Z16_fetch_usbserialv>
   d412e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
}
   d4132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup();
void loop();

void setup() {
  Serial.begin(115200);
   d4136:	f000 bc55 	b.w	d49e4 <_ZN9USBSerial5beginEl>
	...

000d413c <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d413c:	b510      	push	{r4, lr}
   d413e:	ed2d 8b02 	vpush	{d8}
   d4142:	b082      	sub	sp, #8
  pressureSensor pressureSensor_c;  //_c for class recognition
   d4144:	4668      	mov	r0, sp
   d4146:	f7ff ffb2 	bl	d40ae <_ZN14pressureSensorC1Ev>

  float volts = pressureSensor_c.getVoltage()*1000;
   d414a:	4668      	mov	r0, sp
   d414c:	f7ff ffb8 	bl	d40c0 <_ZN14pressureSensor10getVoltageEv>
   d4150:	eeb0 8a40 	vmov.f32	s16, s0
  Serial.print("ADC Voltage = ");
   d4154:	f000 fc52 	bl	d49fc <_Z16_fetch_usbserialv>
   d4158:	4910      	ldr	r1, [pc, #64]	; (d419c <loop+0x60>)
   d415a:	f000 fdaa 	bl	d4cb2 <_ZN5Print5printEPKc>
  Serial.print(volts, 6);
   d415e:	f000 fc4d 	bl	d49fc <_Z16_fetch_usbserialv>
   d4162:	eddf 7a0f 	vldr	s15, [pc, #60]	; d41a0 <loop+0x64>
   d4166:	ee68 7a27 	vmul.f32	s15, s16, s15
   d416a:	4604      	mov	r4, r0
   d416c:	ee17 0a90 	vmov	r0, s15
   d4170:	f001 fa4e 	bl	d5610 <__aeabi_f2d>
   d4174:	ec41 0b10 	vmov	d0, r0, r1
   d4178:	2106      	movs	r1, #6
   d417a:	4620      	mov	r0, r4
   d417c:	f000 feba 	bl	d4ef4 <_ZN5Print5printEdi>
  Serial.println("mV");
   d4180:	f000 fc3c 	bl	d49fc <_Z16_fetch_usbserialv>
   d4184:	4907      	ldr	r1, [pc, #28]	; (d41a4 <loop+0x68>)
   d4186:	f000 fda7 	bl	d4cd8 <_ZN5Print7printlnEPKc>
  //then send events up to particle cloud




  delay(1000);  // slow this shit down yo
   d418a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d418e:	f000 fd67 	bl	d4c60 <delay>
   d4192:	b002      	add	sp, #8
   d4194:	ecbd 8b02 	vpop	{d8}
   d4198:	bd10      	pop	{r4, pc}
   d419a:	bf00      	nop
   d419c:	000d5e00 	.word	0x000d5e00
   d41a0:	447a0000 	.word	0x447a0000
   d41a4:	000d5e0f 	.word	0x000d5e0f

000d41a8 <_GLOBAL__sub_I_setup>:
   d41a8:	f000 b900 	b.w	d43ac <HAL_Pin_Map>

000d41ac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <HAL_USB_USART_Init+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	681b      	ldr	r3, [r3, #0]
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	0003024c 	.word	0x0003024c

000d41bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <HAL_USB_USART_Begin+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	685b      	ldr	r3, [r3, #4]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	0003024c 	.word	0x0003024c

000d41cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <HAL_USB_USART_Available_Data+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	691b      	ldr	r3, [r3, #16]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	0003024c 	.word	0x0003024c

000d41dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	695b      	ldr	r3, [r3, #20]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	0003024c 	.word	0x0003024c

000d41ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <HAL_USB_USART_Receive_Data+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	699b      	ldr	r3, [r3, #24]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	0003024c 	.word	0x0003024c

000d41fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <HAL_USB_USART_Send_Data+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	69db      	ldr	r3, [r3, #28]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	0003024c 	.word	0x0003024c

000d420c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <HAL_USB_USART_Flush_Data+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	6a1b      	ldr	r3, [r3, #32]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	0003024c 	.word	0x0003024c

000d421c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <HAL_I2C_Write_Data+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	6a1b      	ldr	r3, [r3, #32]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	00030228 	.word	0x00030228

000d422c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_I2C_Available_Data+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	00030228 	.word	0x00030228

000d423c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_I2C_Read_Data+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030228 	.word	0x00030228

000d424c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <HAL_I2C_Peek_Data+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030228 	.word	0x00030228

000d425c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_I2C_Flush_Data+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030228 	.word	0x00030228

000d426c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_I2C_Is_Enabled+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030228 	.word	0x00030228

000d427c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_I2C_Init+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030228 	.word	0x00030228

000d428c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <HAL_USART_Init+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	681b      	ldr	r3, [r3, #0]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	0003023c 	.word	0x0003023c

000d429c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <HAL_USART_Write_Data+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	68db      	ldr	r3, [r3, #12]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	0003023c 	.word	0x0003023c

000d42ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <HAL_USART_Available_Data+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	691b      	ldr	r3, [r3, #16]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	0003023c 	.word	0x0003023c

000d42bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <HAL_USART_Read_Data+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	0003023c 	.word	0x0003023c

000d42cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <HAL_USART_Peek_Data+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	699b      	ldr	r3, [r3, #24]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	0003023c 	.word	0x0003023c

000d42dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <HAL_USART_Flush_Data+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	69db      	ldr	r3, [r3, #28]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	0003023c 	.word	0x0003023c

000d42ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_USART_Is_Enabled+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6a1b      	ldr	r3, [r3, #32]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003023c 	.word	0x0003023c

000d42fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_USART_Available_Data_For_Write+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003023c 	.word	0x0003023c

000d430c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <inet_inet_ntop+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	695b      	ldr	r3, [r3, #20]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030264 	.word	0x00030264

000d431c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <os_thread_is_current+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	689b      	ldr	r3, [r3, #8]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030248 	.word	0x00030248

000d432c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <os_thread_join+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	691b      	ldr	r3, [r3, #16]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030248 	.word	0x00030248

000d433c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <os_thread_cleanup+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	695b      	ldr	r3, [r3, #20]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030248 	.word	0x00030248

000d434c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <os_mutex_create+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030248 	.word	0x00030248

000d435c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <os_mutex_recursive_create+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030248 	.word	0x00030248

000d436c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_RNG_GetRandomNumber+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	685b      	ldr	r3, [r3, #4]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030218 	.word	0x00030218

000d437c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	695b      	ldr	r3, [r3, #20]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030218 	.word	0x00030218

000d438c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_SPI_Init+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	69db      	ldr	r3, [r3, #28]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030230 	.word	0x00030230

000d439c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_SPI_Is_Enabled+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	6a1b      	ldr	r3, [r3, #32]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030230 	.word	0x00030230

000d43ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_Pin_Map+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	681b      	ldr	r3, [r3, #0]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003022c 	.word	0x0003022c

000d43bc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_Validate_Pin_Function+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	685b      	ldr	r3, [r3, #4]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003022c 	.word	0x0003022c

000d43cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_Pin_Mode+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	689b      	ldr	r3, [r3, #8]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003022c 	.word	0x0003022c

000d43dc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_ADC_Read+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003022c 	.word	0x0003022c

000d43ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <netdb_freeaddrinfo+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030268 	.word	0x00030268

000d43fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <netdb_getaddrinfo+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030268 	.word	0x00030268

000d440c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030244 	.word	0x00030244

000d441c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <network_connect+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	685b      	ldr	r3, [r3, #4]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030240 	.word	0x00030240

000d442c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <network_connecting+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030240 	.word	0x00030240

000d443c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <network_disconnect+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030240 	.word	0x00030240

000d444c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <network_ready+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	691b      	ldr	r3, [r3, #16]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030240 	.word	0x00030240

000d445c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <network_on+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030240 	.word	0x00030240

000d446c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <network_off+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	699b      	ldr	r3, [r3, #24]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030240 	.word	0x00030240

000d447c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <network_listen+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	69db      	ldr	r3, [r3, #28]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030240 	.word	0x00030240

000d448c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <network_listening+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6a1b      	ldr	r3, [r3, #32]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030240 	.word	0x00030240

000d449c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <network_set_listen_timeout+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030240 	.word	0x00030240

000d44ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <network_get_listen_timeout+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030240 	.word	0x00030240

000d44bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <set_system_mode+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	685b      	ldr	r3, [r3, #4]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030220 	.word	0x00030220

000d44cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <system_delay_ms+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	695b      	ldr	r3, [r3, #20]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030220 	.word	0x00030220

000d44dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b03      	ldr	r3, [pc, #12]	; (d44ec <system_ctrl_set_app_request_handler+0x10>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44e6:	9301      	str	r3, [sp, #4]
   d44e8:	bd08      	pop	{r3, pc}
   d44ea:	0000      	.short	0x0000
   d44ec:	00030220 	.word	0x00030220

000d44f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b03      	ldr	r3, [pc, #12]	; (d4500 <system_ctrl_set_result+0x10>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44fa:	9301      	str	r3, [sp, #4]
   d44fc:	bd08      	pop	{r3, pc}
   d44fe:	0000      	.short	0x0000
   d4500:	00030220 	.word	0x00030220

000d4504 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <malloc+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	681b      	ldr	r3, [r3, #0]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003021c 	.word	0x0003021c

000d4514 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <free+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	685b      	ldr	r3, [r3, #4]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003021c 	.word	0x0003021c

000d4524 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4524:	2300      	movs	r3, #0
   d4526:	461a      	mov	r2, r3
   d4528:	6840      	ldr	r0, [r0, #4]
   d452a:	f7ff bf77 	b.w	d441c <network_connect>

000d452e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d452e:	2200      	movs	r2, #0
   d4530:	2102      	movs	r1, #2
   d4532:	6840      	ldr	r0, [r0, #4]
   d4534:	f7ff bf82 	b.w	d443c <network_disconnect>

000d4538 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4538:	2200      	movs	r2, #0
   d453a:	4611      	mov	r1, r2
   d453c:	6840      	ldr	r0, [r0, #4]
   d453e:	f7ff bf75 	b.w	d442c <network_connecting>

000d4542 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4542:	2200      	movs	r2, #0
   d4544:	4611      	mov	r1, r2
   d4546:	6840      	ldr	r0, [r0, #4]
   d4548:	f7ff bf80 	b.w	d444c <network_ready>

000d454c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d454c:	2300      	movs	r3, #0
   d454e:	461a      	mov	r2, r3
   d4550:	4619      	mov	r1, r3
   d4552:	6840      	ldr	r0, [r0, #4]
   d4554:	f7ff bf82 	b.w	d445c <network_on>

000d4558 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4558:	2300      	movs	r3, #0
   d455a:	461a      	mov	r2, r3
   d455c:	4619      	mov	r1, r3
   d455e:	6840      	ldr	r0, [r0, #4]
   d4560:	f7ff bf84 	b.w	d446c <network_off>

000d4564 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4564:	2200      	movs	r2, #0
   d4566:	f081 0101 	eor.w	r1, r1, #1
   d456a:	6840      	ldr	r0, [r0, #4]
   d456c:	f7ff bf86 	b.w	d447c <network_listen>

000d4570 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4570:	2200      	movs	r2, #0
   d4572:	6840      	ldr	r0, [r0, #4]
   d4574:	f7ff bf92 	b.w	d449c <network_set_listen_timeout>

000d4578 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4578:	2200      	movs	r2, #0
   d457a:	4611      	mov	r1, r2
   d457c:	6840      	ldr	r0, [r0, #4]
   d457e:	f7ff bf95 	b.w	d44ac <network_get_listen_timeout>

000d4582 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4582:	2200      	movs	r2, #0
   d4584:	4611      	mov	r1, r2
   d4586:	6840      	ldr	r0, [r0, #4]
   d4588:	f7ff bf80 	b.w	d448c <network_listening>

000d458c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d458c:	b570      	push	{r4, r5, r6, lr}
   d458e:	b08c      	sub	sp, #48	; 0x30
   d4590:	4614      	mov	r4, r2
   d4592:	4606      	mov	r6, r0
    IPAddress addr;
   d4594:	f000 fa92 	bl	d4abc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4598:	ab0c      	add	r3, sp, #48	; 0x30
   d459a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d459c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d459e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d45a2:	4620      	mov	r0, r4
   d45a4:	f7ff ff2a 	bl	d43fc <netdb_getaddrinfo>
    if (!r && ai) {
   d45a8:	4601      	mov	r1, r0
   d45aa:	bb58      	cbnz	r0, d4604 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d45ac:	9b00      	ldr	r3, [sp, #0]
   d45ae:	b34b      	cbz	r3, d4604 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d45b0:	685a      	ldr	r2, [r3, #4]
   d45b2:	2a02      	cmp	r2, #2
   d45b4:	d00e      	beq.n	d45d4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d45b6:	2a0a      	cmp	r2, #10
   d45b8:	d124      	bne.n	d4604 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d45ba:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d45bc:	2211      	movs	r2, #17
   d45be:	a801      	add	r0, sp, #4
   d45c0:	f001 fbdb 	bl	d5d7a <memset>
                a.v = 6;
   d45c4:	2306      	movs	r3, #6
   d45c6:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d45ca:	ad01      	add	r5, sp, #4
   d45cc:	f104 0308 	add.w	r3, r4, #8
   d45d0:	3418      	adds	r4, #24
   d45d2:	e005      	b.n	d45e0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d45d4:	6959      	ldr	r1, [r3, #20]
   d45d6:	4630      	mov	r0, r6
   d45d8:	3104      	adds	r1, #4
   d45da:	f000 fa9c 	bl	d4b16 <_ZN9IPAddressaSEPKh>
                break;
   d45de:	e011      	b.n	d4604 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d45e0:	6818      	ldr	r0, [r3, #0]
   d45e2:	6859      	ldr	r1, [r3, #4]
   d45e4:	462a      	mov	r2, r5
   d45e6:	c203      	stmia	r2!, {r0, r1}
   d45e8:	3308      	adds	r3, #8
   d45ea:	42a3      	cmp	r3, r4
   d45ec:	4615      	mov	r5, r2
   d45ee:	d1f7      	bne.n	d45e0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d45f0:	a901      	add	r1, sp, #4
   d45f2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d45f4:	ad07      	add	r5, sp, #28
   d45f6:	f000 fa6f 	bl	d4ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d45fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d45fc:	1d34      	adds	r4, r6, #4
   d45fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4600:	682b      	ldr	r3, [r5, #0]
   d4602:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d4604:	9800      	ldr	r0, [sp, #0]
   d4606:	f7ff fef1 	bl	d43ec <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d460a:	4630      	mov	r0, r6
   d460c:	b00c      	add	sp, #48	; 0x30
   d460e:	bd70      	pop	{r4, r5, r6, pc}

000d4610 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4610:	4b02      	ldr	r3, [pc, #8]	; (d461c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4612:	4a03      	ldr	r2, [pc, #12]	; (d4620 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4614:	601a      	str	r2, [r3, #0]
   d4616:	2200      	movs	r2, #0
   d4618:	605a      	str	r2, [r3, #4]
   d461a:	4770      	bx	lr
   d461c:	2003e3d0 	.word	0x2003e3d0
   d4620:	000d5e1c 	.word	0x000d5e1c

000d4624 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4624:	2200      	movs	r2, #0
   d4626:	4611      	mov	r1, r2
   d4628:	6840      	ldr	r0, [r0, #4]
   d462a:	f7ff bf0f 	b.w	d444c <network_ready>

000d462e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d462e:	2200      	movs	r2, #0
   d4630:	4611      	mov	r1, r2
   d4632:	6840      	ldr	r0, [r0, #4]
   d4634:	f7ff bf2a 	b.w	d448c <network_listening>

000d4638 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4638:	2200      	movs	r2, #0
   d463a:	4611      	mov	r1, r2
   d463c:	6840      	ldr	r0, [r0, #4]
   d463e:	f7ff bf35 	b.w	d44ac <network_get_listen_timeout>

000d4642 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4642:	2200      	movs	r2, #0
   d4644:	6840      	ldr	r0, [r0, #4]
   d4646:	f7ff bf29 	b.w	d449c <network_set_listen_timeout>

000d464a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d464a:	2200      	movs	r2, #0
   d464c:	f081 0101 	eor.w	r1, r1, #1
   d4650:	6840      	ldr	r0, [r0, #4]
   d4652:	f7ff bf13 	b.w	d447c <network_listen>

000d4656 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4656:	2300      	movs	r3, #0
   d4658:	461a      	mov	r2, r3
   d465a:	4619      	mov	r1, r3
   d465c:	6840      	ldr	r0, [r0, #4]
   d465e:	f7ff bf05 	b.w	d446c <network_off>

000d4662 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4662:	2300      	movs	r3, #0
   d4664:	461a      	mov	r2, r3
   d4666:	4619      	mov	r1, r3
   d4668:	6840      	ldr	r0, [r0, #4]
   d466a:	f7ff bef7 	b.w	d445c <network_on>

000d466e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d466e:	2200      	movs	r2, #0
   d4670:	4611      	mov	r1, r2
   d4672:	6840      	ldr	r0, [r0, #4]
   d4674:	f7ff beda 	b.w	d442c <network_connecting>

000d4678 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4678:	2200      	movs	r2, #0
   d467a:	2102      	movs	r1, #2
   d467c:	6840      	ldr	r0, [r0, #4]
   d467e:	f7ff bedd 	b.w	d443c <network_disconnect>

000d4682 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4682:	2300      	movs	r3, #0
   d4684:	461a      	mov	r2, r3
   d4686:	6840      	ldr	r0, [r0, #4]
   d4688:	f7ff bec8 	b.w	d441c <network_connect>

000d468c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d468c:	4b02      	ldr	r3, [pc, #8]	; (d4698 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d468e:	2204      	movs	r2, #4
   d4690:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4692:	4a02      	ldr	r2, [pc, #8]	; (d469c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4694:	601a      	str	r2, [r3, #0]
   d4696:	4770      	bx	lr
   d4698:	2003e3d8 	.word	0x2003e3d8
   d469c:	000d5e50 	.word	0x000d5e50

000d46a0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46a0:	2200      	movs	r2, #0
   d46a2:	4611      	mov	r1, r2
   d46a4:	6840      	ldr	r0, [r0, #4]
   d46a6:	f7ff bef1 	b.w	d448c <network_listening>

000d46aa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46aa:	2200      	movs	r2, #0
   d46ac:	4611      	mov	r1, r2
   d46ae:	6840      	ldr	r0, [r0, #4]
   d46b0:	f7ff befc 	b.w	d44ac <network_get_listen_timeout>

000d46b4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46b4:	2200      	movs	r2, #0
   d46b6:	6840      	ldr	r0, [r0, #4]
   d46b8:	f7ff bef0 	b.w	d449c <network_set_listen_timeout>

000d46bc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46bc:	2200      	movs	r2, #0
   d46be:	f081 0101 	eor.w	r1, r1, #1
   d46c2:	6840      	ldr	r0, [r0, #4]
   d46c4:	f7ff beda 	b.w	d447c <network_listen>

000d46c8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46c8:	2300      	movs	r3, #0
   d46ca:	461a      	mov	r2, r3
   d46cc:	4619      	mov	r1, r3
   d46ce:	6840      	ldr	r0, [r0, #4]
   d46d0:	f7ff becc 	b.w	d446c <network_off>

000d46d4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46d4:	2300      	movs	r3, #0
   d46d6:	461a      	mov	r2, r3
   d46d8:	4619      	mov	r1, r3
   d46da:	6840      	ldr	r0, [r0, #4]
   d46dc:	f7ff bebe 	b.w	d445c <network_on>

000d46e0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46e0:	2200      	movs	r2, #0
   d46e2:	4611      	mov	r1, r2
   d46e4:	6840      	ldr	r0, [r0, #4]
   d46e6:	f7ff beb1 	b.w	d444c <network_ready>

000d46ea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46ea:	2200      	movs	r2, #0
   d46ec:	4611      	mov	r1, r2
   d46ee:	6840      	ldr	r0, [r0, #4]
   d46f0:	f7ff be9c 	b.w	d442c <network_connecting>

000d46f4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46f4:	2200      	movs	r2, #0
   d46f6:	2102      	movs	r1, #2
   d46f8:	6840      	ldr	r0, [r0, #4]
   d46fa:	f7ff be9f 	b.w	d443c <network_disconnect>

000d46fe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46fe:	2300      	movs	r3, #0
   d4700:	461a      	mov	r2, r3
   d4702:	6840      	ldr	r0, [r0, #4]
   d4704:	f7ff be8a 	b.w	d441c <network_connect>

000d4708 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4708:	b110      	cbz	r0, d4710 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d470a:	6803      	ldr	r3, [r0, #0]
   d470c:	685b      	ldr	r3, [r3, #4]
   d470e:	4718      	bx	r3
   d4710:	4770      	bx	lr

000d4712 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4712:	b538      	push	{r3, r4, r5, lr}
   d4714:	4604      	mov	r4, r0
   d4716:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d4718:	b1d0      	cbz	r0, d4750 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d471a:	f7ff fdff 	bl	d431c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d471e:	b9b8      	cbnz	r0, d4750 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4720:	7c23      	ldrb	r3, [r4, #16]
   d4722:	b91b      	cbnz	r3, d472c <_ZN6Thread7disposeEv+0x1a>
   d4724:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4726:	b108      	cbz	r0, d472c <_ZN6Thread7disposeEv+0x1a>
   d4728:	f7ff fe00 	bl	d432c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d472c:	6865      	ldr	r5, [r4, #4]
   d472e:	b155      	cbz	r5, d4746 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4730:	68ab      	ldr	r3, [r5, #8]
   d4732:	b11b      	cbz	r3, d473c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4734:	2203      	movs	r2, #3
   d4736:	4629      	mov	r1, r5
   d4738:	4628      	mov	r0, r5
   d473a:	4798      	blx	r3
            delete wrapper;
   d473c:	4628      	mov	r0, r5
   d473e:	f7ff fcaa 	bl	d4096 <_ZdlPv>
            wrapper = NULL;
   d4742:	2300      	movs	r3, #0
   d4744:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d4746:	6820      	ldr	r0, [r4, #0]
   d4748:	f7ff fdf8 	bl	d433c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d474c:	2300      	movs	r3, #0
   d474e:	6023      	str	r3, [r4, #0]
   d4750:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4754 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4754:	b538      	push	{r3, r4, r5, lr}
   d4756:	4b0b      	ldr	r3, [pc, #44]	; (d4784 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4758:	6003      	str	r3, [r0, #0]
   d475a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d475c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4760:	b108      	cbz	r0, d4766 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4762:	f7ff fc9a 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4766:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d476a:	b12d      	cbz	r5, d4778 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d476c:	4628      	mov	r0, r5
   d476e:	f7ff ffd0 	bl	d4712 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4772:	4628      	mov	r0, r5
   d4774:	f7ff fc8f 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4778:	68a0      	ldr	r0, [r4, #8]
   d477a:	b108      	cbz	r0, d4780 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d477c:	f7ff ffc4 	bl	d4708 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4780:	4620      	mov	r0, r4
   d4782:	bd38      	pop	{r3, r4, r5, pc}
   d4784:	000d5e84 	.word	0x000d5e84

000d4788 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4788:	b538      	push	{r3, r4, r5, lr}
   d478a:	4c0d      	ldr	r4, [pc, #52]	; (d47c0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d478c:	4b0d      	ldr	r3, [pc, #52]	; (d47c4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d478e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4790:	2500      	movs	r5, #0
   d4792:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4794:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4798:	6063      	str	r3, [r4, #4]
   d479a:	60a5      	str	r5, [r4, #8]
   d479c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47a0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d47a4:	f7ff fdda 	bl	d435c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d47a8:	4b07      	ldr	r3, [pc, #28]	; (d47c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d47aa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d47ae:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d47b0:	4620      	mov	r0, r4
   d47b2:	4a06      	ldr	r2, [pc, #24]	; (d47cc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d47b4:	4906      	ldr	r1, [pc, #24]	; (d47d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d47b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d47ba:	f000 bc77 	b.w	d50ac <__aeabi_atexit>
   d47be:	bf00      	nop
   d47c0:	2003e3e0 	.word	0x2003e3e0
   d47c4:	000d5e1c 	.word	0x000d5e1c
   d47c8:	000d5e84 	.word	0x000d5e84
   d47cc:	2003e3cc 	.word	0x2003e3cc
   d47d0:	000d4755 	.word	0x000d4755

000d47d4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d47d4:	4770      	bx	lr

000d47d6 <_ZN8SPIClassD0Ev>:
   d47d6:	b510      	push	{r4, lr}
   d47d8:	4604      	mov	r4, r0
   d47da:	f7ff fc5c 	bl	d4096 <_ZdlPv>
   d47de:	4620      	mov	r0, r4
   d47e0:	bd10      	pop	{r4, pc}
	...

000d47e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d47e4:	b570      	push	{r4, r5, r6, lr}
   d47e6:	4b08      	ldr	r3, [pc, #32]	; (d4808 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d47e8:	6003      	str	r3, [r0, #0]
   d47ea:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d47ec:	2500      	movs	r5, #0
   d47ee:	460e      	mov	r6, r1
   d47f0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d47f4:	f7ff fdaa 	bl	d434c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d47f8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d47fa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d47fc:	f7ff fdc6 	bl	d438c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4800:	60a5      	str	r5, [r4, #8]
}
   d4802:	4620      	mov	r0, r4
   d4804:	bd70      	pop	{r4, r5, r6, pc}
   d4806:	bf00      	nop
   d4808:	000d5eb8 	.word	0x000d5eb8

000d480c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d480c:	7900      	ldrb	r0, [r0, #4]
   d480e:	f7ff bdc5 	b.w	d439c <HAL_SPI_Is_Enabled>

000d4812 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4812:	4770      	bx	lr

000d4814 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4816:	4606      	mov	r6, r0
   d4818:	4615      	mov	r5, r2
   d481a:	460c      	mov	r4, r1
   d481c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d481e:	42bc      	cmp	r4, r7
   d4820:	d006      	beq.n	d4830 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4822:	6833      	ldr	r3, [r6, #0]
   d4824:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4828:	689b      	ldr	r3, [r3, #8]
   d482a:	4630      	mov	r0, r6
   d482c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d482e:	e7f6      	b.n	d481e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4830:	4628      	mov	r0, r5
   d4832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4834 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4834:	2200      	movs	r2, #0
   d4836:	7c00      	ldrb	r0, [r0, #16]
   d4838:	f7ff bcf0 	b.w	d421c <HAL_I2C_Write_Data>

000d483c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d483c:	2100      	movs	r1, #0
   d483e:	7c00      	ldrb	r0, [r0, #16]
   d4840:	f7ff bcf4 	b.w	d422c <HAL_I2C_Available_Data>

000d4844 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4844:	2100      	movs	r1, #0
   d4846:	7c00      	ldrb	r0, [r0, #16]
   d4848:	f7ff bcf8 	b.w	d423c <HAL_I2C_Read_Data>

000d484c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d484c:	2100      	movs	r1, #0
   d484e:	7c00      	ldrb	r0, [r0, #16]
   d4850:	f7ff bcfc 	b.w	d424c <HAL_I2C_Peek_Data>

000d4854 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4854:	2100      	movs	r1, #0
   d4856:	7c00      	ldrb	r0, [r0, #16]
   d4858:	f7ff bd00 	b.w	d425c <HAL_I2C_Flush_Data>

000d485c <_ZN7TwoWireD0Ev>:
   d485c:	b510      	push	{r4, lr}
   d485e:	4604      	mov	r4, r0
   d4860:	f7ff fc19 	bl	d4096 <_ZdlPv>
   d4864:	4620      	mov	r0, r4
   d4866:	bd10      	pop	{r4, pc}

000d4868 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4868:	b510      	push	{r4, lr}
   d486a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d486c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4870:	4608      	mov	r0, r1
   d4872:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4874:	2100      	movs	r1, #0
   d4876:	4b04      	ldr	r3, [pc, #16]	; (d4888 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4878:	7420      	strb	r0, [r4, #16]
   d487a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d487c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d487e:	f7ff fcfd 	bl	d427c <HAL_I2C_Init>

}
   d4882:	4620      	mov	r0, r4
   d4884:	bd10      	pop	{r4, pc}
   d4886:	bf00      	nop
   d4888:	000d5ec8 	.word	0x000d5ec8

000d488c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d488c:	2100      	movs	r1, #0
   d488e:	7c00      	ldrb	r0, [r0, #16]
   d4890:	f7ff bcec 	b.w	d426c <HAL_I2C_Is_Enabled>

000d4894 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4894:	4770      	bx	lr

000d4896 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4896:	7441      	strb	r1, [r0, #17]
   d4898:	4770      	bx	lr

000d489a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d489a:	7c00      	ldrb	r0, [r0, #16]
   d489c:	f7ff bd2e 	b.w	d42fc <HAL_USART_Available_Data_For_Write>

000d48a0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d48a0:	7c00      	ldrb	r0, [r0, #16]
   d48a2:	f7ff bd03 	b.w	d42ac <HAL_USART_Available_Data>

000d48a6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d48a6:	7c00      	ldrb	r0, [r0, #16]
   d48a8:	f7ff bd10 	b.w	d42cc <HAL_USART_Peek_Data>

000d48ac <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d48ac:	7c00      	ldrb	r0, [r0, #16]
   d48ae:	f7ff bd05 	b.w	d42bc <HAL_USART_Read_Data>

000d48b2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d48b2:	7c00      	ldrb	r0, [r0, #16]
   d48b4:	f7ff bd12 	b.w	d42dc <HAL_USART_Flush_Data>

000d48b8 <_ZN11USARTSerialD0Ev>:
   d48b8:	b510      	push	{r4, lr}
   d48ba:	4604      	mov	r4, r0
   d48bc:	f7ff fbeb 	bl	d4096 <_ZdlPv>
   d48c0:	4620      	mov	r0, r4
   d48c2:	bd10      	pop	{r4, pc}

000d48c4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d48c4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d48c6:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d48c8:	4604      	mov	r4, r0
   d48ca:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d48cc:	b925      	cbnz	r5, d48d8 <_ZN11USARTSerial5writeEh+0x14>
   d48ce:	7c00      	ldrb	r0, [r0, #16]
   d48d0:	f7ff fd14 	bl	d42fc <HAL_USART_Available_Data_For_Write>
   d48d4:	2800      	cmp	r0, #0
   d48d6:	dd05      	ble.n	d48e4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d48d8:	4631      	mov	r1, r6
   d48da:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d48dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d48e0:	f7ff bcdc 	b.w	d429c <HAL_USART_Write_Data>
  }
  return 0;
}
   d48e4:	4628      	mov	r0, r5
   d48e6:	bd70      	pop	{r4, r5, r6, pc}

000d48e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d48e8:	b510      	push	{r4, lr}
   d48ea:	4604      	mov	r4, r0
   d48ec:	4608      	mov	r0, r1
   d48ee:	4611      	mov	r1, r2
   d48f0:	2200      	movs	r2, #0
   d48f2:	6062      	str	r2, [r4, #4]
   d48f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d48f8:	60a2      	str	r2, [r4, #8]
   d48fa:	4a05      	ldr	r2, [pc, #20]	; (d4910 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d48fc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d48fe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4900:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4902:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4904:	461a      	mov	r2, r3
   d4906:	f7ff fcc1 	bl	d428c <HAL_USART_Init>
}
   d490a:	4620      	mov	r0, r4
   d490c:	bd10      	pop	{r4, pc}
   d490e:	bf00      	nop
   d4910:	000d5ef0 	.word	0x000d5ef0

000d4914 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4914:	7c00      	ldrb	r0, [r0, #16]
   d4916:	f7ff bce9 	b.w	d42ec <HAL_USART_Is_Enabled>
	...

000d491c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d491c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d491e:	4d0c      	ldr	r5, [pc, #48]	; (d4950 <_Z22__fetch_global_Serial1v+0x34>)
   d4920:	6829      	ldr	r1, [r5, #0]
   d4922:	f011 0401 	ands.w	r4, r1, #1
   d4926:	d111      	bne.n	d494c <_Z22__fetch_global_Serial1v+0x30>
   d4928:	4628      	mov	r0, r5
   d492a:	f7ff fbb8 	bl	d409e <__cxa_guard_acquire>
   d492e:	b168      	cbz	r0, d494c <_Z22__fetch_global_Serial1v+0x30>
   d4930:	4a08      	ldr	r2, [pc, #32]	; (d4954 <_Z22__fetch_global_Serial1v+0x38>)
   d4932:	4b09      	ldr	r3, [pc, #36]	; (d4958 <_Z22__fetch_global_Serial1v+0x3c>)
   d4934:	4809      	ldr	r0, [pc, #36]	; (d495c <_Z22__fetch_global_Serial1v+0x40>)
   d4936:	4621      	mov	r1, r4
   d4938:	f7ff ffd6 	bl	d48e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d493c:	4628      	mov	r0, r5
   d493e:	f7ff fbb3 	bl	d40a8 <__cxa_guard_release>
   d4942:	4a07      	ldr	r2, [pc, #28]	; (d4960 <_Z22__fetch_global_Serial1v+0x44>)
   d4944:	4907      	ldr	r1, [pc, #28]	; (d4964 <_Z22__fetch_global_Serial1v+0x48>)
   d4946:	4805      	ldr	r0, [pc, #20]	; (d495c <_Z22__fetch_global_Serial1v+0x40>)
   d4948:	f000 fbb0 	bl	d50ac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d494c:	4803      	ldr	r0, [pc, #12]	; (d495c <_Z22__fetch_global_Serial1v+0x40>)
   d494e:	bd38      	pop	{r3, r4, r5, pc}
   d4950:	2003e648 	.word	0x2003e648
   d4954:	2003e64c 	.word	0x2003e64c
   d4958:	2003e5c4 	.word	0x2003e5c4
   d495c:	2003e5b0 	.word	0x2003e5b0
   d4960:	2003e3cc 	.word	0x2003e3cc
   d4964:	000d4895 	.word	0x000d4895

000d4968 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4968:	7441      	strb	r1, [r0, #17]
   d496a:	4770      	bx	lr

000d496c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d496c:	4770      	bx	lr

000d496e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d496e:	2100      	movs	r1, #0
   d4970:	7c00      	ldrb	r0, [r0, #16]
   d4972:	f7ff bc3b 	b.w	d41ec <HAL_USB_USART_Receive_Data>

000d4976 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d4976:	2101      	movs	r1, #1
   d4978:	7c00      	ldrb	r0, [r0, #16]
   d497a:	f7ff bc37 	b.w	d41ec <HAL_USB_USART_Receive_Data>

000d497e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d497e:	7c00      	ldrb	r0, [r0, #16]
   d4980:	f7ff bc2c 	b.w	d41dc <HAL_USB_USART_Available_Data_For_Write>

000d4984 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d4984:	7c00      	ldrb	r0, [r0, #16]
   d4986:	f7ff bc21 	b.w	d41cc <HAL_USB_USART_Available_Data>

000d498a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d498a:	b538      	push	{r3, r4, r5, lr}
   d498c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d498e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d4990:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4992:	f7ff fc23 	bl	d41dc <HAL_USB_USART_Available_Data_For_Write>
   d4996:	2800      	cmp	r0, #0
   d4998:	dc01      	bgt.n	d499e <_ZN9USBSerial5writeEh+0x14>
   d499a:	7c60      	ldrb	r0, [r4, #17]
   d499c:	b120      	cbz	r0, d49a8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d499e:	4629      	mov	r1, r5
   d49a0:	7c20      	ldrb	r0, [r4, #16]
   d49a2:	f7ff fc2b 	bl	d41fc <HAL_USB_USART_Send_Data>
    return 1;
   d49a6:	2001      	movs	r0, #1
  }
  return 0;
}
   d49a8:	bd38      	pop	{r3, r4, r5, pc}

000d49aa <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d49aa:	7c00      	ldrb	r0, [r0, #16]
   d49ac:	f7ff bc2e 	b.w	d420c <HAL_USB_USART_Flush_Data>

000d49b0 <_ZN9USBSerialD0Ev>:
   d49b0:	b510      	push	{r4, lr}
   d49b2:	4604      	mov	r4, r0
   d49b4:	f7ff fb6f 	bl	d4096 <_ZdlPv>
   d49b8:	4620      	mov	r0, r4
   d49ba:	bd10      	pop	{r4, pc}

000d49bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49bc:	b510      	push	{r4, lr}
   d49be:	4604      	mov	r4, r0
   d49c0:	2300      	movs	r3, #0
   d49c2:	6063      	str	r3, [r4, #4]
   d49c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49c8:	60a3      	str	r3, [r4, #8]
   d49ca:	4b05      	ldr	r3, [pc, #20]	; (d49e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d49cc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d49ce:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49d0:	4608      	mov	r0, r1
{
  _serial = serial;
   d49d2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d49d4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d49d6:	4611      	mov	r1, r2
   d49d8:	f7ff fbe8 	bl	d41ac <HAL_USB_USART_Init>
}
   d49dc:	4620      	mov	r0, r4
   d49de:	bd10      	pop	{r4, pc}
   d49e0:	000d5f20 	.word	0x000d5f20

000d49e4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d49e4:	2200      	movs	r2, #0
   d49e6:	7c00      	ldrb	r0, [r0, #16]
   d49e8:	f7ff bbe8 	b.w	d41bc <HAL_USB_USART_Begin>

000d49ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d49ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d49ee:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d49f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d49f2:	2100      	movs	r1, #0
   d49f4:	f001 f9c1 	bl	d5d7a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d49f8:	4620      	mov	r0, r4
   d49fa:	bd10      	pop	{r4, pc}

000d49fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d49fc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d49fe:	4d0e      	ldr	r5, [pc, #56]	; (d4a38 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4a00:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a02:	a801      	add	r0, sp, #4
   d4a04:	f7ff fff2 	bl	d49ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a08:	6829      	ldr	r1, [r5, #0]
   d4a0a:	f011 0401 	ands.w	r4, r1, #1
   d4a0e:	d110      	bne.n	d4a32 <_Z16_fetch_usbserialv+0x36>
   d4a10:	4628      	mov	r0, r5
   d4a12:	f7ff fb44 	bl	d409e <__cxa_guard_acquire>
   d4a16:	b160      	cbz	r0, d4a32 <_Z16_fetch_usbserialv+0x36>
   d4a18:	aa01      	add	r2, sp, #4
   d4a1a:	4621      	mov	r1, r4
   d4a1c:	4807      	ldr	r0, [pc, #28]	; (d4a3c <_Z16_fetch_usbserialv+0x40>)
   d4a1e:	f7ff ffcd 	bl	d49bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a22:	4628      	mov	r0, r5
   d4a24:	f7ff fb40 	bl	d40a8 <__cxa_guard_release>
   d4a28:	4a05      	ldr	r2, [pc, #20]	; (d4a40 <_Z16_fetch_usbserialv+0x44>)
   d4a2a:	4906      	ldr	r1, [pc, #24]	; (d4a44 <_Z16_fetch_usbserialv+0x48>)
   d4a2c:	4803      	ldr	r0, [pc, #12]	; (d4a3c <_Z16_fetch_usbserialv+0x40>)
   d4a2e:	f000 fb3d 	bl	d50ac <__aeabi_atexit>
	return _usbserial;
}
   d4a32:	4802      	ldr	r0, [pc, #8]	; (d4a3c <_Z16_fetch_usbserialv+0x40>)
   d4a34:	b007      	add	sp, #28
   d4a36:	bd30      	pop	{r4, r5, pc}
   d4a38:	2003e6d0 	.word	0x2003e6d0
   d4a3c:	2003e6d4 	.word	0x2003e6d4
   d4a40:	2003e3cc 	.word	0x2003e3cc
   d4a44:	000d496d 	.word	0x000d496d

000d4a48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a48:	4770      	bx	lr

000d4a4a <_ZN9IPAddressD0Ev>:
   d4a4a:	b510      	push	{r4, lr}
   d4a4c:	4604      	mov	r4, r0
   d4a4e:	f7ff fb22 	bl	d4096 <_ZdlPv>
   d4a52:	4620      	mov	r0, r4
   d4a54:	bd10      	pop	{r4, pc}

000d4a56 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a56:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4a58:	7d03      	ldrb	r3, [r0, #20]
   d4a5a:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a5c:	b08d      	sub	sp, #52	; 0x34
   d4a5e:	460e      	mov	r6, r1
   d4a60:	f100 0704 	add.w	r7, r0, #4
   d4a64:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4a68:	d002      	beq.n	d4a70 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a6a:	f100 0508 	add.w	r5, r0, #8
   d4a6e:	e018      	b.n	d4aa2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a70:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a72:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a74:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a78:	232f      	movs	r3, #47	; 0x2f
   d4a7a:	462a      	mov	r2, r5
   d4a7c:	200a      	movs	r0, #10
   d4a7e:	f7ff fc45 	bl	d430c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a82:	4628      	mov	r0, r5
   d4a84:	f001 f9aa 	bl	d5ddc <strlen>
   d4a88:	6833      	ldr	r3, [r6, #0]
   d4a8a:	4602      	mov	r2, r0
   d4a8c:	68db      	ldr	r3, [r3, #12]
   d4a8e:	4629      	mov	r1, r5
   d4a90:	4630      	mov	r0, r6
   d4a92:	4798      	blx	r3
   d4a94:	e00f      	b.n	d4ab6 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a96:	b124      	cbz	r4, d4aa2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a98:	212e      	movs	r1, #46	; 0x2e
   d4a9a:	4630      	mov	r0, r6
   d4a9c:	f000 f90d 	bl	d4cba <_ZN5Print5printEc>
   d4aa0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4aa2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4aa6:	220a      	movs	r2, #10
   d4aa8:	4630      	mov	r0, r6
   d4aaa:	f000 f94c 	bl	d4d46 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4aae:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab0:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ab2:	d1f0      	bne.n	d4a96 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ab4:	4620      	mov	r0, r4
    }
    return n;
}
   d4ab6:	b00d      	add	sp, #52	; 0x34
   d4ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4abc <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4abc:	b510      	push	{r4, lr}
   d4abe:	4b05      	ldr	r3, [pc, #20]	; (d4ad4 <_ZN9IPAddressC1Ev+0x18>)
   d4ac0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ac2:	2211      	movs	r2, #17
   d4ac4:	f840 3b04 	str.w	r3, [r0], #4
   d4ac8:	2100      	movs	r1, #0
   d4aca:	f001 f956 	bl	d5d7a <memset>
{
    clear();
}
   d4ace:	4620      	mov	r0, r4
   d4ad0:	bd10      	pop	{r4, pc}
   d4ad2:	bf00      	nop
   d4ad4:	000d5f50 	.word	0x000d5f50

000d4ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ad8:	4603      	mov	r3, r0
   d4ada:	4a07      	ldr	r2, [pc, #28]	; (d4af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4adc:	b510      	push	{r4, lr}
   d4ade:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4ae2:	f101 0210 	add.w	r2, r1, #16
   d4ae6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4aea:	f843 4b04 	str.w	r4, [r3], #4
   d4aee:	4291      	cmp	r1, r2
   d4af0:	d1f9      	bne.n	d4ae6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4af2:	780a      	ldrb	r2, [r1, #0]
   d4af4:	701a      	strb	r2, [r3, #0]
}
   d4af6:	bd10      	pop	{r4, pc}
   d4af8:	000d5f50 	.word	0x000d5f50

000d4afc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4afc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4afe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b0e:	2304      	movs	r3, #4
   d4b10:	6041      	str	r1, [r0, #4]
   d4b12:	7503      	strb	r3, [r0, #20]
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b18:	780d      	ldrb	r5, [r1, #0]
   d4b1a:	788b      	ldrb	r3, [r1, #2]
   d4b1c:	784a      	ldrb	r2, [r1, #1]
   d4b1e:	78c9      	ldrb	r1, [r1, #3]
   d4b20:	9100      	str	r1, [sp, #0]
   d4b22:	4629      	mov	r1, r5
   d4b24:	f7ff ffea 	bl	d4afc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b28:	b003      	add	sp, #12
   d4b2a:	bd30      	pop	{r4, r5, pc}

000d4b2c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b2c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b2e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b30:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4b32:	b113      	cbz	r3, d4b3a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b34:	2203      	movs	r2, #3
   d4b36:	4601      	mov	r1, r0
   d4b38:	4798      	blx	r3
    }
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	bd10      	pop	{r4, pc}
	...

000d4b40 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b42:	4b0c      	ldr	r3, [pc, #48]	; (d4b74 <serialEventRun+0x34>)
   d4b44:	b133      	cbz	r3, d4b54 <serialEventRun+0x14>
   d4b46:	f7ff ff59 	bl	d49fc <_Z16_fetch_usbserialv>
   d4b4a:	6803      	ldr	r3, [r0, #0]
   d4b4c:	691b      	ldr	r3, [r3, #16]
   d4b4e:	4798      	blx	r3
   d4b50:	2800      	cmp	r0, #0
   d4b52:	dc09      	bgt.n	d4b68 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b54:	4b08      	ldr	r3, [pc, #32]	; (d4b78 <serialEventRun+0x38>)
   d4b56:	b163      	cbz	r3, d4b72 <serialEventRun+0x32>
   d4b58:	f7ff fee0 	bl	d491c <_Z22__fetch_global_Serial1v>
   d4b5c:	6803      	ldr	r3, [r0, #0]
   d4b5e:	691b      	ldr	r3, [r3, #16]
   d4b60:	4798      	blx	r3
   d4b62:	2800      	cmp	r0, #0
   d4b64:	dc03      	bgt.n	d4b6e <serialEventRun+0x2e>
   d4b66:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4b68:	f3af 8000 	nop.w
   d4b6c:	e7f2      	b.n	d4b54 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4b6e:	f3af 8000 	nop.w
   d4b72:	bd08      	pop	{r3, pc}
	...

000d4b7c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4b7c:	b508      	push	{r3, lr}
	serialEventRun();
   d4b7e:	f7ff ffdf 	bl	d4b40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b82:	f7ff fbfb 	bl	d437c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b86:	4b01      	ldr	r3, [pc, #4]	; (d4b8c <_post_loop+0x10>)
   d4b88:	6018      	str	r0, [r3, #0]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	2003e72c 	.word	0x2003e72c

000d4b90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b92:	2300      	movs	r3, #0
   d4b94:	9300      	str	r3, [sp, #0]
   d4b96:	461a      	mov	r2, r3
   d4b98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b9c:	f7ff fca8 	bl	d44f0 <system_ctrl_set_result>
}
   d4ba0:	b003      	add	sp, #12
   d4ba2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ba8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4ba8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4baa:	8843      	ldrh	r3, [r0, #2]
   d4bac:	2b0a      	cmp	r3, #10
   d4bae:	d008      	beq.n	d4bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4bb0:	2b50      	cmp	r3, #80	; 0x50
   d4bb2:	d109      	bne.n	d4bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4bb4:	4b09      	ldr	r3, [pc, #36]	; (d4bdc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4bb6:	681b      	ldr	r3, [r3, #0]
   d4bb8:	b13b      	cbz	r3, d4bca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4bba:	b003      	add	sp, #12
   d4bbc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4bc0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4bc2:	f7ff ffe5 	bl	d4b90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4bc6:	e006      	b.n	d4bd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bc8:	2300      	movs	r3, #0
   d4bca:	9300      	str	r3, [sp, #0]
   d4bcc:	461a      	mov	r2, r3
   d4bce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bd2:	f7ff fc8d 	bl	d44f0 <system_ctrl_set_result>
        break;
    }
}
   d4bd6:	b003      	add	sp, #12
   d4bd8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bdc:	2003e6e8 	.word	0x2003e6e8

000d4be0 <module_user_init_hook>:

void module_user_init_hook()
{
   d4be0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4be2:	f7ff fbc3 	bl	d436c <HAL_RNG_GetRandomNumber>
   d4be6:	4604      	mov	r4, r0
    srand(seed);
   d4be8:	f001 f8d0 	bl	d5d8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4bec:	4b07      	ldr	r3, [pc, #28]	; (d4c0c <module_user_init_hook+0x2c>)
   d4bee:	b113      	cbz	r3, d4bf6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4bf6:	2100      	movs	r1, #0
   d4bf8:	4804      	ldr	r0, [pc, #16]	; (d4c0c <module_user_init_hook+0x2c>)
   d4bfa:	f7ff fc07 	bl	d440c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4bfe:	2100      	movs	r1, #0
   d4c00:	4803      	ldr	r0, [pc, #12]	; (d4c10 <module_user_init_hook+0x30>)
}
   d4c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c06:	f7ff bc69 	b.w	d44dc <system_ctrl_set_app_request_handler>
   d4c0a:	bf00      	nop
   d4c0c:	00000000 	.word	0x00000000
   d4c10:	000d4ba9 	.word	0x000d4ba9

000d4c14 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c14:	b510      	push	{r4, lr}
   d4c16:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c18:	f7ff ff88 	bl	d4b2c <_ZNSt14_Function_baseD1Ev>
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	bd10      	pop	{r4, pc}

000d4c20 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c20:	4803      	ldr	r0, [pc, #12]	; (d4c30 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c22:	4a04      	ldr	r2, [pc, #16]	; (d4c34 <_GLOBAL__sub_I_RGB+0x14>)
   d4c24:	4904      	ldr	r1, [pc, #16]	; (d4c38 <_GLOBAL__sub_I_RGB+0x18>)
   d4c26:	2300      	movs	r3, #0
   d4c28:	6083      	str	r3, [r0, #8]
   d4c2a:	f000 ba3f 	b.w	d50ac <__aeabi_atexit>
   d4c2e:	bf00      	nop
   d4c30:	2003e6ec 	.word	0x2003e6ec
   d4c34:	2003e3cc 	.word	0x2003e3cc
   d4c38:	000d4c15 	.word	0x000d4c15

000d4c3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4c3c:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4c3e:	681a      	ldr	r2, [r3, #0]
   d4c40:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4c42:	601a      	str	r2, [r3, #0]
   d4c44:	4770      	bx	lr
   d4c46:	bf00      	nop
   d4c48:	2003e364 	.word	0x2003e364
   d4c4c:	2003e6fc 	.word	0x2003e6fc

000d4c50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c50:	4b01      	ldr	r3, [pc, #4]	; (d4c58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c52:	4a02      	ldr	r2, [pc, #8]	; (d4c5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c54:	601a      	str	r2, [r3, #0]
   d4c56:	4770      	bx	lr
   d4c58:	2003e700 	.word	0x2003e700
   d4c5c:	000d603b 	.word	0x000d603b

000d4c60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c60:	2100      	movs	r1, #0
   d4c62:	f7ff bc33 	b.w	d44cc <system_delay_ms>

000d4c66 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c68:	4606      	mov	r6, r0
   d4c6a:	460d      	mov	r5, r1
   d4c6c:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4c6e:	2400      	movs	r4, #0
  while (size--) {
   d4c70:	42bd      	cmp	r5, r7
   d4c72:	d00c      	beq.n	d4c8e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c74:	6833      	ldr	r3, [r6, #0]
   d4c76:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c7a:	689b      	ldr	r3, [r3, #8]
   d4c7c:	4630      	mov	r0, r6
   d4c7e:	4798      	blx	r3
     if (chunk>=0)
   d4c80:	2800      	cmp	r0, #0
   d4c82:	db01      	blt.n	d4c88 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c84:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4c86:	e7f3      	b.n	d4c70 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c88:	2c00      	cmp	r4, #0
   d4c8a:	bf08      	it	eq
   d4c8c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4c8e:	4620      	mov	r0, r4
   d4c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c92 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c92:	b570      	push	{r4, r5, r6, lr}
   d4c94:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c96:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c98:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c9a:	b149      	cbz	r1, d4cb0 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c9c:	f001 f89e 	bl	d5ddc <strlen>
   d4ca0:	682b      	ldr	r3, [r5, #0]
   d4ca2:	4602      	mov	r2, r0
   d4ca4:	4621      	mov	r1, r4
   d4ca6:	4628      	mov	r0, r5
   d4ca8:	68db      	ldr	r3, [r3, #12]
    }
   d4caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cae:	4718      	bx	r3
    }
   d4cb0:	bd70      	pop	{r4, r5, r6, pc}

000d4cb2 <_ZN5Print5printEPKc>:
   d4cb2:	b508      	push	{r3, lr}
   d4cb4:	f7ff ffed 	bl	d4c92 <_ZN5Print5writeEPKc>
   d4cb8:	bd08      	pop	{r3, pc}

000d4cba <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4cba:	6803      	ldr	r3, [r0, #0]
   d4cbc:	689b      	ldr	r3, [r3, #8]
   d4cbe:	4718      	bx	r3

000d4cc0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cc0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4cc2:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cc4:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4cc6:	f7ff fff8 	bl	d4cba <_ZN5Print5printEc>
  n += print('\n');
   d4cca:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4ccc:	4604      	mov	r4, r0
  n += print('\n');
   d4cce:	4628      	mov	r0, r5
   d4cd0:	f7ff fff3 	bl	d4cba <_ZN5Print5printEc>
  return n;
}
   d4cd4:	4420      	add	r0, r4
   d4cd6:	bd38      	pop	{r3, r4, r5, pc}

000d4cd8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4cd8:	b538      	push	{r3, r4, r5, lr}
   d4cda:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4cdc:	f7ff ffd9 	bl	d4c92 <_ZN5Print5writeEPKc>
   d4ce0:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4ce2:	4628      	mov	r0, r5
   d4ce4:	f7ff ffec 	bl	d4cc0 <_ZN5Print7printlnEv>
  return n;
}
   d4ce8:	4420      	add	r0, r4
   d4cea:	bd38      	pop	{r3, r4, r5, pc}

000d4cec <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4cec:	b530      	push	{r4, r5, lr}
   d4cee:	b08b      	sub	sp, #44	; 0x2c
   d4cf0:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4cf2:	2100      	movs	r1, #0
   d4cf4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4cf8:	2a01      	cmp	r2, #1
   d4cfa:	bf98      	it	ls
   d4cfc:	220a      	movls	r2, #10
   d4cfe:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4d02:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4d06:	fb05 3312 	mls	r3, r5, r2, r3
   d4d0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d0e:	2b09      	cmp	r3, #9
   d4d10:	bf94      	ite	ls
   d4d12:	3330      	addls	r3, #48	; 0x30
   d4d14:	3337      	addhi	r3, #55	; 0x37
   d4d16:	b2db      	uxtb	r3, r3
   d4d18:	4621      	mov	r1, r4
   d4d1a:	f804 3901 	strb.w	r3, [r4], #-1
   d4d1e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d20:	2d00      	cmp	r5, #0
   d4d22:	d1ee      	bne.n	d4d02 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d24:	f7ff ffb5 	bl	d4c92 <_ZN5Print5writeEPKc>
}
   d4d28:	b00b      	add	sp, #44	; 0x2c
   d4d2a:	bd30      	pop	{r4, r5, pc}

000d4d2c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4d2c:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4d2e:	b92a      	cbnz	r2, d4d3c <_ZN5Print5printEmi+0x10>
   d4d30:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4d32:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4d36:	689b      	ldr	r3, [r3, #8]
   d4d38:	b2c9      	uxtb	r1, r1
   d4d3a:	4718      	bx	r3
  else return printNumber(n, base);
   d4d3c:	b2d2      	uxtb	r2, r2
}
   d4d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4d42:	f7ff bfd3 	b.w	d4cec <_ZN5Print11printNumberEmh>

000d4d46 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4d46:	f7ff bff1 	b.w	d4d2c <_ZN5Print5printEmi>

000d4d4a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d4e:	4607      	mov	r7, r0
   d4d50:	460e      	mov	r6, r1
  if (base == 0) {
   d4d52:	4615      	mov	r5, r2
   d4d54:	b92a      	cbnz	r2, d4d62 <_ZN5Print5printEli+0x18>
    return write(n);
   d4d56:	6803      	ldr	r3, [r0, #0]
   d4d58:	b2c9      	uxtb	r1, r1
   d4d5a:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4d60:	4718      	bx	r3
  } else if (base == 10) {
   d4d62:	2a0a      	cmp	r2, #10
   d4d64:	d102      	bne.n	d4d6c <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4d66:	2900      	cmp	r1, #0
   d4d68:	da01      	bge.n	d4d6e <_ZN5Print5printEli+0x24>
   d4d6a:	e004      	b.n	d4d76 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4d6c:	b2d2      	uxtb	r2, r2
  }
}
   d4d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4d72:	f7ff bfbb 	b.w	d4cec <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4d76:	212d      	movs	r1, #45	; 0x2d
   d4d78:	f7ff ff9f 	bl	d4cba <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4d7c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4d7e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4d80:	4271      	negs	r1, r6
   d4d82:	4638      	mov	r0, r7
   d4d84:	f7ff ffb2 	bl	d4cec <_ZN5Print11printNumberEmh>
   d4d88:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4d90 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d94:	ec57 6b10 	vmov	r6, r7, d0
   d4d98:	4682      	mov	sl, r0
   d4d9a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4d9c:	ee10 2a10 	vmov	r2, s0
   d4da0:	463b      	mov	r3, r7
   d4da2:	ee10 0a10 	vmov	r0, s0
   d4da6:	4639      	mov	r1, r7
   d4da8:	f000 ff20 	bl	d5bec <__aeabi_dcmpun>
   d4dac:	b108      	cbz	r0, d4db2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dae:	4948      	ldr	r1, [pc, #288]	; (d4ed0 <_ZN5Print10printFloatEdh+0x140>)
   d4db0:	e012      	b.n	d4dd8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4db2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4db6:	f04f 32ff 	mov.w	r2, #4294967295
   d4dba:	4b46      	ldr	r3, [pc, #280]	; (d4ed4 <_ZN5Print10printFloatEdh+0x144>)
   d4dbc:	4630      	mov	r0, r6
   d4dbe:	4649      	mov	r1, r9
   d4dc0:	f000 ff14 	bl	d5bec <__aeabi_dcmpun>
   d4dc4:	b968      	cbnz	r0, d4de2 <_ZN5Print10printFloatEdh+0x52>
   d4dc6:	f04f 32ff 	mov.w	r2, #4294967295
   d4dca:	4b42      	ldr	r3, [pc, #264]	; (d4ed4 <_ZN5Print10printFloatEdh+0x144>)
   d4dcc:	4630      	mov	r0, r6
   d4dce:	4649      	mov	r1, r9
   d4dd0:	f000 feee 	bl	d5bb0 <__aeabi_dcmple>
   d4dd4:	b928      	cbnz	r0, d4de2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dd6:	4940      	ldr	r1, [pc, #256]	; (d4ed8 <_ZN5Print10printFloatEdh+0x148>)
   d4dd8:	4650      	mov	r0, sl
   d4dda:	f7ff ff5a 	bl	d4c92 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4de2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4de6:	4b3d      	ldr	r3, [pc, #244]	; (d4edc <_ZN5Print10printFloatEdh+0x14c>)
   d4de8:	4630      	mov	r0, r6
   d4dea:	4639      	mov	r1, r7
   d4dec:	f000 fef4 	bl	d5bd8 <__aeabi_dcmpgt>
   d4df0:	b108      	cbz	r0, d4df6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4df2:	493b      	ldr	r1, [pc, #236]	; (d4ee0 <_ZN5Print10printFloatEdh+0x150>)
   d4df4:	e7f0      	b.n	d4dd8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4df6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4dfa:	4b3a      	ldr	r3, [pc, #232]	; (d4ee4 <_ZN5Print10printFloatEdh+0x154>)
   d4dfc:	4630      	mov	r0, r6
   d4dfe:	4639      	mov	r1, r7
   d4e00:	f000 fecc 	bl	d5b9c <__aeabi_dcmplt>
   d4e04:	2800      	cmp	r0, #0
   d4e06:	d1f4      	bne.n	d4df2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4e08:	2200      	movs	r2, #0
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	4630      	mov	r0, r6
   d4e0e:	4639      	mov	r1, r7
   d4e10:	f000 fec4 	bl	d5b9c <__aeabi_dcmplt>
   d4e14:	b140      	cbz	r0, d4e28 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4e16:	212d      	movs	r1, #45	; 0x2d
   d4e18:	4650      	mov	r0, sl
   d4e1a:	f7ff ff4e 	bl	d4cba <_ZN5Print5printEc>
     number = -number;
   d4e1e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4e22:	4604      	mov	r4, r0
     number = -number;
   d4e24:	461f      	mov	r7, r3
   d4e26:	e000      	b.n	d4e2a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4e28:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4e2a:	492f      	ldr	r1, [pc, #188]	; (d4ee8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4e2c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4e30:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4e32:	fa5f f388 	uxtb.w	r3, r8
   d4e36:	429d      	cmp	r5, r3
   d4e38:	d906      	bls.n	d4e48 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4e3a:	2200      	movs	r2, #0
   d4e3c:	4b2b      	ldr	r3, [pc, #172]	; (d4eec <_ZN5Print10printFloatEdh+0x15c>)
   d4e3e:	f000 fd65 	bl	d590c <__aeabi_ddiv>
   d4e42:	f108 0801 	add.w	r8, r8, #1
   d4e46:	e7f4      	b.n	d4e32 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4e48:	4632      	mov	r2, r6
   d4e4a:	463b      	mov	r3, r7
   d4e4c:	f000 fa82 	bl	d5354 <__adddf3>
   d4e50:	460f      	mov	r7, r1
   d4e52:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e54:	f000 ff08 	bl	d5c68 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e58:	220a      	movs	r2, #10
   d4e5a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4e5c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e5e:	4650      	mov	r0, sl
   d4e60:	f7ff ff44 	bl	d4cec <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4e64:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4e66:	b37d      	cbz	r5, d4ec8 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4e68:	4640      	mov	r0, r8
   d4e6a:	f000 fbaf 	bl	d55cc <__aeabi_ui2d>
   d4e6e:	4602      	mov	r2, r0
   d4e70:	460b      	mov	r3, r1
   d4e72:	4630      	mov	r0, r6
   d4e74:	4639      	mov	r1, r7
   d4e76:	f000 fa6b 	bl	d5350 <__aeabi_dsub>
   d4e7a:	4606      	mov	r6, r0
   d4e7c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e7e:	4650      	mov	r0, sl
   d4e80:	491b      	ldr	r1, [pc, #108]	; (d4ef0 <_ZN5Print10printFloatEdh+0x160>)
   d4e82:	f7ff ff06 	bl	d4c92 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4e86:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4e88:	4b18      	ldr	r3, [pc, #96]	; (d4eec <_ZN5Print10printFloatEdh+0x15c>)
   d4e8a:	2200      	movs	r2, #0
   d4e8c:	4630      	mov	r0, r6
   d4e8e:	4639      	mov	r1, r7
   d4e90:	f000 fc12 	bl	d56b8 <__aeabi_dmul>
   d4e94:	460f      	mov	r7, r1
   d4e96:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d4e98:	f000 febe 	bl	d5c18 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4e9c:	220a      	movs	r2, #10
   d4e9e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d4ea0:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4ea2:	4650      	mov	r0, sl
   d4ea4:	f7ff ff51 	bl	d4d4a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d4ea8:	4404      	add	r4, r0
    remainder -= toPrint;
   d4eaa:	4640      	mov	r0, r8
   d4eac:	f000 fb9e 	bl	d55ec <__aeabi_i2d>
   d4eb0:	4602      	mov	r2, r0
   d4eb2:	460b      	mov	r3, r1
   d4eb4:	4630      	mov	r0, r6
   d4eb6:	4639      	mov	r1, r7
   d4eb8:	f000 fa4a 	bl	d5350 <__aeabi_dsub>
   d4ebc:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4ebe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4ec2:	4606      	mov	r6, r0
   d4ec4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4ec6:	d1df      	bne.n	d4e88 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4ec8:	4620      	mov	r0, r4
   d4eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4ece:	bf00      	nop
   d4ed0:	000d6064 	.word	0x000d6064
   d4ed4:	7fefffff 	.word	0x7fefffff
   d4ed8:	000d606e 	.word	0x000d606e
   d4edc:	41efffff 	.word	0x41efffff
   d4ee0:	000d6068 	.word	0x000d6068
   d4ee4:	c1efffff 	.word	0xc1efffff
   d4ee8:	3fe00000 	.word	0x3fe00000
   d4eec:	40240000 	.word	0x40240000
   d4ef0:	000d606c 	.word	0x000d606c

000d4ef4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4ef4:	b2c9      	uxtb	r1, r1
   d4ef6:	f7ff bf4b 	b.w	d4d90 <_ZN5Print10printFloatEdh>
	...

000d4efc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4efc:	4b04      	ldr	r3, [pc, #16]	; (d4f10 <_GLOBAL__sub_I_System+0x14>)
   d4efe:	2000      	movs	r0, #0
   d4f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f04:	7018      	strb	r0, [r3, #0]
   d4f06:	8058      	strh	r0, [r3, #2]
   d4f08:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f0a:	f7ff bad7 	b.w	d44bc <set_system_mode>
   d4f0e:	bf00      	nop
   d4f10:	2003e704 	.word	0x2003e704

000d4f14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f14:	2200      	movs	r2, #0
   d4f16:	4611      	mov	r1, r2
   d4f18:	6840      	ldr	r0, [r0, #4]
   d4f1a:	f7ff bab7 	b.w	d448c <network_listening>

000d4f1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f1e:	2200      	movs	r2, #0
   d4f20:	4611      	mov	r1, r2
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bac2 	b.w	d44ac <network_get_listen_timeout>

000d4f28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	6840      	ldr	r0, [r0, #4]
   d4f2c:	f7ff bab6 	b.w	d449c <network_set_listen_timeout>

000d4f30 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f30:	2200      	movs	r2, #0
   d4f32:	f081 0101 	eor.w	r1, r1, #1
   d4f36:	6840      	ldr	r0, [r0, #4]
   d4f38:	f7ff baa0 	b.w	d447c <network_listen>

000d4f3c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	461a      	mov	r2, r3
   d4f40:	4619      	mov	r1, r3
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	f7ff ba92 	b.w	d446c <network_off>

000d4f48 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f48:	2300      	movs	r3, #0
   d4f4a:	461a      	mov	r2, r3
   d4f4c:	4619      	mov	r1, r3
   d4f4e:	6840      	ldr	r0, [r0, #4]
   d4f50:	f7ff ba84 	b.w	d445c <network_on>

000d4f54 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f54:	2200      	movs	r2, #0
   d4f56:	4611      	mov	r1, r2
   d4f58:	6840      	ldr	r0, [r0, #4]
   d4f5a:	f7ff ba77 	b.w	d444c <network_ready>

000d4f5e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f5e:	2200      	movs	r2, #0
   d4f60:	4611      	mov	r1, r2
   d4f62:	6840      	ldr	r0, [r0, #4]
   d4f64:	f7ff ba62 	b.w	d442c <network_connecting>

000d4f68 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f68:	2200      	movs	r2, #0
   d4f6a:	2102      	movs	r1, #2
   d4f6c:	6840      	ldr	r0, [r0, #4]
   d4f6e:	f7ff ba65 	b.w	d443c <network_disconnect>

000d4f72 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f72:	2300      	movs	r3, #0
   d4f74:	461a      	mov	r2, r3
   d4f76:	6840      	ldr	r0, [r0, #4]
   d4f78:	f7ff ba50 	b.w	d441c <network_connect>

000d4f7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4f7c:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f7e:	2203      	movs	r2, #3
   d4f80:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f82:	4a02      	ldr	r2, [pc, #8]	; (d4f8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f84:	601a      	str	r2, [r3, #0]
   d4f86:	4770      	bx	lr
   d4f88:	2003e70c 	.word	0x2003e70c
   d4f8c:	000d607c 	.word	0x000d607c

000d4f90 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d4f90:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d4f92:	4d0b      	ldr	r5, [pc, #44]	; (d4fc0 <_Z19__fetch_global_Wirev+0x30>)
   d4f94:	6829      	ldr	r1, [r5, #0]
   d4f96:	f011 0401 	ands.w	r4, r1, #1
   d4f9a:	d10f      	bne.n	d4fbc <_Z19__fetch_global_Wirev+0x2c>
   d4f9c:	4628      	mov	r0, r5
   d4f9e:	f7ff f87e 	bl	d409e <__cxa_guard_acquire>
   d4fa2:	b158      	cbz	r0, d4fbc <_Z19__fetch_global_Wirev+0x2c>
   d4fa4:	4621      	mov	r1, r4
   d4fa6:	4807      	ldr	r0, [pc, #28]	; (d4fc4 <_Z19__fetch_global_Wirev+0x34>)
   d4fa8:	f7ff fc5e 	bl	d4868 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d4fac:	4628      	mov	r0, r5
   d4fae:	f7ff f87b 	bl	d40a8 <__cxa_guard_release>
   d4fb2:	4a05      	ldr	r2, [pc, #20]	; (d4fc8 <_Z19__fetch_global_Wirev+0x38>)
   d4fb4:	4905      	ldr	r1, [pc, #20]	; (d4fcc <_Z19__fetch_global_Wirev+0x3c>)
   d4fb6:	4803      	ldr	r0, [pc, #12]	; (d4fc4 <_Z19__fetch_global_Wirev+0x34>)
   d4fb8:	f000 f878 	bl	d50ac <__aeabi_atexit>
	return wire;
}
   d4fbc:	4801      	ldr	r0, [pc, #4]	; (d4fc4 <_Z19__fetch_global_Wirev+0x34>)
   d4fbe:	bd38      	pop	{r3, r4, r5, pc}
   d4fc0:	2003e714 	.word	0x2003e714
   d4fc4:	2003e718 	.word	0x2003e718
   d4fc8:	2003e3cc 	.word	0x2003e3cc
   d4fcc:	000d4813 	.word	0x000d4813

000d4fd0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4fd0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4fd2:	4c0c      	ldr	r4, [pc, #48]	; (d5004 <_GLOBAL__sub_I_SPI+0x34>)
   d4fd4:	4e0c      	ldr	r6, [pc, #48]	; (d5008 <_GLOBAL__sub_I_SPI+0x38>)
   d4fd6:	4d0d      	ldr	r5, [pc, #52]	; (d500c <_GLOBAL__sub_I_SPI+0x3c>)
   d4fd8:	2100      	movs	r1, #0
   d4fda:	4620      	mov	r0, r4
   d4fdc:	f7ff fc02 	bl	d47e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4fe0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4fe2:	4c0b      	ldr	r4, [pc, #44]	; (d5010 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d4fe4:	4632      	mov	r2, r6
   d4fe6:	4629      	mov	r1, r5
   d4fe8:	f000 f860 	bl	d50ac <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d4fec:	2101      	movs	r1, #1
   d4fee:	4620      	mov	r0, r4
   d4ff0:	f7ff fbf8 	bl	d47e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4ff4:	4632      	mov	r2, r6
   d4ff6:	4629      	mov	r1, r5
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4ffe:	f000 b855 	b.w	d50ac <__aeabi_atexit>
   d5002:	bf00      	nop
   d5004:	2003e730 	.word	0x2003e730
   d5008:	2003e3cc 	.word	0x2003e3cc
   d500c:	000d47d5 	.word	0x000d47d5
   d5010:	2003e740 	.word	0x2003e740

000d5014 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5014:	b510      	push	{r4, lr}
   d5016:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5018:	480f      	ldr	r0, [pc, #60]	; (d5058 <pinAvailable+0x44>)
   d501a:	f7ff fbf7 	bl	d480c <_ZN8SPIClass9isEnabledEv>
   d501e:	b128      	cbz	r0, d502c <pinAvailable+0x18>
   d5020:	f1a4 030b 	sub.w	r3, r4, #11
   d5024:	2b02      	cmp	r3, #2
   d5026:	d801      	bhi.n	d502c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5028:	2000      	movs	r0, #0
   d502a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d502c:	f7ff ffb0 	bl	d4f90 <_Z19__fetch_global_Wirev>
   d5030:	f7ff fc2c 	bl	d488c <_ZN7TwoWire9isEnabledEv>
   d5034:	b108      	cbz	r0, d503a <pinAvailable+0x26>
   d5036:	2c01      	cmp	r4, #1
   d5038:	d9f6      	bls.n	d5028 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d503a:	f7ff fc6f 	bl	d491c <_Z22__fetch_global_Serial1v>
   d503e:	f7ff fc69 	bl	d4914 <_ZN11USARTSerial9isEnabledEv>
   d5042:	b118      	cbz	r0, d504c <pinAvailable+0x38>
   d5044:	f1a4 0309 	sub.w	r3, r4, #9
   d5048:	2b01      	cmp	r3, #1
   d504a:	d9ed      	bls.n	d5028 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d504c:	2c23      	cmp	r4, #35	; 0x23
   d504e:	bf8c      	ite	hi
   d5050:	2000      	movhi	r0, #0
   d5052:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5054:	bd10      	pop	{r4, pc}
   d5056:	bf00      	nop
   d5058:	2003e730 	.word	0x2003e730

000d505c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d505c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d505e:	b538      	push	{r3, r4, r5, lr}
   d5060:	4604      	mov	r4, r0
   d5062:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5064:	d80a      	bhi.n	d507c <pinMode+0x20>
   d5066:	29ff      	cmp	r1, #255	; 0xff
   d5068:	d008      	beq.n	d507c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d506a:	f7ff ffd3 	bl	d5014 <pinAvailable>
   d506e:	b128      	cbz	r0, d507c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5070:	4629      	mov	r1, r5
   d5072:	4620      	mov	r0, r4
}
   d5074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5078:	f7ff b9a8 	b.w	d43cc <HAL_Pin_Mode>
   d507c:	bd38      	pop	{r3, r4, r5, pc}

000d507e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d507e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5080:	b510      	push	{r4, lr}
   d5082:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5084:	bf9c      	itt	ls
   d5086:	340e      	addls	r4, #14
   d5088:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d508a:	4620      	mov	r0, r4
   d508c:	f7ff ffc2 	bl	d5014 <pinAvailable>
   d5090:	b150      	cbz	r0, d50a8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5092:	2103      	movs	r1, #3
   d5094:	4620      	mov	r0, r4
   d5096:	f7ff f991 	bl	d43bc <HAL_Validate_Pin_Function>
   d509a:	2803      	cmp	r0, #3
   d509c:	d104      	bne.n	d50a8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d509e:	4620      	mov	r0, r4
}
   d50a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d50a4:	f7ff b99a 	b.w	d43dc <HAL_ADC_Read>
}
   d50a8:	2000      	movs	r0, #0
   d50aa:	bd10      	pop	{r4, pc}

000d50ac <__aeabi_atexit>:
   d50ac:	460b      	mov	r3, r1
   d50ae:	4601      	mov	r1, r0
   d50b0:	4618      	mov	r0, r3
   d50b2:	f000 be49 	b.w	d5d48 <__cxa_atexit>
	...

000d50b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d50b8:	4b18      	ldr	r3, [pc, #96]	; (d511c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d50ba:	681a      	ldr	r2, [r3, #0]
   d50bc:	07d1      	lsls	r1, r2, #31
   d50be:	bf5c      	itt	pl
   d50c0:	2201      	movpl	r2, #1
   d50c2:	601a      	strpl	r2, [r3, #0]
   d50c4:	4b16      	ldr	r3, [pc, #88]	; (d5120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d50c6:	681a      	ldr	r2, [r3, #0]
   d50c8:	07d2      	lsls	r2, r2, #31
   d50ca:	bf5c      	itt	pl
   d50cc:	2201      	movpl	r2, #1
   d50ce:	601a      	strpl	r2, [r3, #0]
   d50d0:	4b14      	ldr	r3, [pc, #80]	; (d5124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d50d2:	681a      	ldr	r2, [r3, #0]
   d50d4:	07d0      	lsls	r0, r2, #31
   d50d6:	bf5c      	itt	pl
   d50d8:	2201      	movpl	r2, #1
   d50da:	601a      	strpl	r2, [r3, #0]
   d50dc:	4b12      	ldr	r3, [pc, #72]	; (d5128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d50de:	681a      	ldr	r2, [r3, #0]
   d50e0:	07d1      	lsls	r1, r2, #31
   d50e2:	bf5c      	itt	pl
   d50e4:	2201      	movpl	r2, #1
   d50e6:	601a      	strpl	r2, [r3, #0]
   d50e8:	4b10      	ldr	r3, [pc, #64]	; (d512c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d50ea:	681a      	ldr	r2, [r3, #0]
   d50ec:	07d2      	lsls	r2, r2, #31
   d50ee:	bf5c      	itt	pl
   d50f0:	2201      	movpl	r2, #1
   d50f2:	601a      	strpl	r2, [r3, #0]
   d50f4:	4b0e      	ldr	r3, [pc, #56]	; (d5130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d50f6:	681a      	ldr	r2, [r3, #0]
   d50f8:	07d0      	lsls	r0, r2, #31
   d50fa:	bf5c      	itt	pl
   d50fc:	2201      	movpl	r2, #1
   d50fe:	601a      	strpl	r2, [r3, #0]
   d5100:	4b0c      	ldr	r3, [pc, #48]	; (d5134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5102:	681a      	ldr	r2, [r3, #0]
   d5104:	07d1      	lsls	r1, r2, #31
   d5106:	bf5c      	itt	pl
   d5108:	2201      	movpl	r2, #1
   d510a:	601a      	strpl	r2, [r3, #0]
   d510c:	4b0a      	ldr	r3, [pc, #40]	; (d5138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d510e:	681a      	ldr	r2, [r3, #0]
   d5110:	07d2      	lsls	r2, r2, #31
   d5112:	bf5c      	itt	pl
   d5114:	2201      	movpl	r2, #1
   d5116:	601a      	strpl	r2, [r3, #0]
   d5118:	4770      	bx	lr
   d511a:	bf00      	nop
   d511c:	2003e76c 	.word	0x2003e76c
   d5120:	2003e768 	.word	0x2003e768
   d5124:	2003e764 	.word	0x2003e764
   d5128:	2003e760 	.word	0x2003e760
   d512c:	2003e75c 	.word	0x2003e75c
   d5130:	2003e758 	.word	0x2003e758
   d5134:	2003e754 	.word	0x2003e754
   d5138:	2003e750 	.word	0x2003e750

000d513c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d513c:	4b24      	ldr	r3, [pc, #144]	; (d51d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d513e:	681a      	ldr	r2, [r3, #0]
   d5140:	07d0      	lsls	r0, r2, #31
   d5142:	bf5c      	itt	pl
   d5144:	2201      	movpl	r2, #1
   d5146:	601a      	strpl	r2, [r3, #0]
   d5148:	4b22      	ldr	r3, [pc, #136]	; (d51d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d514a:	681a      	ldr	r2, [r3, #0]
   d514c:	07d1      	lsls	r1, r2, #31
   d514e:	bf5c      	itt	pl
   d5150:	2201      	movpl	r2, #1
   d5152:	601a      	strpl	r2, [r3, #0]
   d5154:	4b20      	ldr	r3, [pc, #128]	; (d51d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5156:	681a      	ldr	r2, [r3, #0]
   d5158:	07d2      	lsls	r2, r2, #31
   d515a:	bf5c      	itt	pl
   d515c:	2201      	movpl	r2, #1
   d515e:	601a      	strpl	r2, [r3, #0]
   d5160:	4b1e      	ldr	r3, [pc, #120]	; (d51dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5162:	681a      	ldr	r2, [r3, #0]
   d5164:	07d0      	lsls	r0, r2, #31
   d5166:	bf5c      	itt	pl
   d5168:	2201      	movpl	r2, #1
   d516a:	601a      	strpl	r2, [r3, #0]
   d516c:	4b1c      	ldr	r3, [pc, #112]	; (d51e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d516e:	681a      	ldr	r2, [r3, #0]
   d5170:	07d1      	lsls	r1, r2, #31
   d5172:	bf5c      	itt	pl
   d5174:	2201      	movpl	r2, #1
   d5176:	601a      	strpl	r2, [r3, #0]
   d5178:	4b1a      	ldr	r3, [pc, #104]	; (d51e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d517a:	681a      	ldr	r2, [r3, #0]
   d517c:	07d2      	lsls	r2, r2, #31
   d517e:	bf5c      	itt	pl
   d5180:	2201      	movpl	r2, #1
   d5182:	601a      	strpl	r2, [r3, #0]
   d5184:	4b18      	ldr	r3, [pc, #96]	; (d51e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5186:	681a      	ldr	r2, [r3, #0]
   d5188:	07d0      	lsls	r0, r2, #31
   d518a:	bf5c      	itt	pl
   d518c:	2201      	movpl	r2, #1
   d518e:	601a      	strpl	r2, [r3, #0]
   d5190:	4b16      	ldr	r3, [pc, #88]	; (d51ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5192:	681a      	ldr	r2, [r3, #0]
   d5194:	07d1      	lsls	r1, r2, #31
   d5196:	bf5c      	itt	pl
   d5198:	2201      	movpl	r2, #1
   d519a:	601a      	strpl	r2, [r3, #0]
   d519c:	4b14      	ldr	r3, [pc, #80]	; (d51f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d519e:	681a      	ldr	r2, [r3, #0]
   d51a0:	07d2      	lsls	r2, r2, #31
   d51a2:	bf5c      	itt	pl
   d51a4:	2201      	movpl	r2, #1
   d51a6:	601a      	strpl	r2, [r3, #0]
   d51a8:	4b12      	ldr	r3, [pc, #72]	; (d51f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d51aa:	681a      	ldr	r2, [r3, #0]
   d51ac:	07d0      	lsls	r0, r2, #31
   d51ae:	bf5c      	itt	pl
   d51b0:	2201      	movpl	r2, #1
   d51b2:	601a      	strpl	r2, [r3, #0]
   d51b4:	4b10      	ldr	r3, [pc, #64]	; (d51f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d51b6:	681a      	ldr	r2, [r3, #0]
   d51b8:	07d1      	lsls	r1, r2, #31
   d51ba:	bf5c      	itt	pl
   d51bc:	2201      	movpl	r2, #1
   d51be:	601a      	strpl	r2, [r3, #0]
   d51c0:	4b0e      	ldr	r3, [pc, #56]	; (d51fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d51c2:	681a      	ldr	r2, [r3, #0]
   d51c4:	07d2      	lsls	r2, r2, #31
   d51c6:	bf5c      	itt	pl
   d51c8:	2201      	movpl	r2, #1
   d51ca:	601a      	strpl	r2, [r3, #0]
   d51cc:	4770      	bx	lr
   d51ce:	bf00      	nop
   d51d0:	2003e79c 	.word	0x2003e79c
   d51d4:	2003e798 	.word	0x2003e798
   d51d8:	2003e794 	.word	0x2003e794
   d51dc:	2003e790 	.word	0x2003e790
   d51e0:	2003e78c 	.word	0x2003e78c
   d51e4:	2003e788 	.word	0x2003e788
   d51e8:	2003e784 	.word	0x2003e784
   d51ec:	2003e780 	.word	0x2003e780
   d51f0:	2003e77c 	.word	0x2003e77c
   d51f4:	2003e778 	.word	0x2003e778
   d51f8:	2003e774 	.word	0x2003e774
   d51fc:	2003e770 	.word	0x2003e770

000d5200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5200:	4b24      	ldr	r3, [pc, #144]	; (d5294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	07d0      	lsls	r0, r2, #31
   d5206:	bf5c      	itt	pl
   d5208:	2201      	movpl	r2, #1
   d520a:	601a      	strpl	r2, [r3, #0]
   d520c:	4b22      	ldr	r3, [pc, #136]	; (d5298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d520e:	681a      	ldr	r2, [r3, #0]
   d5210:	07d1      	lsls	r1, r2, #31
   d5212:	bf5c      	itt	pl
   d5214:	2201      	movpl	r2, #1
   d5216:	601a      	strpl	r2, [r3, #0]
   d5218:	4b20      	ldr	r3, [pc, #128]	; (d529c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d521a:	681a      	ldr	r2, [r3, #0]
   d521c:	07d2      	lsls	r2, r2, #31
   d521e:	bf5c      	itt	pl
   d5220:	2201      	movpl	r2, #1
   d5222:	601a      	strpl	r2, [r3, #0]
   d5224:	4b1e      	ldr	r3, [pc, #120]	; (d52a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5226:	681a      	ldr	r2, [r3, #0]
   d5228:	07d0      	lsls	r0, r2, #31
   d522a:	bf5c      	itt	pl
   d522c:	2201      	movpl	r2, #1
   d522e:	601a      	strpl	r2, [r3, #0]
   d5230:	4b1c      	ldr	r3, [pc, #112]	; (d52a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5232:	681a      	ldr	r2, [r3, #0]
   d5234:	07d1      	lsls	r1, r2, #31
   d5236:	bf5c      	itt	pl
   d5238:	2201      	movpl	r2, #1
   d523a:	601a      	strpl	r2, [r3, #0]
   d523c:	4b1a      	ldr	r3, [pc, #104]	; (d52a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d523e:	681a      	ldr	r2, [r3, #0]
   d5240:	07d2      	lsls	r2, r2, #31
   d5242:	bf5c      	itt	pl
   d5244:	2201      	movpl	r2, #1
   d5246:	601a      	strpl	r2, [r3, #0]
   d5248:	4b18      	ldr	r3, [pc, #96]	; (d52ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d524a:	681a      	ldr	r2, [r3, #0]
   d524c:	07d0      	lsls	r0, r2, #31
   d524e:	bf5c      	itt	pl
   d5250:	2201      	movpl	r2, #1
   d5252:	601a      	strpl	r2, [r3, #0]
   d5254:	4b16      	ldr	r3, [pc, #88]	; (d52b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5256:	681a      	ldr	r2, [r3, #0]
   d5258:	07d1      	lsls	r1, r2, #31
   d525a:	bf5c      	itt	pl
   d525c:	2201      	movpl	r2, #1
   d525e:	601a      	strpl	r2, [r3, #0]
   d5260:	4b14      	ldr	r3, [pc, #80]	; (d52b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5262:	681a      	ldr	r2, [r3, #0]
   d5264:	07d2      	lsls	r2, r2, #31
   d5266:	bf5c      	itt	pl
   d5268:	2201      	movpl	r2, #1
   d526a:	601a      	strpl	r2, [r3, #0]
   d526c:	4b12      	ldr	r3, [pc, #72]	; (d52b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d526e:	681a      	ldr	r2, [r3, #0]
   d5270:	07d0      	lsls	r0, r2, #31
   d5272:	bf5c      	itt	pl
   d5274:	2201      	movpl	r2, #1
   d5276:	601a      	strpl	r2, [r3, #0]
   d5278:	4b10      	ldr	r3, [pc, #64]	; (d52bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d527a:	681a      	ldr	r2, [r3, #0]
   d527c:	07d1      	lsls	r1, r2, #31
   d527e:	bf5c      	itt	pl
   d5280:	2201      	movpl	r2, #1
   d5282:	601a      	strpl	r2, [r3, #0]
   d5284:	4b0e      	ldr	r3, [pc, #56]	; (d52c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5286:	681a      	ldr	r2, [r3, #0]
   d5288:	07d2      	lsls	r2, r2, #31
   d528a:	bf5c      	itt	pl
   d528c:	2201      	movpl	r2, #1
   d528e:	601a      	strpl	r2, [r3, #0]
   d5290:	4770      	bx	lr
   d5292:	bf00      	nop
   d5294:	2003e7cc 	.word	0x2003e7cc
   d5298:	2003e7c8 	.word	0x2003e7c8
   d529c:	2003e7c4 	.word	0x2003e7c4
   d52a0:	2003e7c0 	.word	0x2003e7c0
   d52a4:	2003e7bc 	.word	0x2003e7bc
   d52a8:	2003e7b8 	.word	0x2003e7b8
   d52ac:	2003e7b4 	.word	0x2003e7b4
   d52b0:	2003e7b0 	.word	0x2003e7b0
   d52b4:	2003e7ac 	.word	0x2003e7ac
   d52b8:	2003e7a8 	.word	0x2003e7a8
   d52bc:	2003e7a4 	.word	0x2003e7a4
   d52c0:	2003e7a0 	.word	0x2003e7a0

000d52c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d52c4:	4b18      	ldr	r3, [pc, #96]	; (d5328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d52c6:	681a      	ldr	r2, [r3, #0]
   d52c8:	07d1      	lsls	r1, r2, #31
   d52ca:	bf5c      	itt	pl
   d52cc:	2201      	movpl	r2, #1
   d52ce:	601a      	strpl	r2, [r3, #0]
   d52d0:	4b16      	ldr	r3, [pc, #88]	; (d532c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d52d2:	681a      	ldr	r2, [r3, #0]
   d52d4:	07d2      	lsls	r2, r2, #31
   d52d6:	bf5c      	itt	pl
   d52d8:	2201      	movpl	r2, #1
   d52da:	601a      	strpl	r2, [r3, #0]
   d52dc:	4b14      	ldr	r3, [pc, #80]	; (d5330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d52de:	681a      	ldr	r2, [r3, #0]
   d52e0:	07d0      	lsls	r0, r2, #31
   d52e2:	bf5c      	itt	pl
   d52e4:	2201      	movpl	r2, #1
   d52e6:	601a      	strpl	r2, [r3, #0]
   d52e8:	4b12      	ldr	r3, [pc, #72]	; (d5334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d52ea:	681a      	ldr	r2, [r3, #0]
   d52ec:	07d1      	lsls	r1, r2, #31
   d52ee:	bf5c      	itt	pl
   d52f0:	2201      	movpl	r2, #1
   d52f2:	601a      	strpl	r2, [r3, #0]
   d52f4:	4b10      	ldr	r3, [pc, #64]	; (d5338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d52f6:	681a      	ldr	r2, [r3, #0]
   d52f8:	07d2      	lsls	r2, r2, #31
   d52fa:	bf5c      	itt	pl
   d52fc:	2201      	movpl	r2, #1
   d52fe:	601a      	strpl	r2, [r3, #0]
   d5300:	4b0e      	ldr	r3, [pc, #56]	; (d533c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5302:	681a      	ldr	r2, [r3, #0]
   d5304:	07d0      	lsls	r0, r2, #31
   d5306:	bf5c      	itt	pl
   d5308:	2201      	movpl	r2, #1
   d530a:	601a      	strpl	r2, [r3, #0]
   d530c:	4b0c      	ldr	r3, [pc, #48]	; (d5340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d530e:	681a      	ldr	r2, [r3, #0]
   d5310:	07d1      	lsls	r1, r2, #31
   d5312:	bf5c      	itt	pl
   d5314:	2201      	movpl	r2, #1
   d5316:	601a      	strpl	r2, [r3, #0]
   d5318:	4b0a      	ldr	r3, [pc, #40]	; (d5344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d2      	lsls	r2, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4770      	bx	lr
   d5326:	bf00      	nop
   d5328:	2003e7ec 	.word	0x2003e7ec
   d532c:	2003e7e8 	.word	0x2003e7e8
   d5330:	2003e7e4 	.word	0x2003e7e4
   d5334:	2003e7e0 	.word	0x2003e7e0
   d5338:	2003e7dc 	.word	0x2003e7dc
   d533c:	2003e7d8 	.word	0x2003e7d8
   d5340:	2003e7d4 	.word	0x2003e7d4
   d5344:	2003e7d0 	.word	0x2003e7d0

000d5348 <__aeabi_drsub>:
   d5348:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d534c:	e002      	b.n	d5354 <__adddf3>
   d534e:	bf00      	nop

000d5350 <__aeabi_dsub>:
   d5350:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5354 <__adddf3>:
   d5354:	b530      	push	{r4, r5, lr}
   d5356:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d535a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d535e:	ea94 0f05 	teq	r4, r5
   d5362:	bf08      	it	eq
   d5364:	ea90 0f02 	teqeq	r0, r2
   d5368:	bf1f      	itttt	ne
   d536a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d536e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5372:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5376:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d537a:	f000 80e2 	beq.w	d5542 <__adddf3+0x1ee>
   d537e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5382:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5386:	bfb8      	it	lt
   d5388:	426d      	neglt	r5, r5
   d538a:	dd0c      	ble.n	d53a6 <__adddf3+0x52>
   d538c:	442c      	add	r4, r5
   d538e:	ea80 0202 	eor.w	r2, r0, r2
   d5392:	ea81 0303 	eor.w	r3, r1, r3
   d5396:	ea82 0000 	eor.w	r0, r2, r0
   d539a:	ea83 0101 	eor.w	r1, r3, r1
   d539e:	ea80 0202 	eor.w	r2, r0, r2
   d53a2:	ea81 0303 	eor.w	r3, r1, r3
   d53a6:	2d36      	cmp	r5, #54	; 0x36
   d53a8:	bf88      	it	hi
   d53aa:	bd30      	pophi	{r4, r5, pc}
   d53ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d53b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d53b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d53b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d53bc:	d002      	beq.n	d53c4 <__adddf3+0x70>
   d53be:	4240      	negs	r0, r0
   d53c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d53c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d53c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d53cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d53d0:	d002      	beq.n	d53d8 <__adddf3+0x84>
   d53d2:	4252      	negs	r2, r2
   d53d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d53d8:	ea94 0f05 	teq	r4, r5
   d53dc:	f000 80a7 	beq.w	d552e <__adddf3+0x1da>
   d53e0:	f1a4 0401 	sub.w	r4, r4, #1
   d53e4:	f1d5 0e20 	rsbs	lr, r5, #32
   d53e8:	db0d      	blt.n	d5406 <__adddf3+0xb2>
   d53ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d53ee:	fa22 f205 	lsr.w	r2, r2, r5
   d53f2:	1880      	adds	r0, r0, r2
   d53f4:	f141 0100 	adc.w	r1, r1, #0
   d53f8:	fa03 f20e 	lsl.w	r2, r3, lr
   d53fc:	1880      	adds	r0, r0, r2
   d53fe:	fa43 f305 	asr.w	r3, r3, r5
   d5402:	4159      	adcs	r1, r3
   d5404:	e00e      	b.n	d5424 <__adddf3+0xd0>
   d5406:	f1a5 0520 	sub.w	r5, r5, #32
   d540a:	f10e 0e20 	add.w	lr, lr, #32
   d540e:	2a01      	cmp	r2, #1
   d5410:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5414:	bf28      	it	cs
   d5416:	f04c 0c02 	orrcs.w	ip, ip, #2
   d541a:	fa43 f305 	asr.w	r3, r3, r5
   d541e:	18c0      	adds	r0, r0, r3
   d5420:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5428:	d507      	bpl.n	d543a <__adddf3+0xe6>
   d542a:	f04f 0e00 	mov.w	lr, #0
   d542e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5432:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5436:	eb6e 0101 	sbc.w	r1, lr, r1
   d543a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d543e:	d31b      	bcc.n	d5478 <__adddf3+0x124>
   d5440:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5444:	d30c      	bcc.n	d5460 <__adddf3+0x10c>
   d5446:	0849      	lsrs	r1, r1, #1
   d5448:	ea5f 0030 	movs.w	r0, r0, rrx
   d544c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5450:	f104 0401 	add.w	r4, r4, #1
   d5454:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5458:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d545c:	f080 809a 	bcs.w	d5594 <__adddf3+0x240>
   d5460:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5464:	bf08      	it	eq
   d5466:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d546a:	f150 0000 	adcs.w	r0, r0, #0
   d546e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5472:	ea41 0105 	orr.w	r1, r1, r5
   d5476:	bd30      	pop	{r4, r5, pc}
   d5478:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d547c:	4140      	adcs	r0, r0
   d547e:	eb41 0101 	adc.w	r1, r1, r1
   d5482:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5486:	f1a4 0401 	sub.w	r4, r4, #1
   d548a:	d1e9      	bne.n	d5460 <__adddf3+0x10c>
   d548c:	f091 0f00 	teq	r1, #0
   d5490:	bf04      	itt	eq
   d5492:	4601      	moveq	r1, r0
   d5494:	2000      	moveq	r0, #0
   d5496:	fab1 f381 	clz	r3, r1
   d549a:	bf08      	it	eq
   d549c:	3320      	addeq	r3, #32
   d549e:	f1a3 030b 	sub.w	r3, r3, #11
   d54a2:	f1b3 0220 	subs.w	r2, r3, #32
   d54a6:	da0c      	bge.n	d54c2 <__adddf3+0x16e>
   d54a8:	320c      	adds	r2, #12
   d54aa:	dd08      	ble.n	d54be <__adddf3+0x16a>
   d54ac:	f102 0c14 	add.w	ip, r2, #20
   d54b0:	f1c2 020c 	rsb	r2, r2, #12
   d54b4:	fa01 f00c 	lsl.w	r0, r1, ip
   d54b8:	fa21 f102 	lsr.w	r1, r1, r2
   d54bc:	e00c      	b.n	d54d8 <__adddf3+0x184>
   d54be:	f102 0214 	add.w	r2, r2, #20
   d54c2:	bfd8      	it	le
   d54c4:	f1c2 0c20 	rsble	ip, r2, #32
   d54c8:	fa01 f102 	lsl.w	r1, r1, r2
   d54cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d54d0:	bfdc      	itt	le
   d54d2:	ea41 010c 	orrle.w	r1, r1, ip
   d54d6:	4090      	lslle	r0, r2
   d54d8:	1ae4      	subs	r4, r4, r3
   d54da:	bfa2      	ittt	ge
   d54dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d54e0:	4329      	orrge	r1, r5
   d54e2:	bd30      	popge	{r4, r5, pc}
   d54e4:	ea6f 0404 	mvn.w	r4, r4
   d54e8:	3c1f      	subs	r4, #31
   d54ea:	da1c      	bge.n	d5526 <__adddf3+0x1d2>
   d54ec:	340c      	adds	r4, #12
   d54ee:	dc0e      	bgt.n	d550e <__adddf3+0x1ba>
   d54f0:	f104 0414 	add.w	r4, r4, #20
   d54f4:	f1c4 0220 	rsb	r2, r4, #32
   d54f8:	fa20 f004 	lsr.w	r0, r0, r4
   d54fc:	fa01 f302 	lsl.w	r3, r1, r2
   d5500:	ea40 0003 	orr.w	r0, r0, r3
   d5504:	fa21 f304 	lsr.w	r3, r1, r4
   d5508:	ea45 0103 	orr.w	r1, r5, r3
   d550c:	bd30      	pop	{r4, r5, pc}
   d550e:	f1c4 040c 	rsb	r4, r4, #12
   d5512:	f1c4 0220 	rsb	r2, r4, #32
   d5516:	fa20 f002 	lsr.w	r0, r0, r2
   d551a:	fa01 f304 	lsl.w	r3, r1, r4
   d551e:	ea40 0003 	orr.w	r0, r0, r3
   d5522:	4629      	mov	r1, r5
   d5524:	bd30      	pop	{r4, r5, pc}
   d5526:	fa21 f004 	lsr.w	r0, r1, r4
   d552a:	4629      	mov	r1, r5
   d552c:	bd30      	pop	{r4, r5, pc}
   d552e:	f094 0f00 	teq	r4, #0
   d5532:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5536:	bf06      	itte	eq
   d5538:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d553c:	3401      	addeq	r4, #1
   d553e:	3d01      	subne	r5, #1
   d5540:	e74e      	b.n	d53e0 <__adddf3+0x8c>
   d5542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5546:	bf18      	it	ne
   d5548:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d554c:	d029      	beq.n	d55a2 <__adddf3+0x24e>
   d554e:	ea94 0f05 	teq	r4, r5
   d5552:	bf08      	it	eq
   d5554:	ea90 0f02 	teqeq	r0, r2
   d5558:	d005      	beq.n	d5566 <__adddf3+0x212>
   d555a:	ea54 0c00 	orrs.w	ip, r4, r0
   d555e:	bf04      	itt	eq
   d5560:	4619      	moveq	r1, r3
   d5562:	4610      	moveq	r0, r2
   d5564:	bd30      	pop	{r4, r5, pc}
   d5566:	ea91 0f03 	teq	r1, r3
   d556a:	bf1e      	ittt	ne
   d556c:	2100      	movne	r1, #0
   d556e:	2000      	movne	r0, #0
   d5570:	bd30      	popne	{r4, r5, pc}
   d5572:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5576:	d105      	bne.n	d5584 <__adddf3+0x230>
   d5578:	0040      	lsls	r0, r0, #1
   d557a:	4149      	adcs	r1, r1
   d557c:	bf28      	it	cs
   d557e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5582:	bd30      	pop	{r4, r5, pc}
   d5584:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5588:	bf3c      	itt	cc
   d558a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d558e:	bd30      	popcc	{r4, r5, pc}
   d5590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5594:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5598:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d559c:	f04f 0000 	mov.w	r0, #0
   d55a0:	bd30      	pop	{r4, r5, pc}
   d55a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d55a6:	bf1a      	itte	ne
   d55a8:	4619      	movne	r1, r3
   d55aa:	4610      	movne	r0, r2
   d55ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d55b0:	bf1c      	itt	ne
   d55b2:	460b      	movne	r3, r1
   d55b4:	4602      	movne	r2, r0
   d55b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d55ba:	bf06      	itte	eq
   d55bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d55c0:	ea91 0f03 	teqeq	r1, r3
   d55c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d55c8:	bd30      	pop	{r4, r5, pc}
   d55ca:	bf00      	nop

000d55cc <__aeabi_ui2d>:
   d55cc:	f090 0f00 	teq	r0, #0
   d55d0:	bf04      	itt	eq
   d55d2:	2100      	moveq	r1, #0
   d55d4:	4770      	bxeq	lr
   d55d6:	b530      	push	{r4, r5, lr}
   d55d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d55dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d55e0:	f04f 0500 	mov.w	r5, #0
   d55e4:	f04f 0100 	mov.w	r1, #0
   d55e8:	e750      	b.n	d548c <__adddf3+0x138>
   d55ea:	bf00      	nop

000d55ec <__aeabi_i2d>:
   d55ec:	f090 0f00 	teq	r0, #0
   d55f0:	bf04      	itt	eq
   d55f2:	2100      	moveq	r1, #0
   d55f4:	4770      	bxeq	lr
   d55f6:	b530      	push	{r4, r5, lr}
   d55f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d55fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5600:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5604:	bf48      	it	mi
   d5606:	4240      	negmi	r0, r0
   d5608:	f04f 0100 	mov.w	r1, #0
   d560c:	e73e      	b.n	d548c <__adddf3+0x138>
   d560e:	bf00      	nop

000d5610 <__aeabi_f2d>:
   d5610:	0042      	lsls	r2, r0, #1
   d5612:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5616:	ea4f 0131 	mov.w	r1, r1, rrx
   d561a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d561e:	bf1f      	itttt	ne
   d5620:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5628:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d562c:	4770      	bxne	lr
   d562e:	f092 0f00 	teq	r2, #0
   d5632:	bf14      	ite	ne
   d5634:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5638:	4770      	bxeq	lr
   d563a:	b530      	push	{r4, r5, lr}
   d563c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5648:	e720      	b.n	d548c <__adddf3+0x138>
   d564a:	bf00      	nop

000d564c <__aeabi_ul2d>:
   d564c:	ea50 0201 	orrs.w	r2, r0, r1
   d5650:	bf08      	it	eq
   d5652:	4770      	bxeq	lr
   d5654:	b530      	push	{r4, r5, lr}
   d5656:	f04f 0500 	mov.w	r5, #0
   d565a:	e00a      	b.n	d5672 <__aeabi_l2d+0x16>

000d565c <__aeabi_l2d>:
   d565c:	ea50 0201 	orrs.w	r2, r0, r1
   d5660:	bf08      	it	eq
   d5662:	4770      	bxeq	lr
   d5664:	b530      	push	{r4, r5, lr}
   d5666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d566a:	d502      	bpl.n	d5672 <__aeabi_l2d+0x16>
   d566c:	4240      	negs	r0, r0
   d566e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5672:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5676:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d567a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d567e:	f43f aedc 	beq.w	d543a <__adddf3+0xe6>
   d5682:	f04f 0203 	mov.w	r2, #3
   d5686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d568a:	bf18      	it	ne
   d568c:	3203      	addne	r2, #3
   d568e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5692:	bf18      	it	ne
   d5694:	3203      	addne	r2, #3
   d5696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d569a:	f1c2 0320 	rsb	r3, r2, #32
   d569e:	fa00 fc03 	lsl.w	ip, r0, r3
   d56a2:	fa20 f002 	lsr.w	r0, r0, r2
   d56a6:	fa01 fe03 	lsl.w	lr, r1, r3
   d56aa:	ea40 000e 	orr.w	r0, r0, lr
   d56ae:	fa21 f102 	lsr.w	r1, r1, r2
   d56b2:	4414      	add	r4, r2
   d56b4:	e6c1      	b.n	d543a <__adddf3+0xe6>
   d56b6:	bf00      	nop

000d56b8 <__aeabi_dmul>:
   d56b8:	b570      	push	{r4, r5, r6, lr}
   d56ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d56be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d56c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d56c6:	bf1d      	ittte	ne
   d56c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d56cc:	ea94 0f0c 	teqne	r4, ip
   d56d0:	ea95 0f0c 	teqne	r5, ip
   d56d4:	f000 f8de 	bleq	d5894 <__aeabi_dmul+0x1dc>
   d56d8:	442c      	add	r4, r5
   d56da:	ea81 0603 	eor.w	r6, r1, r3
   d56de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d56e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d56e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d56ea:	bf18      	it	ne
   d56ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d56f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d56f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d56f8:	d038      	beq.n	d576c <__aeabi_dmul+0xb4>
   d56fa:	fba0 ce02 	umull	ip, lr, r0, r2
   d56fe:	f04f 0500 	mov.w	r5, #0
   d5702:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d570a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d570e:	f04f 0600 	mov.w	r6, #0
   d5712:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5716:	f09c 0f00 	teq	ip, #0
   d571a:	bf18      	it	ne
   d571c:	f04e 0e01 	orrne.w	lr, lr, #1
   d5720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d572c:	d204      	bcs.n	d5738 <__aeabi_dmul+0x80>
   d572e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5732:	416d      	adcs	r5, r5
   d5734:	eb46 0606 	adc.w	r6, r6, r6
   d5738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d573c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d574c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5750:	bf88      	it	hi
   d5752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5756:	d81e      	bhi.n	d5796 <__aeabi_dmul+0xde>
   d5758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d575c:	bf08      	it	eq
   d575e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5762:	f150 0000 	adcs.w	r0, r0, #0
   d5766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d576a:	bd70      	pop	{r4, r5, r6, pc}
   d576c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5770:	ea46 0101 	orr.w	r1, r6, r1
   d5774:	ea40 0002 	orr.w	r0, r0, r2
   d5778:	ea81 0103 	eor.w	r1, r1, r3
   d577c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5780:	bfc2      	ittt	gt
   d5782:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d578a:	bd70      	popgt	{r4, r5, r6, pc}
   d578c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5790:	f04f 0e00 	mov.w	lr, #0
   d5794:	3c01      	subs	r4, #1
   d5796:	f300 80ab 	bgt.w	d58f0 <__aeabi_dmul+0x238>
   d579a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d579e:	bfde      	ittt	le
   d57a0:	2000      	movle	r0, #0
   d57a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d57a6:	bd70      	pople	{r4, r5, r6, pc}
   d57a8:	f1c4 0400 	rsb	r4, r4, #0
   d57ac:	3c20      	subs	r4, #32
   d57ae:	da35      	bge.n	d581c <__aeabi_dmul+0x164>
   d57b0:	340c      	adds	r4, #12
   d57b2:	dc1b      	bgt.n	d57ec <__aeabi_dmul+0x134>
   d57b4:	f104 0414 	add.w	r4, r4, #20
   d57b8:	f1c4 0520 	rsb	r5, r4, #32
   d57bc:	fa00 f305 	lsl.w	r3, r0, r5
   d57c0:	fa20 f004 	lsr.w	r0, r0, r4
   d57c4:	fa01 f205 	lsl.w	r2, r1, r5
   d57c8:	ea40 0002 	orr.w	r0, r0, r2
   d57cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d57d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d57d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d57d8:	fa21 f604 	lsr.w	r6, r1, r4
   d57dc:	eb42 0106 	adc.w	r1, r2, r6
   d57e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d57e4:	bf08      	it	eq
   d57e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d57ea:	bd70      	pop	{r4, r5, r6, pc}
   d57ec:	f1c4 040c 	rsb	r4, r4, #12
   d57f0:	f1c4 0520 	rsb	r5, r4, #32
   d57f4:	fa00 f304 	lsl.w	r3, r0, r4
   d57f8:	fa20 f005 	lsr.w	r0, r0, r5
   d57fc:	fa01 f204 	lsl.w	r2, r1, r4
   d5800:	ea40 0002 	orr.w	r0, r0, r2
   d5804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d580c:	f141 0100 	adc.w	r1, r1, #0
   d5810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5814:	bf08      	it	eq
   d5816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d581a:	bd70      	pop	{r4, r5, r6, pc}
   d581c:	f1c4 0520 	rsb	r5, r4, #32
   d5820:	fa00 f205 	lsl.w	r2, r0, r5
   d5824:	ea4e 0e02 	orr.w	lr, lr, r2
   d5828:	fa20 f304 	lsr.w	r3, r0, r4
   d582c:	fa01 f205 	lsl.w	r2, r1, r5
   d5830:	ea43 0302 	orr.w	r3, r3, r2
   d5834:	fa21 f004 	lsr.w	r0, r1, r4
   d5838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d583c:	fa21 f204 	lsr.w	r2, r1, r4
   d5840:	ea20 0002 	bic.w	r0, r0, r2
   d5844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d584c:	bf08      	it	eq
   d584e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5852:	bd70      	pop	{r4, r5, r6, pc}
   d5854:	f094 0f00 	teq	r4, #0
   d5858:	d10f      	bne.n	d587a <__aeabi_dmul+0x1c2>
   d585a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d585e:	0040      	lsls	r0, r0, #1
   d5860:	eb41 0101 	adc.w	r1, r1, r1
   d5864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5868:	bf08      	it	eq
   d586a:	3c01      	subeq	r4, #1
   d586c:	d0f7      	beq.n	d585e <__aeabi_dmul+0x1a6>
   d586e:	ea41 0106 	orr.w	r1, r1, r6
   d5872:	f095 0f00 	teq	r5, #0
   d5876:	bf18      	it	ne
   d5878:	4770      	bxne	lr
   d587a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d587e:	0052      	lsls	r2, r2, #1
   d5880:	eb43 0303 	adc.w	r3, r3, r3
   d5884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5888:	bf08      	it	eq
   d588a:	3d01      	subeq	r5, #1
   d588c:	d0f7      	beq.n	d587e <__aeabi_dmul+0x1c6>
   d588e:	ea43 0306 	orr.w	r3, r3, r6
   d5892:	4770      	bx	lr
   d5894:	ea94 0f0c 	teq	r4, ip
   d5898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d589c:	bf18      	it	ne
   d589e:	ea95 0f0c 	teqne	r5, ip
   d58a2:	d00c      	beq.n	d58be <__aeabi_dmul+0x206>
   d58a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d58a8:	bf18      	it	ne
   d58aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d58ae:	d1d1      	bne.n	d5854 <__aeabi_dmul+0x19c>
   d58b0:	ea81 0103 	eor.w	r1, r1, r3
   d58b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d58b8:	f04f 0000 	mov.w	r0, #0
   d58bc:	bd70      	pop	{r4, r5, r6, pc}
   d58be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d58c2:	bf06      	itte	eq
   d58c4:	4610      	moveq	r0, r2
   d58c6:	4619      	moveq	r1, r3
   d58c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d58cc:	d019      	beq.n	d5902 <__aeabi_dmul+0x24a>
   d58ce:	ea94 0f0c 	teq	r4, ip
   d58d2:	d102      	bne.n	d58da <__aeabi_dmul+0x222>
   d58d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d58d8:	d113      	bne.n	d5902 <__aeabi_dmul+0x24a>
   d58da:	ea95 0f0c 	teq	r5, ip
   d58de:	d105      	bne.n	d58ec <__aeabi_dmul+0x234>
   d58e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d58e4:	bf1c      	itt	ne
   d58e6:	4610      	movne	r0, r2
   d58e8:	4619      	movne	r1, r3
   d58ea:	d10a      	bne.n	d5902 <__aeabi_dmul+0x24a>
   d58ec:	ea81 0103 	eor.w	r1, r1, r3
   d58f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d58f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d58f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d58fc:	f04f 0000 	mov.w	r0, #0
   d5900:	bd70      	pop	{r4, r5, r6, pc}
   d5902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d590a:	bd70      	pop	{r4, r5, r6, pc}

000d590c <__aeabi_ddiv>:
   d590c:	b570      	push	{r4, r5, r6, lr}
   d590e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d591a:	bf1d      	ittte	ne
   d591c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5920:	ea94 0f0c 	teqne	r4, ip
   d5924:	ea95 0f0c 	teqne	r5, ip
   d5928:	f000 f8a7 	bleq	d5a7a <__aeabi_ddiv+0x16e>
   d592c:	eba4 0405 	sub.w	r4, r4, r5
   d5930:	ea81 0e03 	eor.w	lr, r1, r3
   d5934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5938:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d593c:	f000 8088 	beq.w	d5a50 <__aeabi_ddiv+0x144>
   d5940:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d594c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5950:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d595c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5964:	429d      	cmp	r5, r3
   d5966:	bf08      	it	eq
   d5968:	4296      	cmpeq	r6, r2
   d596a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d596e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5972:	d202      	bcs.n	d597a <__aeabi_ddiv+0x6e>
   d5974:	085b      	lsrs	r3, r3, #1
   d5976:	ea4f 0232 	mov.w	r2, r2, rrx
   d597a:	1ab6      	subs	r6, r6, r2
   d597c:	eb65 0503 	sbc.w	r5, r5, r3
   d5980:	085b      	lsrs	r3, r3, #1
   d5982:	ea4f 0232 	mov.w	r2, r2, rrx
   d5986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d598a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d598e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5992:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5996:	bf22      	ittt	cs
   d5998:	1ab6      	subcs	r6, r6, r2
   d599a:	4675      	movcs	r5, lr
   d599c:	ea40 000c 	orrcs.w	r0, r0, ip
   d59a0:	085b      	lsrs	r3, r3, #1
   d59a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d59a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d59aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d59ae:	bf22      	ittt	cs
   d59b0:	1ab6      	subcs	r6, r6, r2
   d59b2:	4675      	movcs	r5, lr
   d59b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d59b8:	085b      	lsrs	r3, r3, #1
   d59ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d59be:	ebb6 0e02 	subs.w	lr, r6, r2
   d59c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d59c6:	bf22      	ittt	cs
   d59c8:	1ab6      	subcs	r6, r6, r2
   d59ca:	4675      	movcs	r5, lr
   d59cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d59d0:	085b      	lsrs	r3, r3, #1
   d59d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d59d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d59da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d59de:	bf22      	ittt	cs
   d59e0:	1ab6      	subcs	r6, r6, r2
   d59e2:	4675      	movcs	r5, lr
   d59e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d59e8:	ea55 0e06 	orrs.w	lr, r5, r6
   d59ec:	d018      	beq.n	d5a20 <__aeabi_ddiv+0x114>
   d59ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d59f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d59f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d59fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d59fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5a0a:	d1c0      	bne.n	d598e <__aeabi_ddiv+0x82>
   d5a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5a10:	d10b      	bne.n	d5a2a <__aeabi_ddiv+0x11e>
   d5a12:	ea41 0100 	orr.w	r1, r1, r0
   d5a16:	f04f 0000 	mov.w	r0, #0
   d5a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5a1e:	e7b6      	b.n	d598e <__aeabi_ddiv+0x82>
   d5a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5a24:	bf04      	itt	eq
   d5a26:	4301      	orreq	r1, r0
   d5a28:	2000      	moveq	r0, #0
   d5a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5a2e:	bf88      	it	hi
   d5a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5a34:	f63f aeaf 	bhi.w	d5796 <__aeabi_dmul+0xde>
   d5a38:	ebb5 0c03 	subs.w	ip, r5, r3
   d5a3c:	bf04      	itt	eq
   d5a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5a46:	f150 0000 	adcs.w	r0, r0, #0
   d5a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5a4e:	bd70      	pop	{r4, r5, r6, pc}
   d5a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5a5c:	bfc2      	ittt	gt
   d5a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5a66:	bd70      	popgt	{r4, r5, r6, pc}
   d5a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a6c:	f04f 0e00 	mov.w	lr, #0
   d5a70:	3c01      	subs	r4, #1
   d5a72:	e690      	b.n	d5796 <__aeabi_dmul+0xde>
   d5a74:	ea45 0e06 	orr.w	lr, r5, r6
   d5a78:	e68d      	b.n	d5796 <__aeabi_dmul+0xde>
   d5a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5a7e:	ea94 0f0c 	teq	r4, ip
   d5a82:	bf08      	it	eq
   d5a84:	ea95 0f0c 	teqeq	r5, ip
   d5a88:	f43f af3b 	beq.w	d5902 <__aeabi_dmul+0x24a>
   d5a8c:	ea94 0f0c 	teq	r4, ip
   d5a90:	d10a      	bne.n	d5aa8 <__aeabi_ddiv+0x19c>
   d5a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a96:	f47f af34 	bne.w	d5902 <__aeabi_dmul+0x24a>
   d5a9a:	ea95 0f0c 	teq	r5, ip
   d5a9e:	f47f af25 	bne.w	d58ec <__aeabi_dmul+0x234>
   d5aa2:	4610      	mov	r0, r2
   d5aa4:	4619      	mov	r1, r3
   d5aa6:	e72c      	b.n	d5902 <__aeabi_dmul+0x24a>
   d5aa8:	ea95 0f0c 	teq	r5, ip
   d5aac:	d106      	bne.n	d5abc <__aeabi_ddiv+0x1b0>
   d5aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ab2:	f43f aefd 	beq.w	d58b0 <__aeabi_dmul+0x1f8>
   d5ab6:	4610      	mov	r0, r2
   d5ab8:	4619      	mov	r1, r3
   d5aba:	e722      	b.n	d5902 <__aeabi_dmul+0x24a>
   d5abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ac0:	bf18      	it	ne
   d5ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5ac6:	f47f aec5 	bne.w	d5854 <__aeabi_dmul+0x19c>
   d5aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5ace:	f47f af0d 	bne.w	d58ec <__aeabi_dmul+0x234>
   d5ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5ad6:	f47f aeeb 	bne.w	d58b0 <__aeabi_dmul+0x1f8>
   d5ada:	e712      	b.n	d5902 <__aeabi_dmul+0x24a>

000d5adc <__gedf2>:
   d5adc:	f04f 3cff 	mov.w	ip, #4294967295
   d5ae0:	e006      	b.n	d5af0 <__cmpdf2+0x4>
   d5ae2:	bf00      	nop

000d5ae4 <__ledf2>:
   d5ae4:	f04f 0c01 	mov.w	ip, #1
   d5ae8:	e002      	b.n	d5af0 <__cmpdf2+0x4>
   d5aea:	bf00      	nop

000d5aec <__cmpdf2>:
   d5aec:	f04f 0c01 	mov.w	ip, #1
   d5af0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5b00:	bf18      	it	ne
   d5b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5b06:	d01b      	beq.n	d5b40 <__cmpdf2+0x54>
   d5b08:	b001      	add	sp, #4
   d5b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5b0e:	bf0c      	ite	eq
   d5b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5b14:	ea91 0f03 	teqne	r1, r3
   d5b18:	bf02      	ittt	eq
   d5b1a:	ea90 0f02 	teqeq	r0, r2
   d5b1e:	2000      	moveq	r0, #0
   d5b20:	4770      	bxeq	lr
   d5b22:	f110 0f00 	cmn.w	r0, #0
   d5b26:	ea91 0f03 	teq	r1, r3
   d5b2a:	bf58      	it	pl
   d5b2c:	4299      	cmppl	r1, r3
   d5b2e:	bf08      	it	eq
   d5b30:	4290      	cmpeq	r0, r2
   d5b32:	bf2c      	ite	cs
   d5b34:	17d8      	asrcs	r0, r3, #31
   d5b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5b3a:	f040 0001 	orr.w	r0, r0, #1
   d5b3e:	4770      	bx	lr
   d5b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5b48:	d102      	bne.n	d5b50 <__cmpdf2+0x64>
   d5b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5b4e:	d107      	bne.n	d5b60 <__cmpdf2+0x74>
   d5b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5b58:	d1d6      	bne.n	d5b08 <__cmpdf2+0x1c>
   d5b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5b5e:	d0d3      	beq.n	d5b08 <__cmpdf2+0x1c>
   d5b60:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5b64:	4770      	bx	lr
   d5b66:	bf00      	nop

000d5b68 <__aeabi_cdrcmple>:
   d5b68:	4684      	mov	ip, r0
   d5b6a:	4610      	mov	r0, r2
   d5b6c:	4662      	mov	r2, ip
   d5b6e:	468c      	mov	ip, r1
   d5b70:	4619      	mov	r1, r3
   d5b72:	4663      	mov	r3, ip
   d5b74:	e000      	b.n	d5b78 <__aeabi_cdcmpeq>
   d5b76:	bf00      	nop

000d5b78 <__aeabi_cdcmpeq>:
   d5b78:	b501      	push	{r0, lr}
   d5b7a:	f7ff ffb7 	bl	d5aec <__cmpdf2>
   d5b7e:	2800      	cmp	r0, #0
   d5b80:	bf48      	it	mi
   d5b82:	f110 0f00 	cmnmi.w	r0, #0
   d5b86:	bd01      	pop	{r0, pc}

000d5b88 <__aeabi_dcmpeq>:
   d5b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5b8c:	f7ff fff4 	bl	d5b78 <__aeabi_cdcmpeq>
   d5b90:	bf0c      	ite	eq
   d5b92:	2001      	moveq	r0, #1
   d5b94:	2000      	movne	r0, #0
   d5b96:	f85d fb08 	ldr.w	pc, [sp], #8
   d5b9a:	bf00      	nop

000d5b9c <__aeabi_dcmplt>:
   d5b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ba0:	f7ff ffea 	bl	d5b78 <__aeabi_cdcmpeq>
   d5ba4:	bf34      	ite	cc
   d5ba6:	2001      	movcc	r0, #1
   d5ba8:	2000      	movcs	r0, #0
   d5baa:	f85d fb08 	ldr.w	pc, [sp], #8
   d5bae:	bf00      	nop

000d5bb0 <__aeabi_dcmple>:
   d5bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5bb4:	f7ff ffe0 	bl	d5b78 <__aeabi_cdcmpeq>
   d5bb8:	bf94      	ite	ls
   d5bba:	2001      	movls	r0, #1
   d5bbc:	2000      	movhi	r0, #0
   d5bbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d5bc2:	bf00      	nop

000d5bc4 <__aeabi_dcmpge>:
   d5bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5bc8:	f7ff ffce 	bl	d5b68 <__aeabi_cdrcmple>
   d5bcc:	bf94      	ite	ls
   d5bce:	2001      	movls	r0, #1
   d5bd0:	2000      	movhi	r0, #0
   d5bd2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5bd6:	bf00      	nop

000d5bd8 <__aeabi_dcmpgt>:
   d5bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5bdc:	f7ff ffc4 	bl	d5b68 <__aeabi_cdrcmple>
   d5be0:	bf34      	ite	cc
   d5be2:	2001      	movcc	r0, #1
   d5be4:	2000      	movcs	r0, #0
   d5be6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5bea:	bf00      	nop

000d5bec <__aeabi_dcmpun>:
   d5bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5bf4:	d102      	bne.n	d5bfc <__aeabi_dcmpun+0x10>
   d5bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5bfa:	d10a      	bne.n	d5c12 <__aeabi_dcmpun+0x26>
   d5bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5c04:	d102      	bne.n	d5c0c <__aeabi_dcmpun+0x20>
   d5c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5c0a:	d102      	bne.n	d5c12 <__aeabi_dcmpun+0x26>
   d5c0c:	f04f 0000 	mov.w	r0, #0
   d5c10:	4770      	bx	lr
   d5c12:	f04f 0001 	mov.w	r0, #1
   d5c16:	4770      	bx	lr

000d5c18 <__aeabi_d2iz>:
   d5c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5c20:	d215      	bcs.n	d5c4e <__aeabi_d2iz+0x36>
   d5c22:	d511      	bpl.n	d5c48 <__aeabi_d2iz+0x30>
   d5c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5c2c:	d912      	bls.n	d5c54 <__aeabi_d2iz+0x3c>
   d5c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c3e:	fa23 f002 	lsr.w	r0, r3, r2
   d5c42:	bf18      	it	ne
   d5c44:	4240      	negne	r0, r0
   d5c46:	4770      	bx	lr
   d5c48:	f04f 0000 	mov.w	r0, #0
   d5c4c:	4770      	bx	lr
   d5c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5c52:	d105      	bne.n	d5c60 <__aeabi_d2iz+0x48>
   d5c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5c58:	bf08      	it	eq
   d5c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5c5e:	4770      	bx	lr
   d5c60:	f04f 0000 	mov.w	r0, #0
   d5c64:	4770      	bx	lr
   d5c66:	bf00      	nop

000d5c68 <__aeabi_d2uiz>:
   d5c68:	004a      	lsls	r2, r1, #1
   d5c6a:	d211      	bcs.n	d5c90 <__aeabi_d2uiz+0x28>
   d5c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5c70:	d211      	bcs.n	d5c96 <__aeabi_d2uiz+0x2e>
   d5c72:	d50d      	bpl.n	d5c90 <__aeabi_d2uiz+0x28>
   d5c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5c7c:	d40e      	bmi.n	d5c9c <__aeabi_d2uiz+0x34>
   d5c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5c8a:	fa23 f002 	lsr.w	r0, r3, r2
   d5c8e:	4770      	bx	lr
   d5c90:	f04f 0000 	mov.w	r0, #0
   d5c94:	4770      	bx	lr
   d5c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5c9a:	d102      	bne.n	d5ca2 <__aeabi_d2uiz+0x3a>
   d5c9c:	f04f 30ff 	mov.w	r0, #4294967295
   d5ca0:	4770      	bx	lr
   d5ca2:	f04f 0000 	mov.w	r0, #0
   d5ca6:	4770      	bx	lr

000d5ca8 <__aeabi_d2f>:
   d5ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5cb0:	bf24      	itt	cs
   d5cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5cba:	d90d      	bls.n	d5cd8 <__aeabi_d2f+0x30>
   d5cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5cd0:	bf08      	it	eq
   d5cd2:	f020 0001 	biceq.w	r0, r0, #1
   d5cd6:	4770      	bx	lr
   d5cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5cdc:	d121      	bne.n	d5d22 <__aeabi_d2f+0x7a>
   d5cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5ce2:	bfbc      	itt	lt
   d5ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5ce8:	4770      	bxlt	lr
   d5cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d5cf2:	f1c2 0218 	rsb	r2, r2, #24
   d5cf6:	f1c2 0c20 	rsb	ip, r2, #32
   d5cfa:	fa10 f30c 	lsls.w	r3, r0, ip
   d5cfe:	fa20 f002 	lsr.w	r0, r0, r2
   d5d02:	bf18      	it	ne
   d5d04:	f040 0001 	orrne.w	r0, r0, #1
   d5d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d5d10:	fa03 fc0c 	lsl.w	ip, r3, ip
   d5d14:	ea40 000c 	orr.w	r0, r0, ip
   d5d18:	fa23 f302 	lsr.w	r3, r3, r2
   d5d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d5d20:	e7cc      	b.n	d5cbc <__aeabi_d2f+0x14>
   d5d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d5d26:	d107      	bne.n	d5d38 <__aeabi_d2f+0x90>
   d5d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d5d2c:	bf1e      	ittt	ne
   d5d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d5d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d5d36:	4770      	bxne	lr
   d5d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d5d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d5d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d5d44:	4770      	bx	lr
   d5d46:	bf00      	nop

000d5d48 <__cxa_atexit>:
   d5d48:	b510      	push	{r4, lr}
   d5d4a:	4c05      	ldr	r4, [pc, #20]	; (d5d60 <__cxa_atexit+0x18>)
   d5d4c:	4613      	mov	r3, r2
   d5d4e:	b12c      	cbz	r4, d5d5c <__cxa_atexit+0x14>
   d5d50:	460a      	mov	r2, r1
   d5d52:	4601      	mov	r1, r0
   d5d54:	2002      	movs	r0, #2
   d5d56:	f3af 8000 	nop.w
   d5d5a:	bd10      	pop	{r4, pc}
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	bd10      	pop	{r4, pc}
   d5d60:	00000000 	.word	0x00000000

000d5d64 <memcpy>:
   d5d64:	b510      	push	{r4, lr}
   d5d66:	1e43      	subs	r3, r0, #1
   d5d68:	440a      	add	r2, r1
   d5d6a:	4291      	cmp	r1, r2
   d5d6c:	d004      	beq.n	d5d78 <memcpy+0x14>
   d5d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d72:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5d76:	e7f8      	b.n	d5d6a <memcpy+0x6>
   d5d78:	bd10      	pop	{r4, pc}

000d5d7a <memset>:
   d5d7a:	4402      	add	r2, r0
   d5d7c:	4603      	mov	r3, r0
   d5d7e:	4293      	cmp	r3, r2
   d5d80:	d002      	beq.n	d5d88 <memset+0xe>
   d5d82:	f803 1b01 	strb.w	r1, [r3], #1
   d5d86:	e7fa      	b.n	d5d7e <memset+0x4>
   d5d88:	4770      	bx	lr
	...

000d5d8c <srand>:
   d5d8c:	b538      	push	{r3, r4, r5, lr}
   d5d8e:	4b12      	ldr	r3, [pc, #72]	; (d5dd8 <srand+0x4c>)
   d5d90:	681c      	ldr	r4, [r3, #0]
   d5d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5d94:	4605      	mov	r5, r0
   d5d96:	b9d3      	cbnz	r3, d5dce <srand+0x42>
   d5d98:	2018      	movs	r0, #24
   d5d9a:	f7fe fbb3 	bl	d4504 <malloc>
   d5d9e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5da2:	63a0      	str	r0, [r4, #56]	; 0x38
   d5da4:	8003      	strh	r3, [r0, #0]
   d5da6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5daa:	8043      	strh	r3, [r0, #2]
   d5dac:	f241 2334 	movw	r3, #4660	; 0x1234
   d5db0:	8083      	strh	r3, [r0, #4]
   d5db2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5db6:	80c3      	strh	r3, [r0, #6]
   d5db8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5dbc:	8103      	strh	r3, [r0, #8]
   d5dbe:	2305      	movs	r3, #5
   d5dc0:	8143      	strh	r3, [r0, #10]
   d5dc2:	230b      	movs	r3, #11
   d5dc4:	8183      	strh	r3, [r0, #12]
   d5dc6:	2201      	movs	r2, #1
   d5dc8:	2300      	movs	r3, #0
   d5dca:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	611d      	str	r5, [r3, #16]
   d5dd4:	615a      	str	r2, [r3, #20]
   d5dd6:	bd38      	pop	{r3, r4, r5, pc}
   d5dd8:	2003e3c8 	.word	0x2003e3c8

000d5ddc <strlen>:
   d5ddc:	4603      	mov	r3, r0
   d5dde:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5de2:	2a00      	cmp	r2, #0
   d5de4:	d1fb      	bne.n	d5dde <strlen+0x2>
   d5de6:	1a18      	subs	r0, r3, r0
   d5de8:	3801      	subs	r0, #1
   d5dea:	4770      	bx	lr

000d5dec <dynalib_user>:
   d5dec:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5dfc:	0000 0000 4441 2043 6f56 746c 6761 2065     ....ADC Voltage 
   d5e0c:	203d 6d00 0056 0000                         = .mV...

000d5e14 <_ZTVN5spark12NetworkClassE>:
	...
   d5e1c:	4525 000d 452f 000d 4539 000d 4543 000d     %E../E..9E..CE..
   d5e2c:	454d 000d 4559 000d 4565 000d 4571 000d     ME..YE..eE..qE..
   d5e3c:	4579 000d 4583 000d 458d 000d               yE...E...E..

000d5e48 <_ZTVN5spark9WiFiClassE>:
	...
   d5e50:	4683 000d 4679 000d 466f 000d 4625 000d     .F..yF..oF..%F..
   d5e60:	4663 000d 4657 000d 464b 000d 4643 000d     cF..WF..KF..CF..
   d5e70:	4639 000d 462f 000d 458d 000d               9F../F...E..

000d5e7c <_ZTVN5spark9MeshClassE>:
	...
   d5e84:	46ff 000d 46f5 000d 46eb 000d 46e1 000d     .F...F...F...F..
   d5e94:	46d5 000d 46c9 000d 46bd 000d 46b5 000d     .F...F...F...F..
   d5ea4:	46ab 000d 46a1 000d 458d 000d               .F...F...E..

000d5eb0 <_ZTV8SPIClass>:
	...
   d5eb8:	47d5 000d 47d7 000d                         .G...G..

000d5ec0 <_ZTV7TwoWire>:
	...
   d5ec8:	4813 000d 485d 000d 4835 000d 4815 000d     .H..]H..5H...H..
   d5ed8:	483d 000d 4845 000d 484d 000d 4855 000d     =H..EH..MH..UH..

000d5ee8 <_ZTV11USARTSerial>:
	...
   d5ef0:	4895 000d 48b9 000d 48c5 000d 4c67 000d     .H...H...H..gL..
   d5f00:	48a1 000d 48ad 000d 48a7 000d 48b3 000d     .H...H...H...H..
   d5f10:	4897 000d 489b 000d                         .H...H..

000d5f18 <_ZTV9USBSerial>:
	...
   d5f20:	496d 000d 49b1 000d 498b 000d 4c67 000d     mI...I...I..gL..
   d5f30:	4985 000d 496f 000d 4977 000d 49ab 000d     .I..oI..wI...I..
   d5f40:	497f 000d 4969 000d                         .I..iI..

000d5f48 <_ZTV9IPAddress>:
	...
   d5f50:	4a57 000d 4a49 000d 4a4b 000d 005a 2b25     WJ..IJ..KJ..Z.%+
   d5f60:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5f70:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5f80:	6974 656d 6c00 006e 6e66 6300 646f 0065     time.ln.fn.code.
   d5f90:	6564 6174 6c69 0d00 000a 3025 3031 2075     detail....%010u 
   d5fa0:	5d00 0020 6425 2c00 0020 2928 203a 2000     .] .%d., .(): . 
   d5fb0:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   d5fc0:	6961 736c 3d20 0020 6162 6475 5300 7265     ails = .baud.Ser
   d5fd0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d5fe0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d5ff0:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6000:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6010:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6020:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6030:	6f4c 4867 6e61 6c64 7265 6100 7070 6e00     LogHandler.app.n
   d6040:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d6050:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d6060:	6c61 006c 616e 006e 766f 0066 002e 6e69     all.nan.ovf...in
   d6070:	0066 0000                                   f...

000d6074 <_ZTVN5spark13EthernetClassE>:
	...
   d607c:	4f73 000d 4f69 000d 4f5f 000d 4f55 000d     sO..iO.._O..UO..
   d608c:	4f49 000d 4f3d 000d 4f31 000d 4f29 000d     IO..=O..1O..)O..
   d609c:	4f1f 000d 4f15 000d 458d 000d               .O...O...E..

000d60a8 <__sf_fake_stdin>:
	...

000d60c8 <__sf_fake_stdout>:
	...

000d60e8 <__sf_fake_stderr>:
	...
   d6108:	0043                                        C.

000d610a <link_const_variable_data_end>:
	...

000d610c <link_constructors_location>:
   d610c:	000d4125 	.word	0x000d4125
   d6110:	000d41a9 	.word	0x000d41a9
   d6114:	000d4611 	.word	0x000d4611
   d6118:	000d468d 	.word	0x000d468d
   d611c:	000d4789 	.word	0x000d4789
   d6120:	000d4c21 	.word	0x000d4c21
   d6124:	000d4c3d 	.word	0x000d4c3d
   d6128:	000d4c51 	.word	0x000d4c51
   d612c:	000d4efd 	.word	0x000d4efd
   d6130:	000d4f7d 	.word	0x000d4f7d
   d6134:	000d4fd1 	.word	0x000d4fd1
   d6138:	000d50b9 	.word	0x000d50b9
   d613c:	000d513d 	.word	0x000d513d
   d6140:	000d5201 	.word	0x000d5201
   d6144:	000d52c5 	.word	0x000d52c5

000d6148 <link_constructors_end>:
	...
