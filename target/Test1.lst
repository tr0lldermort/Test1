
/home/danbot/Documents/ParticleCode/Test1/target/Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d6ed0  000d6ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00016f6c  2**0
                  CONTENTS
  4 .data         00000068  2003e360  000d6ed8  0000e360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000428  2003e3c8  2003e3c8  0001e3c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6f40  000d6f40  00016f40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6f68  000d6f68  00016f68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b9651  00000000  00000000  00016f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010ead  00000000  00000000  000d05bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001fa0  00000000  00000000  000e146a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000339b9  00000000  00000000  000e340a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000277bb  00000000  00000000  00116dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000d6661  00000000  00000000  0013e57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001613b  00000000  00000000  00214bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000034e8  00000000  00000000  0022ad1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bbcc  00000000  00000000  0022e204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	08 6b 0d 00                                         .k..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd0b 	bl	d6a48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd10 	bl	d6a5e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e360 	.word	0x2003e360
   d4048:	000d6ed8 	.word	0x000d6ed8
   d404c:	2003e3c8 	.word	0x2003e3c8
   d4050:	2003e3c8 	.word	0x2003e3c8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f967 	bl	d532c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6ec4 	.word	0x000d6ec4
   d4080:	000d6e88 	.word	0x000d6e88

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b872 	b.w	d416c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f897 	bl	d41bc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b919 	b.w	d52c8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bafb 	b.w	d4690 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bb01 	b.w	d46a0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 baff 	b.w	d46a0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN14pressureSensorC1Ev>:
 */

#include <appSystem.h>


pressureSensor::pressureSensor()
   d40b2:	b510      	push	{r4, lr}
{
    pinMode(PIN_PRESSURESENSOR, INPUT); // dont need to do this but it does make it clear that we are going to use this pin as AN in
   d40b4:	2100      	movs	r1, #0
 */

#include <appSystem.h>


pressureSensor::pressureSensor()
   d40b6:	4604      	mov	r4, r0
{
    pinMode(PIN_PRESSURESENSOR, INPUT); // dont need to do this but it does make it clear that we are going to use this pin as AN in
   d40b8:	200e      	movs	r0, #14
   d40ba:	f001 fc8f 	bl	d59dc <pinMode>
}
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}
   d40c2:	0000      	movs	r0, r0
   d40c4:	0000      	movs	r0, r0
	...

000d40c8 <_ZN14pressureSensor10getVoltageEv>:
    _pressure = (pressureSensor::getVoltage()*10)/3.3;  // pretend 10 bar from 3.3V
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}

float pressureSensor::getVoltage()
{
   d40c8:	b538      	push	{r3, r4, r5, lr}
   d40ca:	4604      	mov	r4, r0
   d40cc:	2514      	movs	r5, #20
    for (int count = 0; count < ADC_AVERAGE ; count++)
        _voltage += analogRead(PIN_PRESSURESENSOR); //TODO: software check to ensure we dont go over the type max here.
   d40ce:	200e      	movs	r0, #14
   d40d0:	f001 fc95 	bl	d59fe <analogRead>
   d40d4:	ee07 0a90 	vmov	s15, r0
   d40d8:	ed94 7a00 	vldr	s14, [r4]
   d40dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}

float pressureSensor::getVoltage()
{
    for (int count = 0; count < ADC_AVERAGE ; count++)
   d40e0:	3d01      	subs	r5, #1
        _voltage += analogRead(PIN_PRESSURESENSOR); //TODO: software check to ensure we dont go over the type max here.
   d40e2:	ee77 7a87 	vadd.f32	s15, s15, s14
   d40e6:	edc4 7a00 	vstr	s15, [r4]
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}

float pressureSensor::getVoltage()
{
    for (int count = 0; count < ADC_AVERAGE ; count++)
   d40ea:	d1f0      	bne.n	d40ce <_ZN14pressureSensor10getVoltageEv+0x6>
        _voltage += analogRead(PIN_PRESSURESENSOR); //TODO: software check to ensure we dont go over the type max here.

    _voltage /= ADC_AVERAGE;
    _voltage /= ADC_MAX;
    _voltage *= ADC_REF;    // TODO: make the maths neat here.
   d40ec:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
   d40f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d40f4:	eddf 7a0c 	vldr	s15, [pc, #48]	; d4128 <_ZN14pressureSensor10getVoltageEv+0x60>
   d40f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d40fc:	ee16 0a90 	vmov	r0, s13
   d4100:	f001 ff48 	bl	d5f94 <__aeabi_f2d>
   d4104:	a306      	add	r3, pc, #24	; (adr r3, d4120 <_ZN14pressureSensor10getVoltageEv+0x58>)
   d4106:	e9d3 2300 	ldrd	r2, r3, [r3]
   d410a:	f001 ff97 	bl	d603c <__aeabi_dmul>
   d410e:	f002 fa8d 	bl	d662c <__aeabi_d2f>
   d4112:	6020      	str	r0, [r4, #0]

    return _voltage;
}
   d4114:	ee00 0a10 	vmov	s0, r0
   d4118:	bd38      	pop	{r3, r4, r5, pc}
   d411a:	bf00      	nop
   d411c:	f3af 8000 	nop.w
   d4120:	66666666 	.word	0x66666666
   d4124:	400a6666 	.word	0x400a6666
   d4128:	457ff000 	.word	0x457ff000
   d412c:	00000000 	.word	0x00000000

000d4130 <_ZN14pressureSensor11getPressureEv>:
{
    pinMode(PIN_PRESSURESENSOR, INPUT); // dont need to do this but it does make it clear that we are going to use this pin as AN in
}

float pressureSensor::getPressure() // this is currently only a test function. will be srs when hardware is ready
{
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
    _pressure = (pressureSensor::getVoltage()*10)/3.3;  // pretend 10 bar from 3.3V
   d4134:	f7ff ffc8 	bl	d40c8 <_ZN14pressureSensor10getVoltageEv>
   d4138:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d413c:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4140:	ee17 0a90 	vmov	r0, s15
   d4144:	f001 ff26 	bl	d5f94 <__aeabi_f2d>
   d4148:	a305      	add	r3, pc, #20	; (adr r3, d4160 <_ZN14pressureSensor11getPressureEv+0x30>)
   d414a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d414e:	f002 f89f 	bl	d6290 <__aeabi_ddiv>
   d4152:	f002 fa6b 	bl	d662c <__aeabi_d2f>
   d4156:	6060      	str	r0, [r4, #4]
    return _pressure;   //code to test whether I can call class funcs within eachother. edit - you can.
}
   d4158:	ee00 0a10 	vmov	s0, r0
   d415c:	bd10      	pop	{r4, pc}
   d415e:	bf00      	nop
   d4160:	66666666 	.word	0x66666666
   d4164:	400a6666 	.word	0x400a6666

000d4168 <_GLOBAL__sub_I__ZN14pressureSensorC2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4168:	f000 b9c6 	b.w	d44f8 <HAL_Pin_Map>

000d416c <setup>:
#include <appSystem.h> // How do we get these into their own subfolders nicely?

void setup();
void loop();

void setup() {
   d416c:	b508      	push	{r3, lr}

  // are we in high power config setup mode? check here

  Serial.begin(115200);
   d416e:	f000 fd53 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4172:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
}
   d4176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup() {

  // are we in high power config setup mode? check here

  Serial.begin(115200);
   d417a:	f000 bd41 	b.w	d4c00 <_ZN9USBSerial5beginEl>

000d417e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d417e:	b570      	push	{r4, r5, r6, lr}
   d4180:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4182:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d4184:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4186:	f000 fa5f 	bl	d4648 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d418a:	b908      	cbnz	r0, d4190 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
   d418c:	2000      	movs	r0, #0
   d418e:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
   d4190:	2c00      	cmp	r4, #0
   d4192:	dd03      	ble.n	d419c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4194:	f000 f998 	bl	d44c8 <HAL_Timer_Get_Milli_Seconds>
   d4198:	4605      	mov	r5, r0
   d419a:	e000      	b.n	d419e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
   d419c:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d419e:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d41a0:	b93b      	cbnz	r3, d41b2 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
   d41a2:	2c00      	cmp	r4, #0
   d41a4:	dd07      	ble.n	d41b6 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d41a6:	f000 f98f 	bl	d44c8 <HAL_Timer_Get_Milli_Seconds>
   d41aa:	1b40      	subs	r0, r0, r5
   d41ac:	42a0      	cmp	r0, r4
   d41ae:	d302      	bcc.n	d41b6 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d41b0:	e7ec      	b.n	d418c <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
   d41b2:	2001      	movs	r0, #1
   d41b4:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d41b6:	f000 f9cf 	bl	d4558 <spark_process>
   d41ba:	e7f0      	b.n	d419e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>

000d41bc <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41bc:	b530      	push	{r4, r5, lr}
   d41be:	ed2d 8b02 	vpush	{d8}
   d41c2:	b08b      	sub	sp, #44	; 0x2c
  pressureSensor pressureSensor_c;  //_c for class recognition
   d41c4:	a802      	add	r0, sp, #8
   d41c6:	f7ff ff74 	bl	d40b2 <_ZN14pressureSensorC1Ev>

  float mVolts = pressureSensor_c.getVoltage()*1000;
   d41ca:	a802      	add	r0, sp, #8
   d41cc:	f7ff ff7c 	bl	d40c8 <_ZN14pressureSensor10getVoltageEv>
   d41d0:	eeb0 8a40 	vmov.f32	s16, s0
  Serial.print("ADC Voltage = ");
   d41d4:	f000 fd20 	bl	d4c18 <_Z16_fetch_usbserialv>
   d41d8:	4939      	ldr	r1, [pc, #228]	; (d42c0 <loop+0x104>)
   d41da:	f001 f910 	bl	d53fe <_ZN5Print5printEPKc>
  Serial.print(mVolts, 3); // second arg for force precision
   d41de:	f000 fd1b 	bl	d4c18 <_Z16_fetch_usbserialv>
   d41e2:	eddf 7a38 	vldr	s15, [pc, #224]	; d42c4 <loop+0x108>
   d41e6:	ee68 7a27 	vmul.f32	s15, s16, s15
   d41ea:	4604      	mov	r4, r0
   d41ec:	ee17 0a90 	vmov	r0, s15
   d41f0:	f001 fed0 	bl	d5f94 <__aeabi_f2d>
   d41f4:	ec41 0b10 	vmov	d0, r0, r1
   d41f8:	2103      	movs	r1, #3
   d41fa:	4620      	mov	r0, r4
   d41fc:	f001 fa2a 	bl	d5654 <_ZN5Print5printEdi>
  Serial.println("mV");
   d4200:	f000 fd0a 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4204:	4930      	ldr	r1, [pc, #192]	; (d42c8 <loop+0x10c>)
   d4206:	f001 f90d 	bl	d5424 <_ZN5Print7printlnEPKc>

  String pressure_str = String(pressureSensor_c.getPressure(), 3);
   d420a:	a802      	add	r0, sp, #8
   d420c:	f7ff ff90 	bl	d4130 <_ZN14pressureSensor11getPressureEv>
   d4210:	2103      	movs	r1, #3
   d4212:	a806      	add	r0, sp, #24
   d4214:	f001 fade 	bl	d57d4 <_ZN6StringC1Efi>
  Serial.println(pressure_str);
   d4218:	f000 fcfe 	bl	d4c18 <_Z16_fetch_usbserialv>
   d421c:	9906      	ldr	r1, [sp, #24]
   d421e:	f001 f901 	bl	d5424 <_ZN5Print7printlnEPKc>
   d4222:	4b2a      	ldr	r3, [pc, #168]	; (d42cc <loop+0x110>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4224:	492a      	ldr	r1, [pc, #168]	; (d42d0 <loop+0x114>)
   d4226:	781a      	ldrb	r2, [r3, #0]
   d4228:	4b2a      	ldr	r3, [pc, #168]	; (d42d4 <loop+0x118>)
   d422a:	781b      	ldrb	r3, [r3, #0]
   d422c:	4313      	orrs	r3, r2
   d422e:	f88d 3000 	strb.w	r3, [sp]
   d4232:	9a06      	ldr	r2, [sp, #24]
   d4234:	233c      	movs	r3, #60	; 0x3c
   d4236:	a804      	add	r0, sp, #16
   d4238:	f000 fec4 	bl	d4fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d423c:	9c04      	ldr	r4, [sp, #16]
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
   d423e:	2100      	movs	r1, #0
   d4240:	4620      	mov	r0, r4
   d4242:	f7ff ff9c 	bl	d417e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
   d4246:	7863      	ldrb	r3, [r4, #1]
   d4248:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
   d424c:	b133      	cbz	r3, d425c <loop+0xa0>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
   d424e:	2100      	movs	r1, #0
   d4250:	4620      	mov	r0, r4
   d4252:	f7ff ff94 	bl	d417e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4256:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
   d4258:	2b01      	cmp	r3, #1
   d425a:	d02f      	beq.n	d42bc <loop+0x100>
            return result_;
        }
        return std::move(defaultValue);
   d425c:	2500      	movs	r5, #0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d425e:	9c05      	ldr	r4, [sp, #20]
   d4260:	b17c      	cbz	r4, d4282 <loop+0xc6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4262:	6863      	ldr	r3, [r4, #4]
   d4264:	3b01      	subs	r3, #1
   d4266:	6063      	str	r3, [r4, #4]
   d4268:	b95b      	cbnz	r3, d4282 <loop+0xc6>
        {
          _M_dispose();
   d426a:	6823      	ldr	r3, [r4, #0]
   d426c:	4620      	mov	r0, r4
   d426e:	689b      	ldr	r3, [r3, #8]
   d4270:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4272:	68a3      	ldr	r3, [r4, #8]
   d4274:	3b01      	subs	r3, #1
   d4276:	60a3      	str	r3, [r4, #8]
   d4278:	b91b      	cbnz	r3, d4282 <loop+0xc6>
            _M_destroy();
   d427a:	6823      	ldr	r3, [r4, #0]
   d427c:	4620      	mov	r0, r4
   d427e:	68db      	ldr	r3, [r3, #12]
   d4280:	4798      	blx	r3
  */


  bool success;
  success = Particle.publish("Simulated Pressure", pressure_str, PUBLIC | WITH_ACK);
  if (!success){
   d4282:	b92d      	cbnz	r5, d4290 <loop+0xd4>
    // get here if event publish did not work
    Serial.println("oh noes!");
   d4284:	f000 fcc8 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4288:	4913      	ldr	r1, [pc, #76]	; (d42d8 <loop+0x11c>)
   d428a:	f001 f8cb 	bl	d5424 <_ZN5Print7printlnEPKc>
   d428e:	e00a      	b.n	d42a6 <loop+0xea>
  }
  else {
    Serial.print("That should be an event right there... ");
   d4290:	f000 fcc2 	bl	d4c18 <_Z16_fetch_usbserialv>
   d4294:	4911      	ldr	r1, [pc, #68]	; (d42dc <loop+0x120>)
   d4296:	f001 f8b2 	bl	d53fe <_ZN5Print5printEPKc>
    Serial.println(success);
   d429a:	f000 fcbd 	bl	d4c18 <_Z16_fetch_usbserialv>
   d429e:	220a      	movs	r2, #10
   d42a0:	2101      	movs	r1, #1
   d42a2:	f001 f91a 	bl	d54da <_ZN5Print7printlnEii>
  }
  delay(10000);  // slow this shit down yo
   d42a6:	f242 7010 	movw	r0, #10000	; 0x2710
   d42aa:	f001 f87f 	bl	d53ac <delay>
  float mVolts = pressureSensor_c.getVoltage()*1000;
  Serial.print("ADC Voltage = ");
  Serial.print(mVolts, 3); // second arg for force precision
  Serial.println("mV");

  String pressure_str = String(pressureSensor_c.getPressure(), 3);
   d42ae:	a806      	add	r0, sp, #24
   d42b0:	f001 fa38 	bl	d5724 <_ZN6StringD1Ev>
  else {
    Serial.print("That should be an event right there... ");
    Serial.println(success);
  }
  delay(10000);  // slow this shit down yo
   d42b4:	b00b      	add	sp, #44	; 0x2c
   d42b6:	ecbd 8b02 	vpop	{d8}
   d42ba:	bd30      	pop	{r4, r5, pc}
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
   d42bc:	7b25      	ldrb	r5, [r4, #12]
   d42be:	e7ce      	b.n	d425e <loop+0xa2>
   d42c0:	000d6b1c 	.word	0x000d6b1c
   d42c4:	447a0000 	.word	0x447a0000
   d42c8:	000d6b2b 	.word	0x000d6b2b
   d42cc:	2003e3cc 	.word	0x2003e3cc
   d42d0:	000d6b2e 	.word	0x000d6b2e
   d42d4:	2003e3cd 	.word	0x2003e3cd
   d42d8:	000d6b41 	.word	0x000d6b41
   d42dc:	000d6b4a 	.word	0x000d6b4a

000d42e0 <_GLOBAL__sub_I_setup>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42e0:	4b03      	ldr	r3, [pc, #12]	; (d42f0 <_GLOBAL__sub_I_setup+0x10>)
   d42e2:	2200      	movs	r2, #0
   d42e4:	701a      	strb	r2, [r3, #0]
   d42e6:	4b03      	ldr	r3, [pc, #12]	; (d42f4 <_GLOBAL__sub_I_setup+0x14>)
   d42e8:	2208      	movs	r2, #8
   d42ea:	701a      	strb	r2, [r3, #0]
   d42ec:	f000 b904 	b.w	d44f8 <HAL_Pin_Map>
   d42f0:	2003e3cc 	.word	0x2003e3cc
   d42f4:	2003e3cd 	.word	0x2003e3cd

000d42f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <HAL_USB_USART_Init+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	681b      	ldr	r3, [r3, #0]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	0003024c 	.word	0x0003024c

000d4308 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <HAL_USB_USART_Begin+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	685b      	ldr	r3, [r3, #4]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	0003024c 	.word	0x0003024c

000d4318 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <HAL_USB_USART_Available_Data+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	691b      	ldr	r3, [r3, #16]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	0003024c 	.word	0x0003024c

000d4328 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	695b      	ldr	r3, [r3, #20]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	0003024c 	.word	0x0003024c

000d4338 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <HAL_USB_USART_Receive_Data+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	699b      	ldr	r3, [r3, #24]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	0003024c 	.word	0x0003024c

000d4348 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_USB_USART_Send_Data+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	69db      	ldr	r3, [r3, #28]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	0003024c 	.word	0x0003024c

000d4358 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_USB_USART_Flush_Data+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	6a1b      	ldr	r3, [r3, #32]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003024c 	.word	0x0003024c

000d4368 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_I2C_Write_Data+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	6a1b      	ldr	r3, [r3, #32]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030228 	.word	0x00030228

000d4378 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_I2C_Available_Data+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030228 	.word	0x00030228

000d4388 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_I2C_Read_Data+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030228 	.word	0x00030228

000d4398 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_I2C_Peek_Data+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030228 	.word	0x00030228

000d43a8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_I2C_Flush_Data+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030228 	.word	0x00030228

000d43b8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_I2C_Is_Enabled+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030228 	.word	0x00030228

000d43c8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_I2C_Init+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030228 	.word	0x00030228

000d43d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_USART_Init+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	681b      	ldr	r3, [r3, #0]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003023c 	.word	0x0003023c

000d43e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_USART_Write_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	68db      	ldr	r3, [r3, #12]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003023c 	.word	0x0003023c

000d43f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_USART_Available_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	691b      	ldr	r3, [r3, #16]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003023c 	.word	0x0003023c

000d4408 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USART_Read_Data+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	695b      	ldr	r3, [r3, #20]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003023c 	.word	0x0003023c

000d4418 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USART_Peek_Data+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	699b      	ldr	r3, [r3, #24]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003023c 	.word	0x0003023c

000d4428 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USART_Flush_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	69db      	ldr	r3, [r3, #28]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003023c 	.word	0x0003023c

000d4438 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USART_Is_Enabled+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6a1b      	ldr	r3, [r3, #32]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003023c 	.word	0x0003023c

000d4448 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USART_Available_Data_For_Write+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003023c 	.word	0x0003023c

000d4458 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <inet_inet_ntop+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	695b      	ldr	r3, [r3, #20]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030264 	.word	0x00030264

000d4468 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <os_thread_is_current+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	689b      	ldr	r3, [r3, #8]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030248 	.word	0x00030248

000d4478 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <os_thread_join+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	691b      	ldr	r3, [r3, #16]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030248 	.word	0x00030248

000d4488 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <os_thread_cleanup+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030248 	.word	0x00030248

000d4498 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <os_mutex_create+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030248 	.word	0x00030248

000d44a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <os_mutex_recursive_create+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030248 	.word	0x00030248

000d44b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_RNG_GetRandomNumber+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	685b      	ldr	r3, [r3, #4]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030218 	.word	0x00030218

000d44c8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	695b      	ldr	r3, [r3, #20]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030218 	.word	0x00030218

000d44d8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_SPI_Init+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	69db      	ldr	r3, [r3, #28]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030230 	.word	0x00030230

000d44e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_SPI_Is_Enabled+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6a1b      	ldr	r3, [r3, #32]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030230 	.word	0x00030230

000d44f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_Pin_Map+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	681b      	ldr	r3, [r3, #0]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003022c 	.word	0x0003022c

000d4508 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_Validate_Pin_Function+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	685b      	ldr	r3, [r3, #4]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003022c 	.word	0x0003022c

000d4518 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_Pin_Mode+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	689b      	ldr	r3, [r3, #8]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003022c 	.word	0x0003022c

000d4528 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_ADC_Read+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003022c 	.word	0x0003022c

000d4538 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <netdb_freeaddrinfo+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	689b      	ldr	r3, [r3, #8]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030268 	.word	0x00030268

000d4548 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <netdb_getaddrinfo+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	68db      	ldr	r3, [r3, #12]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030268 	.word	0x00030268

000d4558 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <spark_process+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	689b      	ldr	r3, [r3, #8]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030244 	.word	0x00030244

000d4568 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <spark_send_event+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a1b      	ldr	r3, [r3, #32]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030244 	.word	0x00030244

000d4578 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <spark_set_random_seed_from_cloud_handler+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030244 	.word	0x00030244

000d4588 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <network_connect+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	685b      	ldr	r3, [r3, #4]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030240 	.word	0x00030240

000d4598 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <network_connecting+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	689b      	ldr	r3, [r3, #8]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030240 	.word	0x00030240

000d45a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <network_disconnect+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	68db      	ldr	r3, [r3, #12]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030240 	.word	0x00030240

000d45b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <network_ready+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	691b      	ldr	r3, [r3, #16]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030240 	.word	0x00030240

000d45c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <network_on+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	695b      	ldr	r3, [r3, #20]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030240 	.word	0x00030240

000d45d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <network_off+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	699b      	ldr	r3, [r3, #24]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030240 	.word	0x00030240

000d45e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <network_listen+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	69db      	ldr	r3, [r3, #28]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030240 	.word	0x00030240

000d45f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <network_listening+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6a1b      	ldr	r3, [r3, #32]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030240 	.word	0x00030240

000d4608 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_set_listen_timeout+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <network_get_listen_timeout+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030240 	.word	0x00030240

000d4628 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <set_system_mode+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	685b      	ldr	r3, [r3, #4]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030220 	.word	0x00030220

000d4638 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <system_delay_ms+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030220 	.word	0x00030220

000d4648 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <application_thread_current+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030220 	.word	0x00030220

000d4658 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <application_thread_invoke+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030220 	.word	0x00030220

000d4668 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b03      	ldr	r3, [pc, #12]	; (d4678 <system_ctrl_set_app_request_handler+0x10>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4672:	9301      	str	r3, [sp, #4]
   d4674:	bd08      	pop	{r3, pc}
   d4676:	0000      	.short	0x0000
   d4678:	00030220 	.word	0x00030220

000d467c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b03      	ldr	r3, [pc, #12]	; (d468c <system_ctrl_set_result+0x10>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4686:	9301      	str	r3, [sp, #4]
   d4688:	bd08      	pop	{r3, pc}
   d468a:	0000      	.short	0x0000
   d468c:	00030220 	.word	0x00030220

000d4690 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <malloc+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	681b      	ldr	r3, [r3, #0]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003021c 	.word	0x0003021c

000d46a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <free+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	685b      	ldr	r3, [r3, #4]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003021c 	.word	0x0003021c

000d46b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <realloc+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	689b      	ldr	r3, [r3, #8]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003021c 	.word	0x0003021c

000d46c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <abort+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003021c 	.word	0x0003021c

000d46d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <_malloc_r+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003021c 	.word	0x0003021c

000d46e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46e0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d46e2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46e4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d46e6:	689b      	ldr	r3, [r3, #8]
   d46e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46ea:	68a3      	ldr	r3, [r4, #8]
   d46ec:	3b01      	subs	r3, #1
   d46ee:	60a3      	str	r3, [r4, #8]
   d46f0:	b92b      	cbnz	r3, d46fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
   d46f2:	6823      	ldr	r3, [r4, #0]
   d46f4:	4620      	mov	r0, r4
   d46f6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d46f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d46fc:	4718      	bx	r3
   d46fe:	bd10      	pop	{r4, pc}

000d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4700:	b510      	push	{r4, lr}
   d4702:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4704:	6800      	ldr	r0, [r0, #0]
   d4706:	b128      	cbz	r0, d4714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4708:	6843      	ldr	r3, [r0, #4]
   d470a:	3b01      	subs	r3, #1
   d470c:	6043      	str	r3, [r0, #4]
   d470e:	b90b      	cbnz	r3, d4714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4710:	f7ff ffe6 	bl	d46e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4714:	4620      	mov	r0, r4
   d4716:	bd10      	pop	{r4, pc}

000d4718 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4718:	2300      	movs	r3, #0
   d471a:	461a      	mov	r2, r3
   d471c:	6840      	ldr	r0, [r0, #4]
   d471e:	f7ff bf33 	b.w	d4588 <network_connect>

000d4722 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4722:	2200      	movs	r2, #0
   d4724:	2102      	movs	r1, #2
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	f7ff bf3e 	b.w	d45a8 <network_disconnect>

000d472c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d472c:	2200      	movs	r2, #0
   d472e:	4611      	mov	r1, r2
   d4730:	6840      	ldr	r0, [r0, #4]
   d4732:	f7ff bf31 	b.w	d4598 <network_connecting>

000d4736 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4736:	2200      	movs	r2, #0
   d4738:	4611      	mov	r1, r2
   d473a:	6840      	ldr	r0, [r0, #4]
   d473c:	f7ff bf3c 	b.w	d45b8 <network_ready>

000d4740 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4740:	2300      	movs	r3, #0
   d4742:	461a      	mov	r2, r3
   d4744:	4619      	mov	r1, r3
   d4746:	6840      	ldr	r0, [r0, #4]
   d4748:	f7ff bf3e 	b.w	d45c8 <network_on>

000d474c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d474c:	2300      	movs	r3, #0
   d474e:	461a      	mov	r2, r3
   d4750:	4619      	mov	r1, r3
   d4752:	6840      	ldr	r0, [r0, #4]
   d4754:	f7ff bf40 	b.w	d45d8 <network_off>

000d4758 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4758:	2200      	movs	r2, #0
   d475a:	f081 0101 	eor.w	r1, r1, #1
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	f7ff bf42 	b.w	d45e8 <network_listen>

000d4764 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4764:	2200      	movs	r2, #0
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	f7ff bf4e 	b.w	d4608 <network_set_listen_timeout>

000d476c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d476c:	2200      	movs	r2, #0
   d476e:	4611      	mov	r1, r2
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	f7ff bf51 	b.w	d4618 <network_get_listen_timeout>

000d4776 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4776:	2200      	movs	r2, #0
   d4778:	4611      	mov	r1, r2
   d477a:	6840      	ldr	r0, [r0, #4]
   d477c:	f7ff bf3c 	b.w	d45f8 <network_listening>

000d4780 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4780:	b570      	push	{r4, r5, r6, lr}
   d4782:	b08c      	sub	sp, #48	; 0x30
   d4784:	4614      	mov	r4, r2
   d4786:	4606      	mov	r6, r0
    IPAddress addr;
   d4788:	f000 faa6 	bl	d4cd8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d478c:	ab0c      	add	r3, sp, #48	; 0x30
   d478e:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4790:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4792:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff fed6 	bl	d4548 <netdb_getaddrinfo>
    if (!r && ai) {
   d479c:	4601      	mov	r1, r0
   d479e:	bb58      	cbnz	r0, d47f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d47a0:	9b00      	ldr	r3, [sp, #0]
   d47a2:	b34b      	cbz	r3, d47f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d47a4:	685a      	ldr	r2, [r3, #4]
   d47a6:	2a02      	cmp	r2, #2
   d47a8:	d00e      	beq.n	d47c8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d47aa:	2a0a      	cmp	r2, #10
   d47ac:	d124      	bne.n	d47f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d47ae:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d47b0:	2211      	movs	r2, #17
   d47b2:	a801      	add	r0, sp, #4
   d47b4:	f002 f953 	bl	d6a5e <memset>
                a.v = 6;
   d47b8:	2306      	movs	r3, #6
   d47ba:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d47be:	ad01      	add	r5, sp, #4
   d47c0:	f104 0308 	add.w	r3, r4, #8
   d47c4:	3418      	adds	r4, #24
   d47c6:	e005      	b.n	d47d4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d47c8:	6959      	ldr	r1, [r3, #20]
   d47ca:	4630      	mov	r0, r6
   d47cc:	3104      	adds	r1, #4
   d47ce:	f000 fab0 	bl	d4d32 <_ZN9IPAddressaSEPKh>
                break;
   d47d2:	e011      	b.n	d47f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d47d4:	6818      	ldr	r0, [r3, #0]
   d47d6:	6859      	ldr	r1, [r3, #4]
   d47d8:	462a      	mov	r2, r5
   d47da:	c203      	stmia	r2!, {r0, r1}
   d47dc:	3308      	adds	r3, #8
   d47de:	42a3      	cmp	r3, r4
   d47e0:	4615      	mov	r5, r2
   d47e2:	d1f7      	bne.n	d47d4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d47e4:	a901      	add	r1, sp, #4
   d47e6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47e8:	ad07      	add	r5, sp, #28
   d47ea:	f000 fa83 	bl	d4cf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d47ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d47f0:	1d34      	adds	r4, r6, #4
   d47f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47f4:	682b      	ldr	r3, [r5, #0]
   d47f6:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d47f8:	9800      	ldr	r0, [sp, #0]
   d47fa:	f7ff fe9d 	bl	d4538 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d47fe:	4630      	mov	r0, r6
   d4800:	b00c      	add	sp, #48	; 0x30
   d4802:	bd70      	pop	{r4, r5, r6, pc}

000d4804 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4804:	4b02      	ldr	r3, [pc, #8]	; (d4810 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4806:	4a03      	ldr	r2, [pc, #12]	; (d4814 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4808:	601a      	str	r2, [r3, #0]
   d480a:	2200      	movs	r2, #0
   d480c:	605a      	str	r2, [r3, #4]
   d480e:	4770      	bx	lr
   d4810:	2003e3d0 	.word	0x2003e3d0
   d4814:	000d6b7c 	.word	0x000d6b7c

000d4818 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4818:	2200      	movs	r2, #0
   d481a:	4611      	mov	r1, r2
   d481c:	6840      	ldr	r0, [r0, #4]
   d481e:	f7ff becb 	b.w	d45b8 <network_ready>

000d4822 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4822:	2200      	movs	r2, #0
   d4824:	4611      	mov	r1, r2
   d4826:	6840      	ldr	r0, [r0, #4]
   d4828:	f7ff bee6 	b.w	d45f8 <network_listening>

000d482c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d482c:	2200      	movs	r2, #0
   d482e:	4611      	mov	r1, r2
   d4830:	6840      	ldr	r0, [r0, #4]
   d4832:	f7ff bef1 	b.w	d4618 <network_get_listen_timeout>

000d4836 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4836:	2200      	movs	r2, #0
   d4838:	6840      	ldr	r0, [r0, #4]
   d483a:	f7ff bee5 	b.w	d4608 <network_set_listen_timeout>

000d483e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d483e:	2200      	movs	r2, #0
   d4840:	f081 0101 	eor.w	r1, r1, #1
   d4844:	6840      	ldr	r0, [r0, #4]
   d4846:	f7ff becf 	b.w	d45e8 <network_listen>

000d484a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d484a:	2300      	movs	r3, #0
   d484c:	461a      	mov	r2, r3
   d484e:	4619      	mov	r1, r3
   d4850:	6840      	ldr	r0, [r0, #4]
   d4852:	f7ff bec1 	b.w	d45d8 <network_off>

000d4856 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4856:	2300      	movs	r3, #0
   d4858:	461a      	mov	r2, r3
   d485a:	4619      	mov	r1, r3
   d485c:	6840      	ldr	r0, [r0, #4]
   d485e:	f7ff beb3 	b.w	d45c8 <network_on>

000d4862 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4862:	2200      	movs	r2, #0
   d4864:	4611      	mov	r1, r2
   d4866:	6840      	ldr	r0, [r0, #4]
   d4868:	f7ff be96 	b.w	d4598 <network_connecting>

000d486c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d486c:	2200      	movs	r2, #0
   d486e:	2102      	movs	r1, #2
   d4870:	6840      	ldr	r0, [r0, #4]
   d4872:	f7ff be99 	b.w	d45a8 <network_disconnect>

000d4876 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4876:	2300      	movs	r3, #0
   d4878:	461a      	mov	r2, r3
   d487a:	6840      	ldr	r0, [r0, #4]
   d487c:	f7ff be84 	b.w	d4588 <network_connect>

000d4880 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4880:	4b02      	ldr	r3, [pc, #8]	; (d488c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4882:	2204      	movs	r2, #4
   d4884:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4886:	4a02      	ldr	r2, [pc, #8]	; (d4890 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4888:	601a      	str	r2, [r3, #0]
   d488a:	4770      	bx	lr
   d488c:	2003e3d8 	.word	0x2003e3d8
   d4890:	000d6bb0 	.word	0x000d6bb0

000d4894 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4894:	2200      	movs	r2, #0
   d4896:	4611      	mov	r1, r2
   d4898:	6840      	ldr	r0, [r0, #4]
   d489a:	f7ff bead 	b.w	d45f8 <network_listening>

000d489e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d489e:	2200      	movs	r2, #0
   d48a0:	4611      	mov	r1, r2
   d48a2:	6840      	ldr	r0, [r0, #4]
   d48a4:	f7ff beb8 	b.w	d4618 <network_get_listen_timeout>

000d48a8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48a8:	2200      	movs	r2, #0
   d48aa:	6840      	ldr	r0, [r0, #4]
   d48ac:	f7ff beac 	b.w	d4608 <network_set_listen_timeout>

000d48b0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48b0:	2200      	movs	r2, #0
   d48b2:	f081 0101 	eor.w	r1, r1, #1
   d48b6:	6840      	ldr	r0, [r0, #4]
   d48b8:	f7ff be96 	b.w	d45e8 <network_listen>

000d48bc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48bc:	2300      	movs	r3, #0
   d48be:	461a      	mov	r2, r3
   d48c0:	4619      	mov	r1, r3
   d48c2:	6840      	ldr	r0, [r0, #4]
   d48c4:	f7ff be88 	b.w	d45d8 <network_off>

000d48c8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48c8:	2300      	movs	r3, #0
   d48ca:	461a      	mov	r2, r3
   d48cc:	4619      	mov	r1, r3
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	f7ff be7a 	b.w	d45c8 <network_on>

000d48d4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48d4:	2200      	movs	r2, #0
   d48d6:	4611      	mov	r1, r2
   d48d8:	6840      	ldr	r0, [r0, #4]
   d48da:	f7ff be6d 	b.w	d45b8 <network_ready>

000d48de <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48de:	2200      	movs	r2, #0
   d48e0:	4611      	mov	r1, r2
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff be58 	b.w	d4598 <network_connecting>

000d48e8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48e8:	2200      	movs	r2, #0
   d48ea:	2102      	movs	r1, #2
   d48ec:	6840      	ldr	r0, [r0, #4]
   d48ee:	f7ff be5b 	b.w	d45a8 <network_disconnect>

000d48f2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48f2:	2300      	movs	r3, #0
   d48f4:	461a      	mov	r2, r3
   d48f6:	6840      	ldr	r0, [r0, #4]
   d48f8:	f7ff be46 	b.w	d4588 <network_connect>

000d48fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d48fc:	b110      	cbz	r0, d4904 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d48fe:	6803      	ldr	r3, [r0, #0]
   d4900:	685b      	ldr	r3, [r3, #4]
   d4902:	4718      	bx	r3
   d4904:	4770      	bx	lr

000d4906 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4906:	b538      	push	{r3, r4, r5, lr}
   d4908:	4604      	mov	r4, r0
   d490a:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d490c:	b1d0      	cbz	r0, d4944 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d490e:	f7ff fdab 	bl	d4468 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4912:	b9b8      	cbnz	r0, d4944 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4914:	7c23      	ldrb	r3, [r4, #16]
   d4916:	b91b      	cbnz	r3, d4920 <_ZN6Thread7disposeEv+0x1a>
   d4918:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d491a:	b108      	cbz	r0, d4920 <_ZN6Thread7disposeEv+0x1a>
   d491c:	f7ff fdac 	bl	d4478 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4920:	6865      	ldr	r5, [r4, #4]
   d4922:	b155      	cbz	r5, d493a <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4924:	68ab      	ldr	r3, [r5, #8]
   d4926:	b11b      	cbz	r3, d4930 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4928:	2203      	movs	r2, #3
   d492a:	4629      	mov	r1, r5
   d492c:	4628      	mov	r0, r5
   d492e:	4798      	blx	r3
            delete wrapper;
   d4930:	4628      	mov	r0, r5
   d4932:	f7ff fbb2 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d4936:	2300      	movs	r3, #0
   d4938:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d493a:	6820      	ldr	r0, [r4, #0]
   d493c:	f7ff fda4 	bl	d4488 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4940:	2300      	movs	r3, #0
   d4942:	6023      	str	r3, [r4, #0]
   d4944:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4948 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4948:	b538      	push	{r3, r4, r5, lr}
   d494a:	4b0b      	ldr	r3, [pc, #44]	; (d4978 <_ZN5spark9MeshClassD1Ev+0x30>)
   d494c:	6003      	str	r3, [r0, #0]
   d494e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4950:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4954:	b108      	cbz	r0, d495a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4956:	f7ff fba2 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d495a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d495e:	b12d      	cbz	r5, d496c <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4960:	4628      	mov	r0, r5
   d4962:	f7ff ffd0 	bl	d4906 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4966:	4628      	mov	r0, r5
   d4968:	f7ff fb97 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d496c:	68a0      	ldr	r0, [r4, #8]
   d496e:	b108      	cbz	r0, d4974 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4970:	f7ff ffc4 	bl	d48fc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4974:	4620      	mov	r0, r4
   d4976:	bd38      	pop	{r3, r4, r5, pc}
   d4978:	000d6be4 	.word	0x000d6be4

000d497c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d497c:	b538      	push	{r3, r4, r5, lr}
   d497e:	4c0d      	ldr	r4, [pc, #52]	; (d49b4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4980:	4b0d      	ldr	r3, [pc, #52]	; (d49b8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4982:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4984:	2500      	movs	r5, #0
   d4986:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4988:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d498c:	6063      	str	r3, [r4, #4]
   d498e:	60a5      	str	r5, [r4, #8]
   d4990:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4994:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4998:	f7ff fd86 	bl	d44a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d499c:	4b07      	ldr	r3, [pc, #28]	; (d49bc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d499e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d49a2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d49a4:	4620      	mov	r0, r4
   d49a6:	4a06      	ldr	r2, [pc, #24]	; (d49c0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d49a8:	4906      	ldr	r1, [pc, #24]	; (d49c4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d49aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d49ae:	f001 b83d 	b.w	d5a2c <__aeabi_atexit>
   d49b2:	bf00      	nop
   d49b4:	2003e3e0 	.word	0x2003e3e0
   d49b8:	000d6b7c 	.word	0x000d6b7c
   d49bc:	000d6be4 	.word	0x000d6be4
   d49c0:	2003e3c8 	.word	0x2003e3c8
   d49c4:	000d4949 	.word	0x000d4949

000d49c8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d49c8:	4770      	bx	lr

000d49ca <_ZN8SPIClassD0Ev>:
   d49ca:	b510      	push	{r4, lr}
   d49cc:	4604      	mov	r4, r0
   d49ce:	f7ff fb64 	bl	d409a <_ZdlPv>
   d49d2:	4620      	mov	r0, r4
   d49d4:	bd10      	pop	{r4, pc}
	...

000d49d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d49d8:	b570      	push	{r4, r5, r6, lr}
   d49da:	4b08      	ldr	r3, [pc, #32]	; (d49fc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d49dc:	6003      	str	r3, [r0, #0]
   d49de:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d49e0:	2500      	movs	r5, #0
   d49e2:	460e      	mov	r6, r1
   d49e4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d49e8:	f7ff fd56 	bl	d4498 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d49ec:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d49ee:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d49f0:	f7ff fd72 	bl	d44d8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d49f4:	60a5      	str	r5, [r4, #8]
}
   d49f6:	4620      	mov	r0, r4
   d49f8:	bd70      	pop	{r4, r5, r6, pc}
   d49fa:	bf00      	nop
   d49fc:	000d6c18 	.word	0x000d6c18

000d4a00 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4a00:	7900      	ldrb	r0, [r0, #4]
   d4a02:	f7ff bd71 	b.w	d44e8 <HAL_SPI_Is_Enabled>

000d4a06 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4a06:	4770      	bx	lr

000d4a08 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a0a:	4606      	mov	r6, r0
   d4a0c:	4615      	mov	r5, r2
   d4a0e:	460c      	mov	r4, r1
   d4a10:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a12:	42bc      	cmp	r4, r7
   d4a14:	d006      	beq.n	d4a24 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4a16:	6833      	ldr	r3, [r6, #0]
   d4a18:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4a1c:	689b      	ldr	r3, [r3, #8]
   d4a1e:	4630      	mov	r0, r6
   d4a20:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a22:	e7f6      	b.n	d4a12 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4a24:	4628      	mov	r0, r5
   d4a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a28 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4a28:	2200      	movs	r2, #0
   d4a2a:	7c00      	ldrb	r0, [r0, #16]
   d4a2c:	f7ff bc9c 	b.w	d4368 <HAL_I2C_Write_Data>

000d4a30 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4a30:	2100      	movs	r1, #0
   d4a32:	7c00      	ldrb	r0, [r0, #16]
   d4a34:	f7ff bca0 	b.w	d4378 <HAL_I2C_Available_Data>

000d4a38 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4a38:	2100      	movs	r1, #0
   d4a3a:	7c00      	ldrb	r0, [r0, #16]
   d4a3c:	f7ff bca4 	b.w	d4388 <HAL_I2C_Read_Data>

000d4a40 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4a40:	2100      	movs	r1, #0
   d4a42:	7c00      	ldrb	r0, [r0, #16]
   d4a44:	f7ff bca8 	b.w	d4398 <HAL_I2C_Peek_Data>

000d4a48 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4a48:	2100      	movs	r1, #0
   d4a4a:	7c00      	ldrb	r0, [r0, #16]
   d4a4c:	f7ff bcac 	b.w	d43a8 <HAL_I2C_Flush_Data>

000d4a50 <_ZN7TwoWireD0Ev>:
   d4a50:	b510      	push	{r4, lr}
   d4a52:	4604      	mov	r4, r0
   d4a54:	f7ff fb21 	bl	d409a <_ZdlPv>
   d4a58:	4620      	mov	r0, r4
   d4a5a:	bd10      	pop	{r4, pc}

000d4a5c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4a5c:	b510      	push	{r4, lr}
   d4a5e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a64:	4608      	mov	r0, r1
   d4a66:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4a68:	2100      	movs	r1, #0
   d4a6a:	4b04      	ldr	r3, [pc, #16]	; (d4a7c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4a6c:	7420      	strb	r0, [r4, #16]
   d4a6e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4a70:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4a72:	f7ff fca9 	bl	d43c8 <HAL_I2C_Init>

}
   d4a76:	4620      	mov	r0, r4
   d4a78:	bd10      	pop	{r4, pc}
   d4a7a:	bf00      	nop
   d4a7c:	000d6c28 	.word	0x000d6c28

000d4a80 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4a80:	2100      	movs	r1, #0
   d4a82:	7c00      	ldrb	r0, [r0, #16]
   d4a84:	f7ff bc98 	b.w	d43b8 <HAL_I2C_Is_Enabled>

000d4a88 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4a88:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a8a:	6883      	ldr	r3, [r0, #8]
   d4a8c:	4604      	mov	r4, r0
   d4a8e:	b90b      	cbnz	r3, d4a94 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4a90:	f000 ffd1 	bl	d5a36 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a94:	68c3      	ldr	r3, [r0, #12]
   d4a96:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4a98:	68a3      	ldr	r3, [r4, #8]
   d4a9a:	b11b      	cbz	r3, d4aa4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a9c:	2203      	movs	r2, #3
   d4a9e:	4621      	mov	r1, r4
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4aa4:	4620      	mov	r0, r4
}
   d4aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4aaa:	f7ff baf6 	b.w	d409a <_ZdlPv>

000d4aae <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4aae:	4770      	bx	lr

000d4ab0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ab0:	7441      	strb	r1, [r0, #17]
   d4ab2:	4770      	bx	lr

000d4ab4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d4ab4:	7c00      	ldrb	r0, [r0, #16]
   d4ab6:	f7ff bcc7 	b.w	d4448 <HAL_USART_Available_Data_For_Write>

000d4aba <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d4aba:	7c00      	ldrb	r0, [r0, #16]
   d4abc:	f7ff bc9c 	b.w	d43f8 <HAL_USART_Available_Data>

000d4ac0 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d4ac0:	7c00      	ldrb	r0, [r0, #16]
   d4ac2:	f7ff bca9 	b.w	d4418 <HAL_USART_Peek_Data>

000d4ac6 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d4ac6:	7c00      	ldrb	r0, [r0, #16]
   d4ac8:	f7ff bc9e 	b.w	d4408 <HAL_USART_Read_Data>

000d4acc <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4acc:	7c00      	ldrb	r0, [r0, #16]
   d4ace:	f7ff bcab 	b.w	d4428 <HAL_USART_Flush_Data>

000d4ad2 <_ZN11USARTSerialD0Ev>:
   d4ad2:	b510      	push	{r4, lr}
   d4ad4:	4604      	mov	r4, r0
   d4ad6:	f7ff fae0 	bl	d409a <_ZdlPv>
   d4ada:	4620      	mov	r0, r4
   d4adc:	bd10      	pop	{r4, pc}

000d4ade <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4ade:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ae0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4ae2:	4604      	mov	r4, r0
   d4ae4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ae6:	b925      	cbnz	r5, d4af2 <_ZN11USARTSerial5writeEh+0x14>
   d4ae8:	7c00      	ldrb	r0, [r0, #16]
   d4aea:	f7ff fcad 	bl	d4448 <HAL_USART_Available_Data_For_Write>
   d4aee:	2800      	cmp	r0, #0
   d4af0:	dd05      	ble.n	d4afe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4af2:	4631      	mov	r1, r6
   d4af4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4afa:	f7ff bc75 	b.w	d43e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4afe:	4628      	mov	r0, r5
   d4b00:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4b04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4b04:	b510      	push	{r4, lr}
   d4b06:	4604      	mov	r4, r0
   d4b08:	4608      	mov	r0, r1
   d4b0a:	4611      	mov	r1, r2
   d4b0c:	2200      	movs	r2, #0
   d4b0e:	6062      	str	r2, [r4, #4]
   d4b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4b14:	60a2      	str	r2, [r4, #8]
   d4b16:	4a05      	ldr	r2, [pc, #20]	; (d4b2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4b18:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4b1a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4b1c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4b1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4b20:	461a      	mov	r2, r3
   d4b22:	f7ff fc59 	bl	d43d8 <HAL_USART_Init>
}
   d4b26:	4620      	mov	r0, r4
   d4b28:	bd10      	pop	{r4, pc}
   d4b2a:	bf00      	nop
   d4b2c:	000d6c50 	.word	0x000d6c50

000d4b30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4b30:	7c00      	ldrb	r0, [r0, #16]
   d4b32:	f7ff bc81 	b.w	d4438 <HAL_USART_Is_Enabled>
	...

000d4b38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4b38:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4b3a:	4d0c      	ldr	r5, [pc, #48]	; (d4b6c <_Z22__fetch_global_Serial1v+0x34>)
   d4b3c:	6829      	ldr	r1, [r5, #0]
   d4b3e:	f011 0401 	ands.w	r4, r1, #1
   d4b42:	d111      	bne.n	d4b68 <_Z22__fetch_global_Serial1v+0x30>
   d4b44:	4628      	mov	r0, r5
   d4b46:	f7ff faac 	bl	d40a2 <__cxa_guard_acquire>
   d4b4a:	b168      	cbz	r0, d4b68 <_Z22__fetch_global_Serial1v+0x30>
   d4b4c:	4a08      	ldr	r2, [pc, #32]	; (d4b70 <_Z22__fetch_global_Serial1v+0x38>)
   d4b4e:	4b09      	ldr	r3, [pc, #36]	; (d4b74 <_Z22__fetch_global_Serial1v+0x3c>)
   d4b50:	4809      	ldr	r0, [pc, #36]	; (d4b78 <_Z22__fetch_global_Serial1v+0x40>)
   d4b52:	4621      	mov	r1, r4
   d4b54:	f7ff ffd6 	bl	d4b04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4b58:	4628      	mov	r0, r5
   d4b5a:	f7ff faa7 	bl	d40ac <__cxa_guard_release>
   d4b5e:	4a07      	ldr	r2, [pc, #28]	; (d4b7c <_Z22__fetch_global_Serial1v+0x44>)
   d4b60:	4907      	ldr	r1, [pc, #28]	; (d4b80 <_Z22__fetch_global_Serial1v+0x48>)
   d4b62:	4805      	ldr	r0, [pc, #20]	; (d4b78 <_Z22__fetch_global_Serial1v+0x40>)
   d4b64:	f000 ff62 	bl	d5a2c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4b68:	4803      	ldr	r0, [pc, #12]	; (d4b78 <_Z22__fetch_global_Serial1v+0x40>)
   d4b6a:	bd38      	pop	{r3, r4, r5, pc}
   d4b6c:	2003e648 	.word	0x2003e648
   d4b70:	2003e64c 	.word	0x2003e64c
   d4b74:	2003e5c4 	.word	0x2003e5c4
   d4b78:	2003e5b0 	.word	0x2003e5b0
   d4b7c:	2003e3c8 	.word	0x2003e3c8
   d4b80:	000d4aaf 	.word	0x000d4aaf

000d4b84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b84:	7441      	strb	r1, [r0, #17]
   d4b86:	4770      	bx	lr

000d4b88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b88:	4770      	bx	lr

000d4b8a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d4b8a:	2100      	movs	r1, #0
   d4b8c:	7c00      	ldrb	r0, [r0, #16]
   d4b8e:	f7ff bbd3 	b.w	d4338 <HAL_USB_USART_Receive_Data>

000d4b92 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d4b92:	2101      	movs	r1, #1
   d4b94:	7c00      	ldrb	r0, [r0, #16]
   d4b96:	f7ff bbcf 	b.w	d4338 <HAL_USB_USART_Receive_Data>

000d4b9a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d4b9a:	7c00      	ldrb	r0, [r0, #16]
   d4b9c:	f7ff bbc4 	b.w	d4328 <HAL_USB_USART_Available_Data_For_Write>

000d4ba0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d4ba0:	7c00      	ldrb	r0, [r0, #16]
   d4ba2:	f7ff bbb9 	b.w	d4318 <HAL_USB_USART_Available_Data>

000d4ba6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d4ba6:	b538      	push	{r3, r4, r5, lr}
   d4ba8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4baa:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d4bac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4bae:	f7ff fbbb 	bl	d4328 <HAL_USB_USART_Available_Data_For_Write>
   d4bb2:	2800      	cmp	r0, #0
   d4bb4:	dc01      	bgt.n	d4bba <_ZN9USBSerial5writeEh+0x14>
   d4bb6:	7c60      	ldrb	r0, [r4, #17]
   d4bb8:	b120      	cbz	r0, d4bc4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d4bba:	4629      	mov	r1, r5
   d4bbc:	7c20      	ldrb	r0, [r4, #16]
   d4bbe:	f7ff fbc3 	bl	d4348 <HAL_USB_USART_Send_Data>
    return 1;
   d4bc2:	2001      	movs	r0, #1
  }
  return 0;
}
   d4bc4:	bd38      	pop	{r3, r4, r5, pc}

000d4bc6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4bc6:	7c00      	ldrb	r0, [r0, #16]
   d4bc8:	f7ff bbc6 	b.w	d4358 <HAL_USB_USART_Flush_Data>

000d4bcc <_ZN9USBSerialD0Ev>:
   d4bcc:	b510      	push	{r4, lr}
   d4bce:	4604      	mov	r4, r0
   d4bd0:	f7ff fa63 	bl	d409a <_ZdlPv>
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	bd10      	pop	{r4, pc}

000d4bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bd8:	b510      	push	{r4, lr}
   d4bda:	4604      	mov	r4, r0
   d4bdc:	2300      	movs	r3, #0
   d4bde:	6063      	str	r3, [r4, #4]
   d4be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4be4:	60a3      	str	r3, [r4, #8]
   d4be6:	4b05      	ldr	r3, [pc, #20]	; (d4bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4be8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4bea:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bec:	4608      	mov	r0, r1
{
  _serial = serial;
   d4bee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4bf0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4bf2:	4611      	mov	r1, r2
   d4bf4:	f7ff fb80 	bl	d42f8 <HAL_USB_USART_Init>
}
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}
   d4bfc:	000d6c80 	.word	0x000d6c80

000d4c00 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4c00:	2200      	movs	r2, #0
   d4c02:	7c00      	ldrb	r0, [r0, #16]
   d4c04:	f7ff bb80 	b.w	d4308 <HAL_USB_USART_Begin>

000d4c08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4c0a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4c0e:	2100      	movs	r1, #0
   d4c10:	f001 ff25 	bl	d6a5e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4c14:	4620      	mov	r0, r4
   d4c16:	bd10      	pop	{r4, pc}

000d4c18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4c18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c1a:	4d0e      	ldr	r5, [pc, #56]	; (d4c54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4c1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4c1e:	a801      	add	r0, sp, #4
   d4c20:	f7ff fff2 	bl	d4c08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c24:	6829      	ldr	r1, [r5, #0]
   d4c26:	f011 0401 	ands.w	r4, r1, #1
   d4c2a:	d110      	bne.n	d4c4e <_Z16_fetch_usbserialv+0x36>
   d4c2c:	4628      	mov	r0, r5
   d4c2e:	f7ff fa38 	bl	d40a2 <__cxa_guard_acquire>
   d4c32:	b160      	cbz	r0, d4c4e <_Z16_fetch_usbserialv+0x36>
   d4c34:	aa01      	add	r2, sp, #4
   d4c36:	4621      	mov	r1, r4
   d4c38:	4807      	ldr	r0, [pc, #28]	; (d4c58 <_Z16_fetch_usbserialv+0x40>)
   d4c3a:	f7ff ffcd 	bl	d4bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4c3e:	4628      	mov	r0, r5
   d4c40:	f7ff fa34 	bl	d40ac <__cxa_guard_release>
   d4c44:	4a05      	ldr	r2, [pc, #20]	; (d4c5c <_Z16_fetch_usbserialv+0x44>)
   d4c46:	4906      	ldr	r1, [pc, #24]	; (d4c60 <_Z16_fetch_usbserialv+0x48>)
   d4c48:	4803      	ldr	r0, [pc, #12]	; (d4c58 <_Z16_fetch_usbserialv+0x40>)
   d4c4a:	f000 feef 	bl	d5a2c <__aeabi_atexit>
	return _usbserial;
}
   d4c4e:	4802      	ldr	r0, [pc, #8]	; (d4c58 <_Z16_fetch_usbserialv+0x40>)
   d4c50:	b007      	add	sp, #28
   d4c52:	bd30      	pop	{r4, r5, pc}
   d4c54:	2003e6d0 	.word	0x2003e6d0
   d4c58:	2003e6d4 	.word	0x2003e6d4
   d4c5c:	2003e3c8 	.word	0x2003e3c8
   d4c60:	000d4b89 	.word	0x000d4b89

000d4c64 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c64:	4770      	bx	lr

000d4c66 <_ZN9IPAddressD0Ev>:
   d4c66:	b510      	push	{r4, lr}
   d4c68:	4604      	mov	r4, r0
   d4c6a:	f7ff fa16 	bl	d409a <_ZdlPv>
   d4c6e:	4620      	mov	r0, r4
   d4c70:	bd10      	pop	{r4, pc}

000d4c72 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c72:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4c74:	7d03      	ldrb	r3, [r0, #20]
   d4c76:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c78:	b08d      	sub	sp, #52	; 0x34
   d4c7a:	460e      	mov	r6, r1
   d4c7c:	f100 0704 	add.w	r7, r0, #4
   d4c80:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4c84:	d002      	beq.n	d4c8c <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c86:	f100 0508 	add.w	r5, r0, #8
   d4c8a:	e018      	b.n	d4cbe <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c8c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c8e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c90:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c94:	232f      	movs	r3, #47	; 0x2f
   d4c96:	462a      	mov	r2, r5
   d4c98:	200a      	movs	r0, #10
   d4c9a:	f7ff fbdd 	bl	d4458 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c9e:	4628      	mov	r0, r5
   d4ca0:	f001 ff29 	bl	d6af6 <strlen>
   d4ca4:	6833      	ldr	r3, [r6, #0]
   d4ca6:	4602      	mov	r2, r0
   d4ca8:	68db      	ldr	r3, [r3, #12]
   d4caa:	4629      	mov	r1, r5
   d4cac:	4630      	mov	r0, r6
   d4cae:	4798      	blx	r3
   d4cb0:	e00f      	b.n	d4cd2 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4cb2:	b124      	cbz	r4, d4cbe <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4cb4:	212e      	movs	r1, #46	; 0x2e
   d4cb6:	4630      	mov	r0, r6
   d4cb8:	f000 fba5 	bl	d5406 <_ZN5Print5printEc>
   d4cbc:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4cbe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4cc2:	220a      	movs	r2, #10
   d4cc4:	4630      	mov	r0, r6
   d4cc6:	f000 fbe4 	bl	d5492 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4cca:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ccc:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4cce:	d1f0      	bne.n	d4cb2 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cd0:	4620      	mov	r0, r4
    }
    return n;
}
   d4cd2:	b00d      	add	sp, #52	; 0x34
   d4cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4cd8 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4cd8:	b510      	push	{r4, lr}
   d4cda:	4b05      	ldr	r3, [pc, #20]	; (d4cf0 <_ZN9IPAddressC1Ev+0x18>)
   d4cdc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4cde:	2211      	movs	r2, #17
   d4ce0:	f840 3b04 	str.w	r3, [r0], #4
   d4ce4:	2100      	movs	r1, #0
   d4ce6:	f001 feba 	bl	d6a5e <memset>
{
    clear();
}
   d4cea:	4620      	mov	r0, r4
   d4cec:	bd10      	pop	{r4, pc}
   d4cee:	bf00      	nop
   d4cf0:	000d6cb0 	.word	0x000d6cb0

000d4cf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4cf4:	4603      	mov	r3, r0
   d4cf6:	4a07      	ldr	r2, [pc, #28]	; (d4d14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4cf8:	b510      	push	{r4, lr}
   d4cfa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4cfe:	f101 0210 	add.w	r2, r1, #16
   d4d02:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d06:	f843 4b04 	str.w	r4, [r3], #4
   d4d0a:	4291      	cmp	r1, r2
   d4d0c:	d1f9      	bne.n	d4d02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4d0e:	780a      	ldrb	r2, [r1, #0]
   d4d10:	701a      	strb	r2, [r3, #0]
}
   d4d12:	bd10      	pop	{r4, pc}
   d4d14:	000d6cb0 	.word	0x000d6cb0

000d4d18 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4d18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4d2a:	2304      	movs	r3, #4
   d4d2c:	6041      	str	r1, [r0, #4]
   d4d2e:	7503      	strb	r3, [r0, #20]
   d4d30:	bd10      	pop	{r4, pc}

000d4d32 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4d32:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d34:	780d      	ldrb	r5, [r1, #0]
   d4d36:	788b      	ldrb	r3, [r1, #2]
   d4d38:	784a      	ldrb	r2, [r1, #1]
   d4d3a:	78c9      	ldrb	r1, [r1, #3]
   d4d3c:	9100      	str	r1, [sp, #0]
   d4d3e:	4629      	mov	r1, r5
   d4d40:	f7ff ffea 	bl	d4d18 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d44:	b003      	add	sp, #12
   d4d46:	bd30      	pop	{r4, r5, pc}

000d4d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d48:	4770      	bx	lr

000d4d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4d4a:	2000      	movs	r0, #0
   d4d4c:	4770      	bx	lr

000d4d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d4e:	b510      	push	{r4, lr}
   d4d50:	4604      	mov	r4, r0
   d4d52:	f7ff f9a2 	bl	d409a <_ZdlPv>
   d4d56:	4620      	mov	r0, r4
   d4d58:	bd10      	pop	{r4, pc}

000d4d5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4d5a:	b508      	push	{r3, lr}
      { delete this; }
   d4d5c:	b108      	cbz	r0, d4d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4d5e:	f7ff fff6 	bl	d4d4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d62:	bd08      	pop	{r3, pc}

000d4d64 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d64:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d66:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d68:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4d6a:	b113      	cbz	r3, d4d72 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d6c:	2203      	movs	r2, #3
   d4d6e:	4601      	mov	r1, r0
   d4d70:	4798      	blx	r3
    }
   d4d72:	4620      	mov	r0, r4
   d4d74:	bd10      	pop	{r4, pc}

000d4d76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4d76:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4d78:	68c4      	ldr	r4, [r0, #12]
   d4d7a:	b1d4      	cbz	r4, d4db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>
   d4d7c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4d7e:	2b02      	cmp	r3, #2
   d4d80:	d102      	bne.n	d4d88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d82:	68e0      	ldr	r0, [r4, #12]
   d4d84:	f7ff fc8c 	bl	d46a0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4d88:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4d8a:	b12d      	cbz	r5, d4d98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d8c:	4628      	mov	r0, r5
   d4d8e:	f7ff ffe9 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
   d4d92:	4628      	mov	r0, r5
   d4d94:	f7ff f981 	bl	d409a <_ZdlPv>
   d4d98:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4d9a:	b12d      	cbz	r5, d4da8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d4d9c:	4628      	mov	r0, r5
   d4d9e:	f7ff ffe1 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
   d4da2:	4628      	mov	r0, r5
   d4da4:	f7ff f979 	bl	d409a <_ZdlPv>
   d4da8:	4620      	mov	r0, r4
   d4daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4dae:	f7ff b974 	b.w	d409a <_ZdlPv>
   d4db2:	bd38      	pop	{r3, r4, r5, pc}

000d4db4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4db4:	b513      	push	{r0, r1, r4, lr}
   d4db6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4db8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4dbc:	2300      	movs	r3, #0
   d4dbe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4dc0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4dc2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4dc4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4dc6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4dc8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4dca:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4dcc:	f7ff fc98 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	b002      	add	sp, #8
   d4dd4:	bd10      	pop	{r4, pc}

000d4dd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4dd6:	680b      	ldr	r3, [r1, #0]
   d4dd8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4dda:	b113      	cbz	r3, d4de2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4ddc:	685a      	ldr	r2, [r3, #4]
   d4dde:	3201      	adds	r2, #1
   d4de0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4de2:	4770      	bx	lr

000d4de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4de6:	460c      	mov	r4, r1
   d4de8:	ad02      	add	r5, sp, #8
   d4dea:	f854 3b04 	ldr.w	r3, [r4], #4
   d4dee:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4df2:	4606      	mov	r6, r0
   d4df4:	460f      	mov	r7, r1
   d4df6:	a801      	add	r0, sp, #4
   d4df8:	4621      	mov	r1, r4
   d4dfa:	f7ff ffec 	bl	d4dd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4dfe:	4629      	mov	r1, r5
   d4e00:	4630      	mov	r0, r6
   d4e02:	f7ff ffd7 	bl	d4db4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e06:	a801      	add	r0, sp, #4
   d4e08:	f7ff fc7a 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	f7ff fc77 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4e12:	4638      	mov	r0, r7
   d4e14:	f7ff f941 	bl	d409a <_ZdlPv>
        return p;
    }
   d4e18:	4630      	mov	r0, r6
   d4e1a:	b003      	add	sp, #12
   d4e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e1e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4e1e:	b513      	push	{r0, r1, r4, lr}
   d4e20:	460b      	mov	r3, r1
   d4e22:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e24:	c803      	ldmia	r0, {r0, r1}
   d4e26:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e2a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e2e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e32:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4e36:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e3a:	b002      	add	sp, #8
   d4e3c:	bd10      	pop	{r4, pc}

000d4e3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e3e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e40:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e42:	b90a      	cbnz	r2, d4e48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4e44:	f000 fdf7 	bl	d5a36 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e48:	68c3      	ldr	r3, [r0, #12]
    }
   d4e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e4e:	4718      	bx	r3

000d4e50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e50:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e52:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e54:	f100 0110 	add.w	r1, r0, #16
   d4e58:	f7ff fff1 	bl	d4e3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e5c:	bd08      	pop	{r3, pc}

000d4e5e <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e5e:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e60:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e62:	b90a      	cbnz	r2, d4e68 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4e64:	f000 fde7 	bl	d5a36 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e68:	68c3      	ldr	r3, [r0, #12]
    }
   d4e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e6e:	4718      	bx	r3

000d4e70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e70:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e72:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e74:	f100 0110 	add.w	r1, r0, #16
   d4e78:	f7ff fff1 	bl	d4e5e <_ZNKSt8functionIFvRKbEEclES1_>
   d4e7c:	bd08      	pop	{r3, pc}

000d4e7e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e7e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e80:	2300      	movs	r3, #0
   d4e82:	6083      	str	r3, [r0, #8]
   d4e84:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e86:	4604      	mov	r4, r0
   d4e88:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4e8a:	b12b      	cbz	r3, d4e98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e8c:	2202      	movs	r2, #2
   d4e8e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e90:	68eb      	ldr	r3, [r5, #12]
   d4e92:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e94:	68ab      	ldr	r3, [r5, #8]
   d4e96:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bd38      	pop	{r3, r4, r5, pc}

000d4e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4ea0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4ea4:	b086      	sub	sp, #24
   d4ea6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ea8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eac:	808b      	strh	r3, [r1, #4]
   d4eae:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eb0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4eb2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eb6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4eb8:	f04f 0002 	mov.w	r0, #2
   d4ebc:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4ec0:	4299      	cmp	r1, r3
   d4ec2:	d103      	bne.n	d4ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4ec4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4ec8:	2d00      	cmp	r5, #0
   d4eca:	d1f7      	bne.n	d4ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4ecc:	d002      	beq.n	d4ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4ece:	f88d 1000 	strb.w	r1, [sp]
   d4ed2:	e06a      	b.n	d4faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4ed4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ed8:	bf1e      	ittt	ne
   d4eda:	60e7      	strne	r7, [r4, #12]
   d4edc:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ede:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ee0:	2301      	movs	r3, #1
   d4ee2:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4ee6:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ee8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4eea:	f104 0308 	add.w	r3, r4, #8
   d4eee:	f3bf 8f5f 	dmb	sy
   d4ef2:	e853 6f00 	ldrex	r6, [r3]
   d4ef6:	e843 0200 	strex	r2, r0, [r3]
   d4efa:	2a00      	cmp	r2, #0
   d4efc:	d1f9      	bne.n	d4ef2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4efe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4f02:	2e00      	cmp	r6, #0
   d4f04:	d051      	beq.n	d4faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4f06:	f7ff fb9f 	bl	d4648 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4f0a:	b120      	cbz	r0, d4f16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f0c:	4629      	mov	r1, r5
   d4f0e:	4630      	mov	r0, r6
   d4f10:	f7ff ff95 	bl	d4e3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f14:	e043      	b.n	d4f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f16:	4631      	mov	r1, r6
   d4f18:	4668      	mov	r0, sp
   d4f1a:	f7ff ffb0 	bl	d4e7e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4f1e:	68e0      	ldr	r0, [r4, #12]
   d4f20:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4f24:	b108      	cbz	r0, d4f2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4f26:	f001 fdcb 	bl	d6ac0 <strdup>
   d4f2a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f2c:	2010      	movs	r0, #16
   d4f2e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4f32:	f7ff f8b0 	bl	d4096 <_Znwj>
   d4f36:	4605      	mov	r5, r0
   d4f38:	b330      	cbz	r0, d4f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f3a:	f04f 0800 	mov.w	r8, #0
   d4f3e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f42:	2018      	movs	r0, #24
   d4f44:	f7ff f8a7 	bl	d4096 <_Znwj>
   d4f48:	4604      	mov	r4, r0
   d4f4a:	b1c0      	cbz	r0, d4f7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f4c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f50:	4601      	mov	r1, r0
   d4f52:	4668      	mov	r0, sp
   d4f54:	f7ff ff63 	bl	d4e1e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f58:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4f5a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f5c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f5e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4f60:	9202      	str	r2, [sp, #8]
   d4f62:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f64:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4f6a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4f70:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f74:	9b04      	ldr	r3, [sp, #16]
   d4f76:	9203      	str	r2, [sp, #12]
   d4f78:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f7a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f7e:	4b0e      	ldr	r3, [pc, #56]	; (d4fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4f80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f82:	4b0e      	ldr	r3, [pc, #56]	; (d4fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f84:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4f86:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4f88:	9804      	ldr	r0, [sp, #16]
   d4f8a:	f7ff fb89 	bl	d46a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f8e:	4668      	mov	r0, sp
   d4f90:	f7ff fee8 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4f94:	2200      	movs	r2, #0
   d4f96:	4629      	mov	r1, r5
   d4f98:	4809      	ldr	r0, [pc, #36]	; (d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4f9a:	f7ff fb5d 	bl	d4658 <application_thread_invoke>
   d4f9e:	4630      	mov	r0, r6
   d4fa0:	f7ff fee0 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4fa4:	4630      	mov	r0, r6
   d4fa6:	f7ff f878 	bl	d409a <_ZdlPv>
   d4faa:	4638      	mov	r0, r7
   d4fac:	f7ff fb78 	bl	d46a0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4fb0:	b006      	add	sp, #24
   d4fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4fb6:	bf00      	nop
   d4fb8:	000d4e51 	.word	0x000d4e51
   d4fbc:	000d50ad 	.word	0x000d50ad
   d4fc0:	000d4a89 	.word	0x000d4a89

000d4fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fc8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fca:	ad07      	add	r5, sp, #28
   d4fcc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4fd0:	4606      	mov	r6, r0
   d4fd2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4fd4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fd6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4fd8:	460f      	mov	r7, r1
   d4fda:	4690      	mov	r8, r2
   d4fdc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4fe0:	f8c5 b004 	str.w	fp, [r5, #4]
   d4fe4:	f8c5 b008 	str.w	fp, [r5, #8]
   d4fe8:	9307      	str	r3, [sp, #28]
   d4fea:	f7ff f854 	bl	d4096 <_Znwj>
   d4fee:	4604      	mov	r4, r0
   d4ff0:	b138      	cbz	r0, d5002 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4ff2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ff6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4ffa:	f8c0 b004 	str.w	fp, [r0, #4]
   d4ffe:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5002:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5004:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5006:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5008:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d500a:	f7ff f844 	bl	d4096 <_Znwj>
   d500e:	b128      	cbz	r0, d501c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5010:	2301      	movs	r3, #1
   d5012:	6043      	str	r3, [r0, #4]
   d5014:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5016:	4b23      	ldr	r3, [pc, #140]	; (d50a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5018:	6003      	str	r3, [r0, #0]
   d501a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d501c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d501e:	4b22      	ldr	r3, [pc, #136]	; (d50a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5020:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5022:	2008      	movs	r0, #8
   d5024:	f7ff f837 	bl	d4096 <_Znwj>
   d5028:	4604      	mov	r4, r0
   d502a:	b128      	cbz	r0, d5038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d502c:	9b03      	ldr	r3, [sp, #12]
   d502e:	f840 3b04 	str.w	r3, [r0], #4
   d5032:	a904      	add	r1, sp, #16
   d5034:	f7ff fecf 	bl	d4dd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5038:	9500      	str	r5, [sp, #0]
   d503a:	fa5f f38a 	uxtb.w	r3, sl
   d503e:	464a      	mov	r2, r9
   d5040:	4641      	mov	r1, r8
   d5042:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5044:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5046:	f7ff fa8f 	bl	d4568 <spark_send_event>
   d504a:	b9b8      	cbnz	r0, d507c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d504c:	9b03      	ldr	r3, [sp, #12]
   d504e:	785b      	ldrb	r3, [r3, #1]
   d5050:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5054:	b993      	cbnz	r3, d507c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5056:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d505a:	a905      	add	r1, sp, #20
   d505c:	a803      	add	r0, sp, #12
   d505e:	9205      	str	r2, [sp, #20]
   d5060:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5064:	f7ff ff1a 	bl	d4e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5068:	9805      	ldr	r0, [sp, #20]
   d506a:	f7ff fb19 	bl	d46a0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d506e:	a805      	add	r0, sp, #20
   d5070:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5072:	f7ff feb7 	bl	d4de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5076:	a806      	add	r0, sp, #24
   d5078:	f7ff fb42 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d507c:	9b03      	ldr	r3, [sp, #12]
   d507e:	9305      	str	r3, [sp, #20]
   d5080:	a904      	add	r1, sp, #16
   d5082:	a806      	add	r0, sp, #24
   d5084:	f7ff fea7 	bl	d4dd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5088:	a905      	add	r1, sp, #20
   d508a:	4630      	mov	r0, r6
   d508c:	f7ff fe92 	bl	d4db4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5090:	a806      	add	r0, sp, #24
   d5092:	f7ff fb35 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5096:	a804      	add	r0, sp, #16
   d5098:	f7ff fb32 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d509c:	4630      	mov	r0, r6
   d509e:	b00b      	add	sp, #44	; 0x2c
   d50a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50a4:	000d6cc4 	.word	0x000d6cc4
   d50a8:	000d5215 	.word	0x000d5215

000d50ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d50ac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50b0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d50b2:	d006      	beq.n	d50c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d50b4:	2a03      	cmp	r2, #3
   d50b6:	d017      	beq.n	d50e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d50b8:	2a01      	cmp	r2, #1
   d50ba:	d120      	bne.n	d50fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50bc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50be:	6003      	str	r3, [r0, #0]
	      break;
   d50c0:	e01d      	b.n	d50fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50c2:	2018      	movs	r0, #24
   d50c4:	680e      	ldr	r6, [r1, #0]
   d50c6:	f7fe ffe6 	bl	d4096 <_Znwj>
   d50ca:	4605      	mov	r5, r0
   d50cc:	b150      	cbz	r0, d50e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d50ce:	4631      	mov	r1, r6
   d50d0:	f7ff fed5 	bl	d4e7e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50d4:	6930      	ldr	r0, [r6, #16]
   d50d6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50da:	b108      	cbz	r0, d50e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d50dc:	f001 fcf0 	bl	d6ac0 <strdup>
   d50e0:	6128      	str	r0, [r5, #16]
   d50e2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50e4:	6025      	str	r5, [r4, #0]
   d50e6:	e00a      	b.n	d50fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50e8:	6804      	ldr	r4, [r0, #0]
   d50ea:	b144      	cbz	r4, d50fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d50ec:	6920      	ldr	r0, [r4, #16]
   d50ee:	f7ff fad7 	bl	d46a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50f2:	4620      	mov	r0, r4
   d50f4:	f7ff fe36 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50f8:	4620      	mov	r0, r4
   d50fa:	f7fe ffce 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50fe:	2000      	movs	r0, #0
   d5100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5102 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5102:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5104:	2300      	movs	r3, #0
   d5106:	6083      	str	r3, [r0, #8]
   d5108:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d510a:	4604      	mov	r4, r0
   d510c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d510e:	b12b      	cbz	r3, d511c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5110:	2202      	movs	r2, #2
   d5112:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5114:	68eb      	ldr	r3, [r5, #12]
   d5116:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5118:	68ab      	ldr	r3, [r5, #8]
   d511a:	60a3      	str	r3, [r4, #8]
	}
    }
   d511c:	4620      	mov	r0, r4
   d511e:	bd38      	pop	{r3, r4, r5, pc}

000d5120 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5120:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5122:	b570      	push	{r4, r5, r6, lr}
   d5124:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5126:	d006      	beq.n	d5136 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5128:	2a03      	cmp	r2, #3
   d512a:	d011      	beq.n	d5150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d512c:	2a01      	cmp	r2, #1
   d512e:	d117      	bne.n	d5160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5130:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5132:	6003      	str	r3, [r0, #0]
	      break;
   d5134:	e014      	b.n	d5160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5136:	2014      	movs	r0, #20
   d5138:	680e      	ldr	r6, [r1, #0]
   d513a:	f7fe ffac 	bl	d4096 <_Znwj>
   d513e:	4605      	mov	r5, r0
   d5140:	b120      	cbz	r0, d514c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5142:	4631      	mov	r1, r6
   d5144:	f7ff ffdd 	bl	d5102 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5148:	7c33      	ldrb	r3, [r6, #16]
   d514a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d514c:	6025      	str	r5, [r4, #0]
   d514e:	e007      	b.n	d5160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5150:	6804      	ldr	r4, [r0, #0]
   d5152:	b12c      	cbz	r4, d5160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5154:	4620      	mov	r0, r4
   d5156:	f7ff fe05 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d515a:	4620      	mov	r0, r4
   d515c:	f7fe ff9d 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5160:	2000      	movs	r0, #0
   d5162:	bd70      	pop	{r4, r5, r6, pc}

000d5164 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5164:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5166:	2300      	movs	r3, #0
   d5168:	b087      	sub	sp, #28
   d516a:	460c      	mov	r4, r1
   d516c:	f3bf 8f5f 	dmb	sy
   d5170:	e850 6f00 	ldrex	r6, [r0]
   d5174:	e840 3200 	strex	r2, r3, [r0]
   d5178:	2a00      	cmp	r2, #0
   d517a:	d1f9      	bne.n	d5170 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d517c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5180:	2e00      	cmp	r6, #0
   d5182:	d03e      	beq.n	d5202 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5184:	4618      	mov	r0, r3
   d5186:	f7ff fa5f 	bl	d4648 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d518a:	4607      	mov	r7, r0
   d518c:	b120      	cbz	r0, d5198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d518e:	4621      	mov	r1, r4
   d5190:	4630      	mov	r0, r6
   d5192:	f7ff fe64 	bl	d4e5e <_ZNKSt8functionIFvRKbEEclES1_>
   d5196:	e02e      	b.n	d51f6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5198:	4631      	mov	r1, r6
   d519a:	a801      	add	r0, sp, #4
   d519c:	f7ff ffb1 	bl	d5102 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51a0:	7823      	ldrb	r3, [r4, #0]
   d51a2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d51a6:	2010      	movs	r0, #16
   d51a8:	f7fe ff75 	bl	d4096 <_Znwj>
   d51ac:	4605      	mov	r5, r0
   d51ae:	b1d0      	cbz	r0, d51e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51b0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51b2:	2014      	movs	r0, #20
   d51b4:	f7fe ff6f 	bl	d4096 <_Znwj>
   d51b8:	4604      	mov	r4, r0
   d51ba:	b178      	cbz	r0, d51dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51bc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d51be:	4601      	mov	r1, r0
   d51c0:	a801      	add	r0, sp, #4
   d51c2:	f7ff fe2c 	bl	d4e1e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d51c8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51ca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d51ce:	9203      	str	r2, [sp, #12]
   d51d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51d2:	60e3      	str	r3, [r4, #12]
   d51d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51d8:	9204      	str	r2, [sp, #16]
   d51da:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d51dc:	4b0a      	ldr	r3, [pc, #40]	; (d5208 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d51de:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d51e0:	4b0a      	ldr	r3, [pc, #40]	; (d520c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51e2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d51e4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51e6:	a801      	add	r0, sp, #4
   d51e8:	f7ff fdbc 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51ec:	2200      	movs	r2, #0
   d51ee:	4629      	mov	r1, r5
   d51f0:	4807      	ldr	r0, [pc, #28]	; (d5210 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d51f2:	f7ff fa31 	bl	d4658 <application_thread_invoke>
   d51f6:	4630      	mov	r0, r6
   d51f8:	f7ff fdb4 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d51fc:	4630      	mov	r0, r6
   d51fe:	f7fe ff4c 	bl	d409a <_ZdlPv>
        }
    }
   d5202:	b007      	add	sp, #28
   d5204:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5206:	bf00      	nop
   d5208:	000d4e71 	.word	0x000d4e71
   d520c:	000d5121 	.word	0x000d5121
   d5210:	000d4a89 	.word	0x000d4a89

000d5214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5214:	b530      	push	{r4, r5, lr}
   d5216:	b085      	sub	sp, #20
   d5218:	4604      	mov	r4, r0
   d521a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d521c:	4668      	mov	r0, sp
   d521e:	4611      	mov	r1, r2
   d5220:	f7ff fde0 	bl	d4de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5224:	b17c      	cbz	r4, d5246 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5226:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5228:	4628      	mov	r0, r5
   d522a:	b10d      	cbz	r5, d5230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d522c:	f001 fc48 	bl	d6ac0 <strdup>
   d5230:	9002      	str	r0, [sp, #8]
   d5232:	a902      	add	r1, sp, #8
   d5234:	4668      	mov	r0, sp
   d5236:	f8ad 400c 	strh.w	r4, [sp, #12]
   d523a:	f7ff fe2f 	bl	d4e9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d523e:	9802      	ldr	r0, [sp, #8]
   d5240:	f7ff fa2e 	bl	d46a0 <free>
   d5244:	e01d      	b.n	d5282 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5246:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5248:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d524c:	f04f 0201 	mov.w	r2, #1
   d5250:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5254:	42a3      	cmp	r3, r4
   d5256:	d103      	bne.n	d5260 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5258:	e8c0 2f41 	strexb	r1, r2, [r0]
   d525c:	2900      	cmp	r1, #0
   d525e:	d1f7      	bne.n	d5250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5260:	d002      	beq.n	d5268 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5262:	f88d 3008 	strb.w	r3, [sp, #8]
   d5266:	e00c      	b.n	d5282 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5268:	f110 010c 	adds.w	r1, r0, #12
   d526c:	f04f 0301 	mov.w	r3, #1
   d5270:	bf18      	it	ne
   d5272:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5274:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5278:	3004      	adds	r0, #4
   d527a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d527e:	f7ff ff71 	bl	d5164 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5282:	a801      	add	r0, sp, #4
   d5284:	f7ff fa3c 	bl	d4700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5288:	b005      	add	sp, #20
   d528a:	bd30      	pop	{r4, r5, pc}

000d528c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d528c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d528e:	4b0c      	ldr	r3, [pc, #48]	; (d52c0 <serialEventRun+0x34>)
   d5290:	b133      	cbz	r3, d52a0 <serialEventRun+0x14>
   d5292:	f7ff fcc1 	bl	d4c18 <_Z16_fetch_usbserialv>
   d5296:	6803      	ldr	r3, [r0, #0]
   d5298:	691b      	ldr	r3, [r3, #16]
   d529a:	4798      	blx	r3
   d529c:	2800      	cmp	r0, #0
   d529e:	dc09      	bgt.n	d52b4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d52a0:	4b08      	ldr	r3, [pc, #32]	; (d52c4 <serialEventRun+0x38>)
   d52a2:	b163      	cbz	r3, d52be <serialEventRun+0x32>
   d52a4:	f7ff fc48 	bl	d4b38 <_Z22__fetch_global_Serial1v>
   d52a8:	6803      	ldr	r3, [r0, #0]
   d52aa:	691b      	ldr	r3, [r3, #16]
   d52ac:	4798      	blx	r3
   d52ae:	2800      	cmp	r0, #0
   d52b0:	dc03      	bgt.n	d52ba <serialEventRun+0x2e>
   d52b2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d52b4:	f3af 8000 	nop.w
   d52b8:	e7f2      	b.n	d52a0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52ba:	f3af 8000 	nop.w
   d52be:	bd08      	pop	{r3, pc}
	...

000d52c8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d52c8:	b508      	push	{r3, lr}
	serialEventRun();
   d52ca:	f7ff ffdf 	bl	d528c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52ce:	f7ff f8fb 	bl	d44c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52d2:	4b01      	ldr	r3, [pc, #4]	; (d52d8 <_post_loop+0x10>)
   d52d4:	6018      	str	r0, [r3, #0]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	2003e72c 	.word	0x2003e72c

000d52dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52de:	2300      	movs	r3, #0
   d52e0:	9300      	str	r3, [sp, #0]
   d52e2:	461a      	mov	r2, r3
   d52e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52e8:	f7ff f9c8 	bl	d467c <system_ctrl_set_result>
}
   d52ec:	b003      	add	sp, #12
   d52ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52f6:	8843      	ldrh	r3, [r0, #2]
   d52f8:	2b0a      	cmp	r3, #10
   d52fa:	d008      	beq.n	d530e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52fc:	2b50      	cmp	r3, #80	; 0x50
   d52fe:	d109      	bne.n	d5314 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5300:	4b09      	ldr	r3, [pc, #36]	; (d5328 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5302:	681b      	ldr	r3, [r3, #0]
   d5304:	b13b      	cbz	r3, d5316 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5306:	b003      	add	sp, #12
   d5308:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d530c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d530e:	f7ff ffe5 	bl	d52dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5312:	e006      	b.n	d5322 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5314:	2300      	movs	r3, #0
   d5316:	9300      	str	r3, [sp, #0]
   d5318:	461a      	mov	r2, r3
   d531a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d531e:	f7ff f9ad 	bl	d467c <system_ctrl_set_result>
        break;
    }
}
   d5322:	b003      	add	sp, #12
   d5324:	f85d fb04 	ldr.w	pc, [sp], #4
   d5328:	2003e6e8 	.word	0x2003e6e8

000d532c <module_user_init_hook>:

void module_user_init_hook()
{
   d532c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d532e:	f7ff f8c3 	bl	d44b8 <HAL_RNG_GetRandomNumber>
   d5332:	4604      	mov	r4, r0
    srand(seed);
   d5334:	f001 fb9c 	bl	d6a70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5338:	4b07      	ldr	r3, [pc, #28]	; (d5358 <module_user_init_hook+0x2c>)
   d533a:	b113      	cbz	r3, d5342 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d533c:	4620      	mov	r0, r4
   d533e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5342:	2100      	movs	r1, #0
   d5344:	4804      	ldr	r0, [pc, #16]	; (d5358 <module_user_init_hook+0x2c>)
   d5346:	f7ff f917 	bl	d4578 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d534a:	2100      	movs	r1, #0
   d534c:	4803      	ldr	r0, [pc, #12]	; (d535c <module_user_init_hook+0x30>)
}
   d534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5352:	f7ff b989 	b.w	d4668 <system_ctrl_set_app_request_handler>
   d5356:	bf00      	nop
   d5358:	00000000 	.word	0x00000000
   d535c:	000d52f5 	.word	0x000d52f5

000d5360 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5360:	b510      	push	{r4, lr}
   d5362:	4604      	mov	r4, r0
   d5364:	f7ff fcfe 	bl	d4d64 <_ZNSt14_Function_baseD1Ev>
   d5368:	4620      	mov	r0, r4
   d536a:	bd10      	pop	{r4, pc}

000d536c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d536c:	4803      	ldr	r0, [pc, #12]	; (d537c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d536e:	4a04      	ldr	r2, [pc, #16]	; (d5380 <_GLOBAL__sub_I_RGB+0x14>)
   d5370:	4904      	ldr	r1, [pc, #16]	; (d5384 <_GLOBAL__sub_I_RGB+0x18>)
   d5372:	2300      	movs	r3, #0
   d5374:	6083      	str	r3, [r0, #8]
   d5376:	f000 bb59 	b.w	d5a2c <__aeabi_atexit>
   d537a:	bf00      	nop
   d537c:	2003e6ec 	.word	0x2003e6ec
   d5380:	2003e3c8 	.word	0x2003e3c8
   d5384:	000d5361 	.word	0x000d5361

000d5388 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5388:	4b02      	ldr	r3, [pc, #8]	; (d5394 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d538a:	681a      	ldr	r2, [r3, #0]
   d538c:	4b02      	ldr	r3, [pc, #8]	; (d5398 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d538e:	601a      	str	r2, [r3, #0]
   d5390:	4770      	bx	lr
   d5392:	bf00      	nop
   d5394:	2003e360 	.word	0x2003e360
   d5398:	2003e6fc 	.word	0x2003e6fc

000d539c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d539c:	4b01      	ldr	r3, [pc, #4]	; (d53a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d539e:	4a02      	ldr	r2, [pc, #8]	; (d53a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d53a0:	601a      	str	r2, [r3, #0]
   d53a2:	4770      	bx	lr
   d53a4:	2003e700 	.word	0x2003e700
   d53a8:	000d6db7 	.word	0x000d6db7

000d53ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53ac:	2100      	movs	r1, #0
   d53ae:	f7ff b943 	b.w	d4638 <system_delay_ms>

000d53b2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b4:	4606      	mov	r6, r0
   d53b6:	460d      	mov	r5, r1
   d53b8:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53ba:	2400      	movs	r4, #0
  while (size--) {
   d53bc:	42bd      	cmp	r5, r7
   d53be:	d00c      	beq.n	d53da <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53c0:	6833      	ldr	r3, [r6, #0]
   d53c2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53c6:	689b      	ldr	r3, [r3, #8]
   d53c8:	4630      	mov	r0, r6
   d53ca:	4798      	blx	r3
     if (chunk>=0)
   d53cc:	2800      	cmp	r0, #0
   d53ce:	db01      	blt.n	d53d4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53d0:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53d2:	e7f3      	b.n	d53bc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53d4:	2c00      	cmp	r4, #0
   d53d6:	bf08      	it	eq
   d53d8:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53da:	4620      	mov	r0, r4
   d53dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53de <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53de:	b570      	push	{r4, r5, r6, lr}
   d53e0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53e2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53e4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53e6:	b149      	cbz	r1, d53fc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53e8:	f001 fb85 	bl	d6af6 <strlen>
   d53ec:	682b      	ldr	r3, [r5, #0]
   d53ee:	4602      	mov	r2, r0
   d53f0:	4621      	mov	r1, r4
   d53f2:	4628      	mov	r0, r5
   d53f4:	68db      	ldr	r3, [r3, #12]
    }
   d53f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53fa:	4718      	bx	r3
    }
   d53fc:	bd70      	pop	{r4, r5, r6, pc}

000d53fe <_ZN5Print5printEPKc>:
   d53fe:	b508      	push	{r3, lr}
   d5400:	f7ff ffed 	bl	d53de <_ZN5Print5writeEPKc>
   d5404:	bd08      	pop	{r3, pc}

000d5406 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5406:	6803      	ldr	r3, [r0, #0]
   d5408:	689b      	ldr	r3, [r3, #8]
   d540a:	4718      	bx	r3

000d540c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d540c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d540e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5410:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5412:	f7ff fff8 	bl	d5406 <_ZN5Print5printEc>
  n += print('\n');
   d5416:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5418:	4604      	mov	r4, r0
  n += print('\n');
   d541a:	4628      	mov	r0, r5
   d541c:	f7ff fff3 	bl	d5406 <_ZN5Print5printEc>
  return n;
}
   d5420:	4420      	add	r0, r4
   d5422:	bd38      	pop	{r3, r4, r5, pc}

000d5424 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5424:	b538      	push	{r3, r4, r5, lr}
   d5426:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5428:	f7ff ffd9 	bl	d53de <_ZN5Print5writeEPKc>
   d542c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d542e:	4628      	mov	r0, r5
   d5430:	f7ff ffec 	bl	d540c <_ZN5Print7printlnEv>
  return n;
}
   d5434:	4420      	add	r0, r4
   d5436:	bd38      	pop	{r3, r4, r5, pc}

000d5438 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5438:	b530      	push	{r4, r5, lr}
   d543a:	b08b      	sub	sp, #44	; 0x2c
   d543c:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d543e:	2100      	movs	r1, #0
   d5440:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5444:	2a01      	cmp	r2, #1
   d5446:	bf98      	it	ls
   d5448:	220a      	movls	r2, #10
   d544a:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d544e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5452:	fb05 3312 	mls	r3, r5, r2, r3
   d5456:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d545a:	2b09      	cmp	r3, #9
   d545c:	bf94      	ite	ls
   d545e:	3330      	addls	r3, #48	; 0x30
   d5460:	3337      	addhi	r3, #55	; 0x37
   d5462:	b2db      	uxtb	r3, r3
   d5464:	4621      	mov	r1, r4
   d5466:	f804 3901 	strb.w	r3, [r4], #-1
   d546a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d546c:	2d00      	cmp	r5, #0
   d546e:	d1ee      	bne.n	d544e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5470:	f7ff ffb5 	bl	d53de <_ZN5Print5writeEPKc>
}
   d5474:	b00b      	add	sp, #44	; 0x2c
   d5476:	bd30      	pop	{r4, r5, pc}

000d5478 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5478:	b410      	push	{r4}
  if (base == 0) return write(n);
   d547a:	b92a      	cbnz	r2, d5488 <_ZN5Print5printEmi+0x10>
   d547c:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d547e:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5482:	689b      	ldr	r3, [r3, #8]
   d5484:	b2c9      	uxtb	r1, r1
   d5486:	4718      	bx	r3
  else return printNumber(n, base);
   d5488:	b2d2      	uxtb	r2, r2
}
   d548a:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d548e:	f7ff bfd3 	b.w	d5438 <_ZN5Print11printNumberEmh>

000d5492 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5492:	f7ff bff1 	b.w	d5478 <_ZN5Print5printEmi>

000d5496 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d549a:	4607      	mov	r7, r0
   d549c:	460e      	mov	r6, r1
  if (base == 0) {
   d549e:	4615      	mov	r5, r2
   d54a0:	b92a      	cbnz	r2, d54ae <_ZN5Print5printEli+0x18>
    return write(n);
   d54a2:	6803      	ldr	r3, [r0, #0]
   d54a4:	b2c9      	uxtb	r1, r1
   d54a6:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d54a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d54ac:	4718      	bx	r3
  } else if (base == 10) {
   d54ae:	2a0a      	cmp	r2, #10
   d54b0:	d102      	bne.n	d54b8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d54b2:	2900      	cmp	r1, #0
   d54b4:	da01      	bge.n	d54ba <_ZN5Print5printEli+0x24>
   d54b6:	e004      	b.n	d54c2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d54b8:	b2d2      	uxtb	r2, r2
  }
}
   d54ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d54be:	f7ff bfbb 	b.w	d5438 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d54c2:	212d      	movs	r1, #45	; 0x2d
   d54c4:	f7ff ff9f 	bl	d5406 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d54c8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d54ca:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d54cc:	4271      	negs	r1, r6
   d54ce:	4638      	mov	r0, r7
   d54d0:	f7ff ffb2 	bl	d5438 <_ZN5Print11printNumberEmh>
   d54d4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d54d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54da <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d54da:	b538      	push	{r3, r4, r5, lr}
   d54dc:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d54de:	f7ff ffda 	bl	d5496 <_ZN5Print5printEli>
   d54e2:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d54e4:	4628      	mov	r0, r5
   d54e6:	f7ff ff91 	bl	d540c <_ZN5Print7printlnEv>
  return n;
}
   d54ea:	4420      	add	r0, r4
   d54ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54f0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d54f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d54f4:	ec57 6b10 	vmov	r6, r7, d0
   d54f8:	4682      	mov	sl, r0
   d54fa:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d54fc:	ee10 2a10 	vmov	r2, s0
   d5500:	463b      	mov	r3, r7
   d5502:	ee10 0a10 	vmov	r0, s0
   d5506:	4639      	mov	r1, r7
   d5508:	f001 f832 	bl	d6570 <__aeabi_dcmpun>
   d550c:	b108      	cbz	r0, d5512 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d550e:	4948      	ldr	r1, [pc, #288]	; (d5630 <_ZN5Print10printFloatEdh+0x140>)
   d5510:	e012      	b.n	d5538 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5512:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5516:	f04f 32ff 	mov.w	r2, #4294967295
   d551a:	4b46      	ldr	r3, [pc, #280]	; (d5634 <_ZN5Print10printFloatEdh+0x144>)
   d551c:	4630      	mov	r0, r6
   d551e:	4649      	mov	r1, r9
   d5520:	f001 f826 	bl	d6570 <__aeabi_dcmpun>
   d5524:	b968      	cbnz	r0, d5542 <_ZN5Print10printFloatEdh+0x52>
   d5526:	f04f 32ff 	mov.w	r2, #4294967295
   d552a:	4b42      	ldr	r3, [pc, #264]	; (d5634 <_ZN5Print10printFloatEdh+0x144>)
   d552c:	4630      	mov	r0, r6
   d552e:	4649      	mov	r1, r9
   d5530:	f001 f800 	bl	d6534 <__aeabi_dcmple>
   d5534:	b928      	cbnz	r0, d5542 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5536:	4940      	ldr	r1, [pc, #256]	; (d5638 <_ZN5Print10printFloatEdh+0x148>)
   d5538:	4650      	mov	r0, sl
   d553a:	f7ff ff50 	bl	d53de <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5542:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5546:	4b3d      	ldr	r3, [pc, #244]	; (d563c <_ZN5Print10printFloatEdh+0x14c>)
   d5548:	4630      	mov	r0, r6
   d554a:	4639      	mov	r1, r7
   d554c:	f001 f806 	bl	d655c <__aeabi_dcmpgt>
   d5550:	b108      	cbz	r0, d5556 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5552:	493b      	ldr	r1, [pc, #236]	; (d5640 <_ZN5Print10printFloatEdh+0x150>)
   d5554:	e7f0      	b.n	d5538 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5556:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d555a:	4b3a      	ldr	r3, [pc, #232]	; (d5644 <_ZN5Print10printFloatEdh+0x154>)
   d555c:	4630      	mov	r0, r6
   d555e:	4639      	mov	r1, r7
   d5560:	f000 ffde 	bl	d6520 <__aeabi_dcmplt>
   d5564:	2800      	cmp	r0, #0
   d5566:	d1f4      	bne.n	d5552 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5568:	2200      	movs	r2, #0
   d556a:	2300      	movs	r3, #0
   d556c:	4630      	mov	r0, r6
   d556e:	4639      	mov	r1, r7
   d5570:	f000 ffd6 	bl	d6520 <__aeabi_dcmplt>
   d5574:	b140      	cbz	r0, d5588 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5576:	212d      	movs	r1, #45	; 0x2d
   d5578:	4650      	mov	r0, sl
   d557a:	f7ff ff44 	bl	d5406 <_ZN5Print5printEc>
     number = -number;
   d557e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5582:	4604      	mov	r4, r0
     number = -number;
   d5584:	461f      	mov	r7, r3
   d5586:	e000      	b.n	d558a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5588:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d558a:	492f      	ldr	r1, [pc, #188]	; (d5648 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d558c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5590:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5592:	fa5f f388 	uxtb.w	r3, r8
   d5596:	429d      	cmp	r5, r3
   d5598:	d906      	bls.n	d55a8 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d559a:	2200      	movs	r2, #0
   d559c:	4b2b      	ldr	r3, [pc, #172]	; (d564c <_ZN5Print10printFloatEdh+0x15c>)
   d559e:	f000 fe77 	bl	d6290 <__aeabi_ddiv>
   d55a2:	f108 0801 	add.w	r8, r8, #1
   d55a6:	e7f4      	b.n	d5592 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d55a8:	4632      	mov	r2, r6
   d55aa:	463b      	mov	r3, r7
   d55ac:	f000 fb94 	bl	d5cd8 <__adddf3>
   d55b0:	460f      	mov	r7, r1
   d55b2:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d55b4:	f001 f81a 	bl	d65ec <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d55b8:	220a      	movs	r2, #10
   d55ba:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d55bc:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d55be:	4650      	mov	r0, sl
   d55c0:	f7ff ff3a 	bl	d5438 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d55c4:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d55c6:	b37d      	cbz	r5, d5628 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d55c8:	4640      	mov	r0, r8
   d55ca:	f000 fcc1 	bl	d5f50 <__aeabi_ui2d>
   d55ce:	4602      	mov	r2, r0
   d55d0:	460b      	mov	r3, r1
   d55d2:	4630      	mov	r0, r6
   d55d4:	4639      	mov	r1, r7
   d55d6:	f000 fb7d 	bl	d5cd4 <__aeabi_dsub>
   d55da:	4606      	mov	r6, r0
   d55dc:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d55de:	4650      	mov	r0, sl
   d55e0:	491b      	ldr	r1, [pc, #108]	; (d5650 <_ZN5Print10printFloatEdh+0x160>)
   d55e2:	f7ff fefc 	bl	d53de <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d55e6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d55e8:	4b18      	ldr	r3, [pc, #96]	; (d564c <_ZN5Print10printFloatEdh+0x15c>)
   d55ea:	2200      	movs	r2, #0
   d55ec:	4630      	mov	r0, r6
   d55ee:	4639      	mov	r1, r7
   d55f0:	f000 fd24 	bl	d603c <__aeabi_dmul>
   d55f4:	460f      	mov	r7, r1
   d55f6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d55f8:	f000 ffd0 	bl	d659c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d55fc:	220a      	movs	r2, #10
   d55fe:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5600:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5602:	4650      	mov	r0, sl
   d5604:	f7ff ff47 	bl	d5496 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5608:	4404      	add	r4, r0
    remainder -= toPrint;
   d560a:	4640      	mov	r0, r8
   d560c:	f000 fcb0 	bl	d5f70 <__aeabi_i2d>
   d5610:	4602      	mov	r2, r0
   d5612:	460b      	mov	r3, r1
   d5614:	4630      	mov	r0, r6
   d5616:	4639      	mov	r1, r7
   d5618:	f000 fb5c 	bl	d5cd4 <__aeabi_dsub>
   d561c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d561e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5622:	4606      	mov	r6, r0
   d5624:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5626:	d1df      	bne.n	d55e8 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5628:	4620      	mov	r0, r4
   d562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d562e:	bf00      	nop
   d5630:	000d6de0 	.word	0x000d6de0
   d5634:	7fefffff 	.word	0x7fefffff
   d5638:	000d6dea 	.word	0x000d6dea
   d563c:	41efffff 	.word	0x41efffff
   d5640:	000d6de4 	.word	0x000d6de4
   d5644:	c1efffff 	.word	0xc1efffff
   d5648:	3fe00000 	.word	0x3fe00000
   d564c:	40240000 	.word	0x40240000
   d5650:	000d6de8 	.word	0x000d6de8

000d5654 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5654:	b2c9      	uxtb	r1, r1
   d5656:	f7ff bf4b 	b.w	d54f0 <_ZN5Print10printFloatEdh>
	...

000d565c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d565c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5660:	ec59 8b10 	vmov	r8, r9, d0
   d5664:	4607      	mov	r7, r0
   d5666:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d5668:	2200      	movs	r2, #0
   d566a:	2300      	movs	r3, #0
   d566c:	ee10 0a10 	vmov	r0, s0
   d5670:	4649      	mov	r1, r9
   d5672:	f000 ff55 	bl	d6520 <__aeabi_dcmplt>
   d5676:	b128      	cbz	r0, d5684 <_Z4dtoadhPc+0x28>
        val = -val;
   d5678:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d567c:	4699      	mov	r9, r3
        *sout++ = '-';
   d567e:	232d      	movs	r3, #45	; 0x2d
   d5680:	7033      	strb	r3, [r6, #0]
   d5682:	3601      	adds	r6, #1
   d5684:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5686:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5688:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d568a:	b2d9      	uxtb	r1, r3
   d568c:	428f      	cmp	r7, r1
   d568e:	d902      	bls.n	d5696 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5690:	4354      	muls	r4, r2
   d5692:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5694:	e7f9      	b.n	d568a <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d5696:	4620      	mov	r0, r4
   d5698:	f000 fc6a 	bl	d5f70 <__aeabi_i2d>
   d569c:	4642      	mov	r2, r8
   d569e:	464b      	mov	r3, r9
   d56a0:	f000 fccc 	bl	d603c <__aeabi_dmul>
   d56a4:	4682      	mov	sl, r0
   d56a6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d56a8:	f001 f828 	bl	d66fc <__aeabi_d2ulz>
   d56ac:	4680      	mov	r8, r0
   d56ae:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d56b0:	f000 fc8e 	bl	d5fd0 <__aeabi_ul2d>
   d56b4:	4602      	mov	r2, r0
   d56b6:	460b      	mov	r3, r1
   d56b8:	4650      	mov	r0, sl
   d56ba:	4659      	mov	r1, fp
   d56bc:	f000 fb0a 	bl	d5cd4 <__aeabi_dsub>
   d56c0:	2200      	movs	r2, #0
   d56c2:	4b17      	ldr	r3, [pc, #92]	; (d5720 <_Z4dtoadhPc+0xc4>)
   d56c4:	f000 ff40 	bl	d6548 <__aeabi_dcmpge>
   d56c8:	b118      	cbz	r0, d56d2 <_Z4dtoadhPc+0x76>
        fixed++;
   d56ca:	f118 0801 	adds.w	r8, r8, #1
   d56ce:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d56d2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d56d4:	4622      	mov	r2, r4
   d56d6:	462b      	mov	r3, r5
   d56d8:	4640      	mov	r0, r8
   d56da:	4649      	mov	r1, r9
   d56dc:	f000 fff6 	bl	d66cc <__aeabi_uldivmod>
   d56e0:	2301      	movs	r3, #1
   d56e2:	220a      	movs	r2, #10
   d56e4:	4631      	mov	r1, r6
   d56e6:	f000 f8a0 	bl	d582a <ultoa>
    if (prec) {
   d56ea:	b1af      	cbz	r7, d5718 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d56ec:	4630      	mov	r0, r6
   d56ee:	f001 fa02 	bl	d6af6 <strlen>
        *sout++ = '.';
   d56f2:	232e      	movs	r3, #46	; 0x2e
   d56f4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d56f6:	3001      	adds	r0, #1
   d56f8:	4406      	add	r6, r0
   d56fa:	4622      	mov	r2, r4
   d56fc:	462b      	mov	r3, r5
   d56fe:	4640      	mov	r0, r8
   d5700:	4649      	mov	r1, r9
   d5702:	f000 ffe3 	bl	d66cc <__aeabi_uldivmod>
   d5706:	463b      	mov	r3, r7
   d5708:	4610      	mov	r0, r2
   d570a:	4631      	mov	r1, r6
   d570c:	220a      	movs	r2, #10
    }
}
   d570e:	b001      	add	sp, #4
   d5710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d5714:	f000 b889 	b.w	d582a <ultoa>
    }
}
   d5718:	b001      	add	sp, #4
   d571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d571e:	bf00      	nop
   d5720:	3fe00000 	.word	0x3fe00000

000d5724 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5724:	b510      	push	{r4, lr}
   d5726:	4604      	mov	r4, r0
{
	free(buffer);
   d5728:	6800      	ldr	r0, [r0, #0]
   d572a:	f7fe ffb9 	bl	d46a0 <free>
}
   d572e:	4620      	mov	r0, r4
   d5730:	bd10      	pop	{r4, pc}

000d5732 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5732:	b510      	push	{r4, lr}
   d5734:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5736:	6800      	ldr	r0, [r0, #0]
   d5738:	b108      	cbz	r0, d573e <_ZN6String10invalidateEv+0xc>
   d573a:	f7fe ffb1 	bl	d46a0 <free>
	buffer = NULL;
   d573e:	2300      	movs	r3, #0
   d5740:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5742:	60a3      	str	r3, [r4, #8]
   d5744:	6063      	str	r3, [r4, #4]
   d5746:	bd10      	pop	{r4, pc}

000d5748 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5748:	b538      	push	{r3, r4, r5, lr}
   d574a:	4604      	mov	r4, r0
   d574c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d574e:	6800      	ldr	r0, [r0, #0]
   d5750:	3101      	adds	r1, #1
   d5752:	f7fe ffad 	bl	d46b0 <realloc>
	if (newbuffer) {
   d5756:	b110      	cbz	r0, d575e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5758:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d575c:	2001      	movs	r0, #1
	}
	return 0;
}
   d575e:	bd38      	pop	{r3, r4, r5, pc}

000d5760 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5760:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5762:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5764:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5766:	b113      	cbz	r3, d576e <_ZN6String7reserveEj+0xe>
   d5768:	6843      	ldr	r3, [r0, #4]
   d576a:	428b      	cmp	r3, r1
   d576c:	d207      	bcs.n	d577e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d576e:	4620      	mov	r0, r4
   d5770:	f7ff ffea 	bl	d5748 <_ZN6String12changeBufferEj>
   d5774:	b120      	cbz	r0, d5780 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5776:	68a3      	ldr	r3, [r4, #8]
   d5778:	b90b      	cbnz	r3, d577e <_ZN6String7reserveEj+0x1e>
   d577a:	6822      	ldr	r2, [r4, #0]
   d577c:	7013      	strb	r3, [r2, #0]
   d577e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5780:	bd10      	pop	{r4, pc}

000d5782 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5782:	b570      	push	{r4, r5, r6, lr}
   d5784:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5786:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5788:	4604      	mov	r4, r0
   d578a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d578c:	f7ff ffe8 	bl	d5760 <_ZN6String7reserveEj>
   d5790:	b918      	cbnz	r0, d579a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5792:	4620      	mov	r0, r4
   d5794:	f7ff ffcd 	bl	d5732 <_ZN6String10invalidateEv>
		return *this;
   d5798:	e009      	b.n	d57ae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d579a:	462a      	mov	r2, r5
   d579c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d579e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d57a0:	6820      	ldr	r0, [r4, #0]
   d57a2:	f001 f951 	bl	d6a48 <memcpy>
	buffer[len] = 0;
   d57a6:	6822      	ldr	r2, [r4, #0]
   d57a8:	68a3      	ldr	r3, [r4, #8]
   d57aa:	2100      	movs	r1, #0
   d57ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d57ae:	4620      	mov	r0, r4
   d57b0:	bd70      	pop	{r4, r5, r6, pc}

000d57b2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d57b2:	b538      	push	{r3, r4, r5, lr}
   d57b4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d57b6:	460c      	mov	r4, r1
   d57b8:	b141      	cbz	r1, d57cc <_ZN6StringaSEPKc+0x1a>
   d57ba:	4608      	mov	r0, r1
   d57bc:	f001 f99b 	bl	d6af6 <strlen>
   d57c0:	4621      	mov	r1, r4
   d57c2:	4602      	mov	r2, r0
   d57c4:	4628      	mov	r0, r5
   d57c6:	f7ff ffdc 	bl	d5782 <_ZN6String4copyEPKcj>
   d57ca:	e001      	b.n	d57d0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d57cc:	f7ff ffb1 	bl	d5732 <_ZN6String10invalidateEv>

	return *this;
}
   d57d0:	4628      	mov	r0, r5
   d57d2:	bd38      	pop	{r3, r4, r5, pc}

000d57d4 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d57d4:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57d6:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d57d8:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57da:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d57dc:	6043      	str	r3, [r0, #4]
	len = 0;
   d57de:	6083      	str	r3, [r0, #8]
	flags = 0;
   d57e0:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d57e2:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d57e4:	ee10 0a10 	vmov	r0, s0
   d57e8:	b2cd      	uxtb	r5, r1
   d57ea:	f000 fbd3 	bl	d5f94 <__aeabi_f2d>
   d57ee:	ec41 0b10 	vmov	d0, r0, r1
   d57f2:	a901      	add	r1, sp, #4
   d57f4:	4628      	mov	r0, r5
   d57f6:	f7ff ff31 	bl	d565c <_Z4dtoadhPc>
        *this = buf;
   d57fa:	a901      	add	r1, sp, #4
   d57fc:	4620      	mov	r0, r4
   d57fe:	f7ff ffd8 	bl	d57b2 <_ZN6StringaSEPKc>
}
   d5802:	4620      	mov	r0, r4
   d5804:	b00b      	add	sp, #44	; 0x2c
   d5806:	bd30      	pop	{r4, r5, pc}

000d5808 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5808:	b510      	push	{r4, lr}
   d580a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d580c:	f001 f973 	bl	d6af6 <strlen>
   d5810:	3801      	subs	r0, #1
   d5812:	1823      	adds	r3, r4, r0
   d5814:	4620      	mov	r0, r4
	while(i<j){
   d5816:	4298      	cmp	r0, r3
   d5818:	d206      	bcs.n	d5828 <_Z11str_reversePc+0x20>
		c = *i;
   d581a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d581c:	7819      	ldrb	r1, [r3, #0]
   d581e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5822:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5826:	e7f6      	b.n	d5816 <_Z11str_reversePc+0xe>
   d5828:	bd10      	pop	{r4, pc}

000d582a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d582a:	b570      	push	{r4, r5, r6, lr}
   d582c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d582e:	1e91      	subs	r1, r2, #2
   d5830:	2922      	cmp	r1, #34	; 0x22
   d5832:	d820      	bhi.n	d5876 <ultoa+0x4c>
   d5834:	4625      	mov	r5, r4
   d5836:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5838:	b910      	cbnz	r0, d5840 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d583a:	4423      	add	r3, r4
            *ptr++ = '0';
   d583c:	2230      	movs	r2, #48	; 0x30
   d583e:	e00e      	b.n	d585e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5840:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5844:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5848:	b2c1      	uxtb	r1, r0
   d584a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d584e:	2809      	cmp	r0, #9
                *ptr += '0';
   d5850:	bf94      	ite	ls
   d5852:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5854:	3157      	addhi	r1, #87	; 0x57
   d5856:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d585a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d585c:	e7eb      	b.n	d5836 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d585e:	4299      	cmp	r1, r3
   d5860:	d202      	bcs.n	d5868 <ultoa+0x3e>
            *ptr++ = '0';
   d5862:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5866:	e7fa      	b.n	d585e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5868:	2300      	movs	r3, #0
	str_reverse(buffer);
   d586a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d586c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d586e:	f7ff ffcb 	bl	d5808 <_Z11str_reversePc>
	return buffer;
   d5872:	4620      	mov	r0, r4
   d5874:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5876:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5878:	bd70      	pop	{r4, r5, r6, pc}
	...

000d587c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d587c:	4b04      	ldr	r3, [pc, #16]	; (d5890 <_GLOBAL__sub_I_System+0x14>)
   d587e:	2000      	movs	r0, #0
   d5880:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5884:	7018      	strb	r0, [r3, #0]
   d5886:	8058      	strh	r0, [r3, #2]
   d5888:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d588a:	f7fe becd 	b.w	d4628 <set_system_mode>
   d588e:	bf00      	nop
   d5890:	2003e704 	.word	0x2003e704

000d5894 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5894:	2200      	movs	r2, #0
   d5896:	4611      	mov	r1, r2
   d5898:	6840      	ldr	r0, [r0, #4]
   d589a:	f7fe bead 	b.w	d45f8 <network_listening>

000d589e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d589e:	2200      	movs	r2, #0
   d58a0:	4611      	mov	r1, r2
   d58a2:	6840      	ldr	r0, [r0, #4]
   d58a4:	f7fe beb8 	b.w	d4618 <network_get_listen_timeout>

000d58a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58a8:	2200      	movs	r2, #0
   d58aa:	6840      	ldr	r0, [r0, #4]
   d58ac:	f7fe beac 	b.w	d4608 <network_set_listen_timeout>

000d58b0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58b0:	2200      	movs	r2, #0
   d58b2:	f081 0101 	eor.w	r1, r1, #1
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	f7fe be96 	b.w	d45e8 <network_listen>

000d58bc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d58bc:	2300      	movs	r3, #0
   d58be:	461a      	mov	r2, r3
   d58c0:	4619      	mov	r1, r3
   d58c2:	6840      	ldr	r0, [r0, #4]
   d58c4:	f7fe be88 	b.w	d45d8 <network_off>

000d58c8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d58c8:	2300      	movs	r3, #0
   d58ca:	461a      	mov	r2, r3
   d58cc:	4619      	mov	r1, r3
   d58ce:	6840      	ldr	r0, [r0, #4]
   d58d0:	f7fe be7a 	b.w	d45c8 <network_on>

000d58d4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d58d4:	2200      	movs	r2, #0
   d58d6:	4611      	mov	r1, r2
   d58d8:	6840      	ldr	r0, [r0, #4]
   d58da:	f7fe be6d 	b.w	d45b8 <network_ready>

000d58de <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d58de:	2200      	movs	r2, #0
   d58e0:	4611      	mov	r1, r2
   d58e2:	6840      	ldr	r0, [r0, #4]
   d58e4:	f7fe be58 	b.w	d4598 <network_connecting>

000d58e8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58e8:	2200      	movs	r2, #0
   d58ea:	2102      	movs	r1, #2
   d58ec:	6840      	ldr	r0, [r0, #4]
   d58ee:	f7fe be5b 	b.w	d45a8 <network_disconnect>

000d58f2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58f2:	2300      	movs	r3, #0
   d58f4:	461a      	mov	r2, r3
   d58f6:	6840      	ldr	r0, [r0, #4]
   d58f8:	f7fe be46 	b.w	d4588 <network_connect>

000d58fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d58fc:	4b02      	ldr	r3, [pc, #8]	; (d5908 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d58fe:	2203      	movs	r2, #3
   d5900:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5902:	4a02      	ldr	r2, [pc, #8]	; (d590c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5904:	601a      	str	r2, [r3, #0]
   d5906:	4770      	bx	lr
   d5908:	2003e70c 	.word	0x2003e70c
   d590c:	000d6df8 	.word	0x000d6df8

000d5910 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5910:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5912:	4d0b      	ldr	r5, [pc, #44]	; (d5940 <_Z19__fetch_global_Wirev+0x30>)
   d5914:	6829      	ldr	r1, [r5, #0]
   d5916:	f011 0401 	ands.w	r4, r1, #1
   d591a:	d10f      	bne.n	d593c <_Z19__fetch_global_Wirev+0x2c>
   d591c:	4628      	mov	r0, r5
   d591e:	f7fe fbc0 	bl	d40a2 <__cxa_guard_acquire>
   d5922:	b158      	cbz	r0, d593c <_Z19__fetch_global_Wirev+0x2c>
   d5924:	4621      	mov	r1, r4
   d5926:	4807      	ldr	r0, [pc, #28]	; (d5944 <_Z19__fetch_global_Wirev+0x34>)
   d5928:	f7ff f898 	bl	d4a5c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d592c:	4628      	mov	r0, r5
   d592e:	f7fe fbbd 	bl	d40ac <__cxa_guard_release>
   d5932:	4a05      	ldr	r2, [pc, #20]	; (d5948 <_Z19__fetch_global_Wirev+0x38>)
   d5934:	4905      	ldr	r1, [pc, #20]	; (d594c <_Z19__fetch_global_Wirev+0x3c>)
   d5936:	4803      	ldr	r0, [pc, #12]	; (d5944 <_Z19__fetch_global_Wirev+0x34>)
   d5938:	f000 f878 	bl	d5a2c <__aeabi_atexit>
	return wire;
}
   d593c:	4801      	ldr	r0, [pc, #4]	; (d5944 <_Z19__fetch_global_Wirev+0x34>)
   d593e:	bd38      	pop	{r3, r4, r5, pc}
   d5940:	2003e714 	.word	0x2003e714
   d5944:	2003e718 	.word	0x2003e718
   d5948:	2003e3c8 	.word	0x2003e3c8
   d594c:	000d4a07 	.word	0x000d4a07

000d5950 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5950:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5952:	4c0c      	ldr	r4, [pc, #48]	; (d5984 <_GLOBAL__sub_I_SPI+0x34>)
   d5954:	4e0c      	ldr	r6, [pc, #48]	; (d5988 <_GLOBAL__sub_I_SPI+0x38>)
   d5956:	4d0d      	ldr	r5, [pc, #52]	; (d598c <_GLOBAL__sub_I_SPI+0x3c>)
   d5958:	2100      	movs	r1, #0
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff f83c 	bl	d49d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5960:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5962:	4c0b      	ldr	r4, [pc, #44]	; (d5990 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5964:	4632      	mov	r2, r6
   d5966:	4629      	mov	r1, r5
   d5968:	f000 f860 	bl	d5a2c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d596c:	2101      	movs	r1, #1
   d596e:	4620      	mov	r0, r4
   d5970:	f7ff f832 	bl	d49d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5974:	4632      	mov	r2, r6
   d5976:	4629      	mov	r1, r5
   d5978:	4620      	mov	r0, r4
   d597a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d597e:	f000 b855 	b.w	d5a2c <__aeabi_atexit>
   d5982:	bf00      	nop
   d5984:	2003e730 	.word	0x2003e730
   d5988:	2003e3c8 	.word	0x2003e3c8
   d598c:	000d49c9 	.word	0x000d49c9
   d5990:	2003e740 	.word	0x2003e740

000d5994 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5994:	b510      	push	{r4, lr}
   d5996:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5998:	480f      	ldr	r0, [pc, #60]	; (d59d8 <pinAvailable+0x44>)
   d599a:	f7ff f831 	bl	d4a00 <_ZN8SPIClass9isEnabledEv>
   d599e:	b128      	cbz	r0, d59ac <pinAvailable+0x18>
   d59a0:	f1a4 030b 	sub.w	r3, r4, #11
   d59a4:	2b02      	cmp	r3, #2
   d59a6:	d801      	bhi.n	d59ac <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d59a8:	2000      	movs	r0, #0
   d59aa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d59ac:	f7ff ffb0 	bl	d5910 <_Z19__fetch_global_Wirev>
   d59b0:	f7ff f866 	bl	d4a80 <_ZN7TwoWire9isEnabledEv>
   d59b4:	b108      	cbz	r0, d59ba <pinAvailable+0x26>
   d59b6:	2c01      	cmp	r4, #1
   d59b8:	d9f6      	bls.n	d59a8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d59ba:	f7ff f8bd 	bl	d4b38 <_Z22__fetch_global_Serial1v>
   d59be:	f7ff f8b7 	bl	d4b30 <_ZN11USARTSerial9isEnabledEv>
   d59c2:	b118      	cbz	r0, d59cc <pinAvailable+0x38>
   d59c4:	f1a4 0309 	sub.w	r3, r4, #9
   d59c8:	2b01      	cmp	r3, #1
   d59ca:	d9ed      	bls.n	d59a8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d59cc:	2c23      	cmp	r4, #35	; 0x23
   d59ce:	bf8c      	ite	hi
   d59d0:	2000      	movhi	r0, #0
   d59d2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d59d4:	bd10      	pop	{r4, pc}
   d59d6:	bf00      	nop
   d59d8:	2003e730 	.word	0x2003e730

000d59dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d59dc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d59de:	b538      	push	{r3, r4, r5, lr}
   d59e0:	4604      	mov	r4, r0
   d59e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d59e4:	d80a      	bhi.n	d59fc <pinMode+0x20>
   d59e6:	29ff      	cmp	r1, #255	; 0xff
   d59e8:	d008      	beq.n	d59fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d59ea:	f7ff ffd3 	bl	d5994 <pinAvailable>
   d59ee:	b128      	cbz	r0, d59fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d59f0:	4629      	mov	r1, r5
   d59f2:	4620      	mov	r0, r4
}
   d59f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d59f8:	f7fe bd8e 	b.w	d4518 <HAL_Pin_Mode>
   d59fc:	bd38      	pop	{r3, r4, r5, pc}

000d59fe <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d59fe:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5a00:	b510      	push	{r4, lr}
   d5a02:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5a04:	bf9c      	itt	ls
   d5a06:	340e      	addls	r4, #14
   d5a08:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f7ff ffc2 	bl	d5994 <pinAvailable>
   d5a10:	b150      	cbz	r0, d5a28 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5a12:	2103      	movs	r1, #3
   d5a14:	4620      	mov	r0, r4
   d5a16:	f7fe fd77 	bl	d4508 <HAL_Validate_Pin_Function>
   d5a1a:	2803      	cmp	r0, #3
   d5a1c:	d104      	bne.n	d5a28 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5a1e:	4620      	mov	r0, r4
}
   d5a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5a24:	f7fe bd80 	b.w	d4528 <HAL_ADC_Read>
}
   d5a28:	2000      	movs	r0, #0
   d5a2a:	bd10      	pop	{r4, pc}

000d5a2c <__aeabi_atexit>:
   d5a2c:	460b      	mov	r3, r1
   d5a2e:	4601      	mov	r1, r0
   d5a30:	4618      	mov	r0, r3
   d5a32:	f000 bffb 	b.w	d6a2c <__cxa_atexit>

000d5a36 <_ZSt25__throw_bad_function_callv>:
   d5a36:	b508      	push	{r3, lr}
   d5a38:	f7fe fe42 	bl	d46c0 <abort>

000d5a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a3c:	4b18      	ldr	r3, [pc, #96]	; (d5aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d1      	lsls	r1, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b16      	ldr	r3, [pc, #88]	; (d5aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d2      	lsls	r2, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b14      	ldr	r3, [pc, #80]	; (d5aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d0      	lsls	r0, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b12      	ldr	r3, [pc, #72]	; (d5aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d1      	lsls	r1, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4b10      	ldr	r3, [pc, #64]	; (d5ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a6e:	681a      	ldr	r2, [r3, #0]
   d5a70:	07d2      	lsls	r2, r2, #31
   d5a72:	bf5c      	itt	pl
   d5a74:	2201      	movpl	r2, #1
   d5a76:	601a      	strpl	r2, [r3, #0]
   d5a78:	4b0e      	ldr	r3, [pc, #56]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a7a:	681a      	ldr	r2, [r3, #0]
   d5a7c:	07d0      	lsls	r0, r2, #31
   d5a7e:	bf5c      	itt	pl
   d5a80:	2201      	movpl	r2, #1
   d5a82:	601a      	strpl	r2, [r3, #0]
   d5a84:	4b0c      	ldr	r3, [pc, #48]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	07d1      	lsls	r1, r2, #31
   d5a8a:	bf5c      	itt	pl
   d5a8c:	2201      	movpl	r2, #1
   d5a8e:	601a      	strpl	r2, [r3, #0]
   d5a90:	4b0a      	ldr	r3, [pc, #40]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a92:	681a      	ldr	r2, [r3, #0]
   d5a94:	07d2      	lsls	r2, r2, #31
   d5a96:	bf5c      	itt	pl
   d5a98:	2201      	movpl	r2, #1
   d5a9a:	601a      	strpl	r2, [r3, #0]
   d5a9c:	4770      	bx	lr
   d5a9e:	bf00      	nop
   d5aa0:	2003e76c 	.word	0x2003e76c
   d5aa4:	2003e768 	.word	0x2003e768
   d5aa8:	2003e764 	.word	0x2003e764
   d5aac:	2003e760 	.word	0x2003e760
   d5ab0:	2003e75c 	.word	0x2003e75c
   d5ab4:	2003e758 	.word	0x2003e758
   d5ab8:	2003e754 	.word	0x2003e754
   d5abc:	2003e750 	.word	0x2003e750

000d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ac0:	4b24      	ldr	r3, [pc, #144]	; (d5b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ac2:	681a      	ldr	r2, [r3, #0]
   d5ac4:	07d0      	lsls	r0, r2, #31
   d5ac6:	bf5c      	itt	pl
   d5ac8:	2201      	movpl	r2, #1
   d5aca:	601a      	strpl	r2, [r3, #0]
   d5acc:	4b22      	ldr	r3, [pc, #136]	; (d5b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ace:	681a      	ldr	r2, [r3, #0]
   d5ad0:	07d1      	lsls	r1, r2, #31
   d5ad2:	bf5c      	itt	pl
   d5ad4:	2201      	movpl	r2, #1
   d5ad6:	601a      	strpl	r2, [r3, #0]
   d5ad8:	4b20      	ldr	r3, [pc, #128]	; (d5b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5ada:	681a      	ldr	r2, [r3, #0]
   d5adc:	07d2      	lsls	r2, r2, #31
   d5ade:	bf5c      	itt	pl
   d5ae0:	2201      	movpl	r2, #1
   d5ae2:	601a      	strpl	r2, [r3, #0]
   d5ae4:	4b1e      	ldr	r3, [pc, #120]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d0      	lsls	r0, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b1c      	ldr	r3, [pc, #112]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d1      	lsls	r1, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b1a      	ldr	r3, [pc, #104]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d2      	lsls	r2, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b18      	ldr	r3, [pc, #96]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d0      	lsls	r0, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b16      	ldr	r3, [pc, #88]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d1      	lsls	r1, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b14      	ldr	r3, [pc, #80]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d2      	lsls	r2, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b12      	ldr	r3, [pc, #72]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d0      	lsls	r0, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b10      	ldr	r3, [pc, #64]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d1      	lsls	r1, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b0e      	ldr	r3, [pc, #56]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d2      	lsls	r2, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4770      	bx	lr
   d5b52:	bf00      	nop
   d5b54:	2003e79c 	.word	0x2003e79c
   d5b58:	2003e798 	.word	0x2003e798
   d5b5c:	2003e794 	.word	0x2003e794
   d5b60:	2003e790 	.word	0x2003e790
   d5b64:	2003e78c 	.word	0x2003e78c
   d5b68:	2003e788 	.word	0x2003e788
   d5b6c:	2003e784 	.word	0x2003e784
   d5b70:	2003e780 	.word	0x2003e780
   d5b74:	2003e77c 	.word	0x2003e77c
   d5b78:	2003e778 	.word	0x2003e778
   d5b7c:	2003e774 	.word	0x2003e774
   d5b80:	2003e770 	.word	0x2003e770

000d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5b84:	4b24      	ldr	r3, [pc, #144]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d0      	lsls	r0, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b22      	ldr	r3, [pc, #136]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d1      	lsls	r1, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b20      	ldr	r3, [pc, #128]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d2      	lsls	r2, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b1e      	ldr	r3, [pc, #120]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d0      	lsls	r0, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b1c      	ldr	r3, [pc, #112]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d1      	lsls	r1, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b1a      	ldr	r3, [pc, #104]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d2      	lsls	r2, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b18      	ldr	r3, [pc, #96]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d0      	lsls	r0, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b16      	ldr	r3, [pc, #88]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d1      	lsls	r1, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b14      	ldr	r3, [pc, #80]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d2      	lsls	r2, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b12      	ldr	r3, [pc, #72]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d0      	lsls	r0, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b10      	ldr	r3, [pc, #64]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d1      	lsls	r1, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4b0e      	ldr	r3, [pc, #56]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5c0a:	681a      	ldr	r2, [r3, #0]
   d5c0c:	07d2      	lsls	r2, r2, #31
   d5c0e:	bf5c      	itt	pl
   d5c10:	2201      	movpl	r2, #1
   d5c12:	601a      	strpl	r2, [r3, #0]
   d5c14:	4770      	bx	lr
   d5c16:	bf00      	nop
   d5c18:	2003e7cc 	.word	0x2003e7cc
   d5c1c:	2003e7c8 	.word	0x2003e7c8
   d5c20:	2003e7c4 	.word	0x2003e7c4
   d5c24:	2003e7c0 	.word	0x2003e7c0
   d5c28:	2003e7bc 	.word	0x2003e7bc
   d5c2c:	2003e7b8 	.word	0x2003e7b8
   d5c30:	2003e7b4 	.word	0x2003e7b4
   d5c34:	2003e7b0 	.word	0x2003e7b0
   d5c38:	2003e7ac 	.word	0x2003e7ac
   d5c3c:	2003e7a8 	.word	0x2003e7a8
   d5c40:	2003e7a4 	.word	0x2003e7a4
   d5c44:	2003e7a0 	.word	0x2003e7a0

000d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c48:	4b18      	ldr	r3, [pc, #96]	; (d5cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d1      	lsls	r1, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b16      	ldr	r3, [pc, #88]	; (d5cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d2      	lsls	r2, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4b14      	ldr	r3, [pc, #80]	; (d5cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d0      	lsls	r0, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b12      	ldr	r3, [pc, #72]	; (d5cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d1      	lsls	r1, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b10      	ldr	r3, [pc, #64]	; (d5cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d2      	lsls	r2, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b0e      	ldr	r3, [pc, #56]	; (d5cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d0      	lsls	r0, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b0c      	ldr	r3, [pc, #48]	; (d5cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d1      	lsls	r1, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4b0a      	ldr	r3, [pc, #40]	; (d5cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c9e:	681a      	ldr	r2, [r3, #0]
   d5ca0:	07d2      	lsls	r2, r2, #31
   d5ca2:	bf5c      	itt	pl
   d5ca4:	2201      	movpl	r2, #1
   d5ca6:	601a      	strpl	r2, [r3, #0]
   d5ca8:	4770      	bx	lr
   d5caa:	bf00      	nop
   d5cac:	2003e7ec 	.word	0x2003e7ec
   d5cb0:	2003e7e8 	.word	0x2003e7e8
   d5cb4:	2003e7e4 	.word	0x2003e7e4
   d5cb8:	2003e7e0 	.word	0x2003e7e0
   d5cbc:	2003e7dc 	.word	0x2003e7dc
   d5cc0:	2003e7d8 	.word	0x2003e7d8
   d5cc4:	2003e7d4 	.word	0x2003e7d4
   d5cc8:	2003e7d0 	.word	0x2003e7d0

000d5ccc <__aeabi_drsub>:
   d5ccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5cd0:	e002      	b.n	d5cd8 <__adddf3>
   d5cd2:	bf00      	nop

000d5cd4 <__aeabi_dsub>:
   d5cd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5cd8 <__adddf3>:
   d5cd8:	b530      	push	{r4, r5, lr}
   d5cda:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5cde:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ce2:	ea94 0f05 	teq	r4, r5
   d5ce6:	bf08      	it	eq
   d5ce8:	ea90 0f02 	teqeq	r0, r2
   d5cec:	bf1f      	itttt	ne
   d5cee:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5cf2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5cf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5cfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5cfe:	f000 80e2 	beq.w	d5ec6 <__adddf3+0x1ee>
   d5d02:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5d06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5d0a:	bfb8      	it	lt
   d5d0c:	426d      	neglt	r5, r5
   d5d0e:	dd0c      	ble.n	d5d2a <__adddf3+0x52>
   d5d10:	442c      	add	r4, r5
   d5d12:	ea80 0202 	eor.w	r2, r0, r2
   d5d16:	ea81 0303 	eor.w	r3, r1, r3
   d5d1a:	ea82 0000 	eor.w	r0, r2, r0
   d5d1e:	ea83 0101 	eor.w	r1, r3, r1
   d5d22:	ea80 0202 	eor.w	r2, r0, r2
   d5d26:	ea81 0303 	eor.w	r3, r1, r3
   d5d2a:	2d36      	cmp	r5, #54	; 0x36
   d5d2c:	bf88      	it	hi
   d5d2e:	bd30      	pophi	{r4, r5, pc}
   d5d30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5d3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5d40:	d002      	beq.n	d5d48 <__adddf3+0x70>
   d5d42:	4240      	negs	r0, r0
   d5d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5d48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5d54:	d002      	beq.n	d5d5c <__adddf3+0x84>
   d5d56:	4252      	negs	r2, r2
   d5d58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5d5c:	ea94 0f05 	teq	r4, r5
   d5d60:	f000 80a7 	beq.w	d5eb2 <__adddf3+0x1da>
   d5d64:	f1a4 0401 	sub.w	r4, r4, #1
   d5d68:	f1d5 0e20 	rsbs	lr, r5, #32
   d5d6c:	db0d      	blt.n	d5d8a <__adddf3+0xb2>
   d5d6e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5d72:	fa22 f205 	lsr.w	r2, r2, r5
   d5d76:	1880      	adds	r0, r0, r2
   d5d78:	f141 0100 	adc.w	r1, r1, #0
   d5d7c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5d80:	1880      	adds	r0, r0, r2
   d5d82:	fa43 f305 	asr.w	r3, r3, r5
   d5d86:	4159      	adcs	r1, r3
   d5d88:	e00e      	b.n	d5da8 <__adddf3+0xd0>
   d5d8a:	f1a5 0520 	sub.w	r5, r5, #32
   d5d8e:	f10e 0e20 	add.w	lr, lr, #32
   d5d92:	2a01      	cmp	r2, #1
   d5d94:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5d98:	bf28      	it	cs
   d5d9a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5d9e:	fa43 f305 	asr.w	r3, r3, r5
   d5da2:	18c0      	adds	r0, r0, r3
   d5da4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5dac:	d507      	bpl.n	d5dbe <__adddf3+0xe6>
   d5dae:	f04f 0e00 	mov.w	lr, #0
   d5db2:	f1dc 0c00 	rsbs	ip, ip, #0
   d5db6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5dba:	eb6e 0101 	sbc.w	r1, lr, r1
   d5dbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5dc2:	d31b      	bcc.n	d5dfc <__adddf3+0x124>
   d5dc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5dc8:	d30c      	bcc.n	d5de4 <__adddf3+0x10c>
   d5dca:	0849      	lsrs	r1, r1, #1
   d5dcc:	ea5f 0030 	movs.w	r0, r0, rrx
   d5dd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5dd4:	f104 0401 	add.w	r4, r4, #1
   d5dd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5ddc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5de0:	f080 809a 	bcs.w	d5f18 <__adddf3+0x240>
   d5de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5de8:	bf08      	it	eq
   d5dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5dee:	f150 0000 	adcs.w	r0, r0, #0
   d5df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5df6:	ea41 0105 	orr.w	r1, r1, r5
   d5dfa:	bd30      	pop	{r4, r5, pc}
   d5dfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5e00:	4140      	adcs	r0, r0
   d5e02:	eb41 0101 	adc.w	r1, r1, r1
   d5e06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e0a:	f1a4 0401 	sub.w	r4, r4, #1
   d5e0e:	d1e9      	bne.n	d5de4 <__adddf3+0x10c>
   d5e10:	f091 0f00 	teq	r1, #0
   d5e14:	bf04      	itt	eq
   d5e16:	4601      	moveq	r1, r0
   d5e18:	2000      	moveq	r0, #0
   d5e1a:	fab1 f381 	clz	r3, r1
   d5e1e:	bf08      	it	eq
   d5e20:	3320      	addeq	r3, #32
   d5e22:	f1a3 030b 	sub.w	r3, r3, #11
   d5e26:	f1b3 0220 	subs.w	r2, r3, #32
   d5e2a:	da0c      	bge.n	d5e46 <__adddf3+0x16e>
   d5e2c:	320c      	adds	r2, #12
   d5e2e:	dd08      	ble.n	d5e42 <__adddf3+0x16a>
   d5e30:	f102 0c14 	add.w	ip, r2, #20
   d5e34:	f1c2 020c 	rsb	r2, r2, #12
   d5e38:	fa01 f00c 	lsl.w	r0, r1, ip
   d5e3c:	fa21 f102 	lsr.w	r1, r1, r2
   d5e40:	e00c      	b.n	d5e5c <__adddf3+0x184>
   d5e42:	f102 0214 	add.w	r2, r2, #20
   d5e46:	bfd8      	it	le
   d5e48:	f1c2 0c20 	rsble	ip, r2, #32
   d5e4c:	fa01 f102 	lsl.w	r1, r1, r2
   d5e50:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5e54:	bfdc      	itt	le
   d5e56:	ea41 010c 	orrle.w	r1, r1, ip
   d5e5a:	4090      	lslle	r0, r2
   d5e5c:	1ae4      	subs	r4, r4, r3
   d5e5e:	bfa2      	ittt	ge
   d5e60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5e64:	4329      	orrge	r1, r5
   d5e66:	bd30      	popge	{r4, r5, pc}
   d5e68:	ea6f 0404 	mvn.w	r4, r4
   d5e6c:	3c1f      	subs	r4, #31
   d5e6e:	da1c      	bge.n	d5eaa <__adddf3+0x1d2>
   d5e70:	340c      	adds	r4, #12
   d5e72:	dc0e      	bgt.n	d5e92 <__adddf3+0x1ba>
   d5e74:	f104 0414 	add.w	r4, r4, #20
   d5e78:	f1c4 0220 	rsb	r2, r4, #32
   d5e7c:	fa20 f004 	lsr.w	r0, r0, r4
   d5e80:	fa01 f302 	lsl.w	r3, r1, r2
   d5e84:	ea40 0003 	orr.w	r0, r0, r3
   d5e88:	fa21 f304 	lsr.w	r3, r1, r4
   d5e8c:	ea45 0103 	orr.w	r1, r5, r3
   d5e90:	bd30      	pop	{r4, r5, pc}
   d5e92:	f1c4 040c 	rsb	r4, r4, #12
   d5e96:	f1c4 0220 	rsb	r2, r4, #32
   d5e9a:	fa20 f002 	lsr.w	r0, r0, r2
   d5e9e:	fa01 f304 	lsl.w	r3, r1, r4
   d5ea2:	ea40 0003 	orr.w	r0, r0, r3
   d5ea6:	4629      	mov	r1, r5
   d5ea8:	bd30      	pop	{r4, r5, pc}
   d5eaa:	fa21 f004 	lsr.w	r0, r1, r4
   d5eae:	4629      	mov	r1, r5
   d5eb0:	bd30      	pop	{r4, r5, pc}
   d5eb2:	f094 0f00 	teq	r4, #0
   d5eb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5eba:	bf06      	itte	eq
   d5ebc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5ec0:	3401      	addeq	r4, #1
   d5ec2:	3d01      	subne	r5, #1
   d5ec4:	e74e      	b.n	d5d64 <__adddf3+0x8c>
   d5ec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5eca:	bf18      	it	ne
   d5ecc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ed0:	d029      	beq.n	d5f26 <__adddf3+0x24e>
   d5ed2:	ea94 0f05 	teq	r4, r5
   d5ed6:	bf08      	it	eq
   d5ed8:	ea90 0f02 	teqeq	r0, r2
   d5edc:	d005      	beq.n	d5eea <__adddf3+0x212>
   d5ede:	ea54 0c00 	orrs.w	ip, r4, r0
   d5ee2:	bf04      	itt	eq
   d5ee4:	4619      	moveq	r1, r3
   d5ee6:	4610      	moveq	r0, r2
   d5ee8:	bd30      	pop	{r4, r5, pc}
   d5eea:	ea91 0f03 	teq	r1, r3
   d5eee:	bf1e      	ittt	ne
   d5ef0:	2100      	movne	r1, #0
   d5ef2:	2000      	movne	r0, #0
   d5ef4:	bd30      	popne	{r4, r5, pc}
   d5ef6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5efa:	d105      	bne.n	d5f08 <__adddf3+0x230>
   d5efc:	0040      	lsls	r0, r0, #1
   d5efe:	4149      	adcs	r1, r1
   d5f00:	bf28      	it	cs
   d5f02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5f06:	bd30      	pop	{r4, r5, pc}
   d5f08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5f0c:	bf3c      	itt	cc
   d5f0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5f12:	bd30      	popcc	{r4, r5, pc}
   d5f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5f1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5f20:	f04f 0000 	mov.w	r0, #0
   d5f24:	bd30      	pop	{r4, r5, pc}
   d5f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5f2a:	bf1a      	itte	ne
   d5f2c:	4619      	movne	r1, r3
   d5f2e:	4610      	movne	r0, r2
   d5f30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5f34:	bf1c      	itt	ne
   d5f36:	460b      	movne	r3, r1
   d5f38:	4602      	movne	r2, r0
   d5f3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f3e:	bf06      	itte	eq
   d5f40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5f44:	ea91 0f03 	teqeq	r1, r3
   d5f48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5f4c:	bd30      	pop	{r4, r5, pc}
   d5f4e:	bf00      	nop

000d5f50 <__aeabi_ui2d>:
   d5f50:	f090 0f00 	teq	r0, #0
   d5f54:	bf04      	itt	eq
   d5f56:	2100      	moveq	r1, #0
   d5f58:	4770      	bxeq	lr
   d5f5a:	b530      	push	{r4, r5, lr}
   d5f5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f64:	f04f 0500 	mov.w	r5, #0
   d5f68:	f04f 0100 	mov.w	r1, #0
   d5f6c:	e750      	b.n	d5e10 <__adddf3+0x138>
   d5f6e:	bf00      	nop

000d5f70 <__aeabi_i2d>:
   d5f70:	f090 0f00 	teq	r0, #0
   d5f74:	bf04      	itt	eq
   d5f76:	2100      	moveq	r1, #0
   d5f78:	4770      	bxeq	lr
   d5f7a:	b530      	push	{r4, r5, lr}
   d5f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5f88:	bf48      	it	mi
   d5f8a:	4240      	negmi	r0, r0
   d5f8c:	f04f 0100 	mov.w	r1, #0
   d5f90:	e73e      	b.n	d5e10 <__adddf3+0x138>
   d5f92:	bf00      	nop

000d5f94 <__aeabi_f2d>:
   d5f94:	0042      	lsls	r2, r0, #1
   d5f96:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5f9a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5f9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5fa2:	bf1f      	itttt	ne
   d5fa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5fb0:	4770      	bxne	lr
   d5fb2:	f092 0f00 	teq	r2, #0
   d5fb6:	bf14      	ite	ne
   d5fb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5fbc:	4770      	bxeq	lr
   d5fbe:	b530      	push	{r4, r5, lr}
   d5fc0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5fc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fcc:	e720      	b.n	d5e10 <__adddf3+0x138>
   d5fce:	bf00      	nop

000d5fd0 <__aeabi_ul2d>:
   d5fd0:	ea50 0201 	orrs.w	r2, r0, r1
   d5fd4:	bf08      	it	eq
   d5fd6:	4770      	bxeq	lr
   d5fd8:	b530      	push	{r4, r5, lr}
   d5fda:	f04f 0500 	mov.w	r5, #0
   d5fde:	e00a      	b.n	d5ff6 <__aeabi_l2d+0x16>

000d5fe0 <__aeabi_l2d>:
   d5fe0:	ea50 0201 	orrs.w	r2, r0, r1
   d5fe4:	bf08      	it	eq
   d5fe6:	4770      	bxeq	lr
   d5fe8:	b530      	push	{r4, r5, lr}
   d5fea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5fee:	d502      	bpl.n	d5ff6 <__aeabi_l2d+0x16>
   d5ff0:	4240      	negs	r0, r0
   d5ff2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ff6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ffa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ffe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6002:	f43f aedc 	beq.w	d5dbe <__adddf3+0xe6>
   d6006:	f04f 0203 	mov.w	r2, #3
   d600a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d600e:	bf18      	it	ne
   d6010:	3203      	addne	r2, #3
   d6012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6016:	bf18      	it	ne
   d6018:	3203      	addne	r2, #3
   d601a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d601e:	f1c2 0320 	rsb	r3, r2, #32
   d6022:	fa00 fc03 	lsl.w	ip, r0, r3
   d6026:	fa20 f002 	lsr.w	r0, r0, r2
   d602a:	fa01 fe03 	lsl.w	lr, r1, r3
   d602e:	ea40 000e 	orr.w	r0, r0, lr
   d6032:	fa21 f102 	lsr.w	r1, r1, r2
   d6036:	4414      	add	r4, r2
   d6038:	e6c1      	b.n	d5dbe <__adddf3+0xe6>
   d603a:	bf00      	nop

000d603c <__aeabi_dmul>:
   d603c:	b570      	push	{r4, r5, r6, lr}
   d603e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d604a:	bf1d      	ittte	ne
   d604c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6050:	ea94 0f0c 	teqne	r4, ip
   d6054:	ea95 0f0c 	teqne	r5, ip
   d6058:	f000 f8de 	bleq	d6218 <__aeabi_dmul+0x1dc>
   d605c:	442c      	add	r4, r5
   d605e:	ea81 0603 	eor.w	r6, r1, r3
   d6062:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6066:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d606a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d606e:	bf18      	it	ne
   d6070:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6074:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d607c:	d038      	beq.n	d60f0 <__aeabi_dmul+0xb4>
   d607e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6082:	f04f 0500 	mov.w	r5, #0
   d6086:	fbe1 e502 	umlal	lr, r5, r1, r2
   d608a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d608e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6092:	f04f 0600 	mov.w	r6, #0
   d6096:	fbe1 5603 	umlal	r5, r6, r1, r3
   d609a:	f09c 0f00 	teq	ip, #0
   d609e:	bf18      	it	ne
   d60a0:	f04e 0e01 	orrne.w	lr, lr, #1
   d60a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d60a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d60ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d60b0:	d204      	bcs.n	d60bc <__aeabi_dmul+0x80>
   d60b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d60b6:	416d      	adcs	r5, r5
   d60b8:	eb46 0606 	adc.w	r6, r6, r6
   d60bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d60c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d60c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d60c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d60cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d60d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d60d4:	bf88      	it	hi
   d60d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d60da:	d81e      	bhi.n	d611a <__aeabi_dmul+0xde>
   d60dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d60e0:	bf08      	it	eq
   d60e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d60e6:	f150 0000 	adcs.w	r0, r0, #0
   d60ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d60ee:	bd70      	pop	{r4, r5, r6, pc}
   d60f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d60f4:	ea46 0101 	orr.w	r1, r6, r1
   d60f8:	ea40 0002 	orr.w	r0, r0, r2
   d60fc:	ea81 0103 	eor.w	r1, r1, r3
   d6100:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6104:	bfc2      	ittt	gt
   d6106:	ebd4 050c 	rsbsgt	r5, r4, ip
   d610a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d610e:	bd70      	popgt	{r4, r5, r6, pc}
   d6110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6114:	f04f 0e00 	mov.w	lr, #0
   d6118:	3c01      	subs	r4, #1
   d611a:	f300 80ab 	bgt.w	d6274 <__aeabi_dmul+0x238>
   d611e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6122:	bfde      	ittt	le
   d6124:	2000      	movle	r0, #0
   d6126:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d612a:	bd70      	pople	{r4, r5, r6, pc}
   d612c:	f1c4 0400 	rsb	r4, r4, #0
   d6130:	3c20      	subs	r4, #32
   d6132:	da35      	bge.n	d61a0 <__aeabi_dmul+0x164>
   d6134:	340c      	adds	r4, #12
   d6136:	dc1b      	bgt.n	d6170 <__aeabi_dmul+0x134>
   d6138:	f104 0414 	add.w	r4, r4, #20
   d613c:	f1c4 0520 	rsb	r5, r4, #32
   d6140:	fa00 f305 	lsl.w	r3, r0, r5
   d6144:	fa20 f004 	lsr.w	r0, r0, r4
   d6148:	fa01 f205 	lsl.w	r2, r1, r5
   d614c:	ea40 0002 	orr.w	r0, r0, r2
   d6150:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6154:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6158:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d615c:	fa21 f604 	lsr.w	r6, r1, r4
   d6160:	eb42 0106 	adc.w	r1, r2, r6
   d6164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6168:	bf08      	it	eq
   d616a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d616e:	bd70      	pop	{r4, r5, r6, pc}
   d6170:	f1c4 040c 	rsb	r4, r4, #12
   d6174:	f1c4 0520 	rsb	r5, r4, #32
   d6178:	fa00 f304 	lsl.w	r3, r0, r4
   d617c:	fa20 f005 	lsr.w	r0, r0, r5
   d6180:	fa01 f204 	lsl.w	r2, r1, r4
   d6184:	ea40 0002 	orr.w	r0, r0, r2
   d6188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d618c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6190:	f141 0100 	adc.w	r1, r1, #0
   d6194:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6198:	bf08      	it	eq
   d619a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d619e:	bd70      	pop	{r4, r5, r6, pc}
   d61a0:	f1c4 0520 	rsb	r5, r4, #32
   d61a4:	fa00 f205 	lsl.w	r2, r0, r5
   d61a8:	ea4e 0e02 	orr.w	lr, lr, r2
   d61ac:	fa20 f304 	lsr.w	r3, r0, r4
   d61b0:	fa01 f205 	lsl.w	r2, r1, r5
   d61b4:	ea43 0302 	orr.w	r3, r3, r2
   d61b8:	fa21 f004 	lsr.w	r0, r1, r4
   d61bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61c0:	fa21 f204 	lsr.w	r2, r1, r4
   d61c4:	ea20 0002 	bic.w	r0, r0, r2
   d61c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d61cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d61d0:	bf08      	it	eq
   d61d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d61d6:	bd70      	pop	{r4, r5, r6, pc}
   d61d8:	f094 0f00 	teq	r4, #0
   d61dc:	d10f      	bne.n	d61fe <__aeabi_dmul+0x1c2>
   d61de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d61e2:	0040      	lsls	r0, r0, #1
   d61e4:	eb41 0101 	adc.w	r1, r1, r1
   d61e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d61ec:	bf08      	it	eq
   d61ee:	3c01      	subeq	r4, #1
   d61f0:	d0f7      	beq.n	d61e2 <__aeabi_dmul+0x1a6>
   d61f2:	ea41 0106 	orr.w	r1, r1, r6
   d61f6:	f095 0f00 	teq	r5, #0
   d61fa:	bf18      	it	ne
   d61fc:	4770      	bxne	lr
   d61fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6202:	0052      	lsls	r2, r2, #1
   d6204:	eb43 0303 	adc.w	r3, r3, r3
   d6208:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d620c:	bf08      	it	eq
   d620e:	3d01      	subeq	r5, #1
   d6210:	d0f7      	beq.n	d6202 <__aeabi_dmul+0x1c6>
   d6212:	ea43 0306 	orr.w	r3, r3, r6
   d6216:	4770      	bx	lr
   d6218:	ea94 0f0c 	teq	r4, ip
   d621c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6220:	bf18      	it	ne
   d6222:	ea95 0f0c 	teqne	r5, ip
   d6226:	d00c      	beq.n	d6242 <__aeabi_dmul+0x206>
   d6228:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d622c:	bf18      	it	ne
   d622e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6232:	d1d1      	bne.n	d61d8 <__aeabi_dmul+0x19c>
   d6234:	ea81 0103 	eor.w	r1, r1, r3
   d6238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d623c:	f04f 0000 	mov.w	r0, #0
   d6240:	bd70      	pop	{r4, r5, r6, pc}
   d6242:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6246:	bf06      	itte	eq
   d6248:	4610      	moveq	r0, r2
   d624a:	4619      	moveq	r1, r3
   d624c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6250:	d019      	beq.n	d6286 <__aeabi_dmul+0x24a>
   d6252:	ea94 0f0c 	teq	r4, ip
   d6256:	d102      	bne.n	d625e <__aeabi_dmul+0x222>
   d6258:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d625c:	d113      	bne.n	d6286 <__aeabi_dmul+0x24a>
   d625e:	ea95 0f0c 	teq	r5, ip
   d6262:	d105      	bne.n	d6270 <__aeabi_dmul+0x234>
   d6264:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6268:	bf1c      	itt	ne
   d626a:	4610      	movne	r0, r2
   d626c:	4619      	movne	r1, r3
   d626e:	d10a      	bne.n	d6286 <__aeabi_dmul+0x24a>
   d6270:	ea81 0103 	eor.w	r1, r1, r3
   d6274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6278:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d627c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6280:	f04f 0000 	mov.w	r0, #0
   d6284:	bd70      	pop	{r4, r5, r6, pc}
   d6286:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d628a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d628e:	bd70      	pop	{r4, r5, r6, pc}

000d6290 <__aeabi_ddiv>:
   d6290:	b570      	push	{r4, r5, r6, lr}
   d6292:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d629a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d629e:	bf1d      	ittte	ne
   d62a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d62a4:	ea94 0f0c 	teqne	r4, ip
   d62a8:	ea95 0f0c 	teqne	r5, ip
   d62ac:	f000 f8a7 	bleq	d63fe <__aeabi_ddiv+0x16e>
   d62b0:	eba4 0405 	sub.w	r4, r4, r5
   d62b4:	ea81 0e03 	eor.w	lr, r1, r3
   d62b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62c0:	f000 8088 	beq.w	d63d4 <__aeabi_ddiv+0x144>
   d62c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d62cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d62d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d62d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d62d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d62dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d62e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d62e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d62e8:	429d      	cmp	r5, r3
   d62ea:	bf08      	it	eq
   d62ec:	4296      	cmpeq	r6, r2
   d62ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d62f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d62f6:	d202      	bcs.n	d62fe <__aeabi_ddiv+0x6e>
   d62f8:	085b      	lsrs	r3, r3, #1
   d62fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d62fe:	1ab6      	subs	r6, r6, r2
   d6300:	eb65 0503 	sbc.w	r5, r5, r3
   d6304:	085b      	lsrs	r3, r3, #1
   d6306:	ea4f 0232 	mov.w	r2, r2, rrx
   d630a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d630e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6312:	ebb6 0e02 	subs.w	lr, r6, r2
   d6316:	eb75 0e03 	sbcs.w	lr, r5, r3
   d631a:	bf22      	ittt	cs
   d631c:	1ab6      	subcs	r6, r6, r2
   d631e:	4675      	movcs	r5, lr
   d6320:	ea40 000c 	orrcs.w	r0, r0, ip
   d6324:	085b      	lsrs	r3, r3, #1
   d6326:	ea4f 0232 	mov.w	r2, r2, rrx
   d632a:	ebb6 0e02 	subs.w	lr, r6, r2
   d632e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6332:	bf22      	ittt	cs
   d6334:	1ab6      	subcs	r6, r6, r2
   d6336:	4675      	movcs	r5, lr
   d6338:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d633c:	085b      	lsrs	r3, r3, #1
   d633e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6342:	ebb6 0e02 	subs.w	lr, r6, r2
   d6346:	eb75 0e03 	sbcs.w	lr, r5, r3
   d634a:	bf22      	ittt	cs
   d634c:	1ab6      	subcs	r6, r6, r2
   d634e:	4675      	movcs	r5, lr
   d6350:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6354:	085b      	lsrs	r3, r3, #1
   d6356:	ea4f 0232 	mov.w	r2, r2, rrx
   d635a:	ebb6 0e02 	subs.w	lr, r6, r2
   d635e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6362:	bf22      	ittt	cs
   d6364:	1ab6      	subcs	r6, r6, r2
   d6366:	4675      	movcs	r5, lr
   d6368:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d636c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6370:	d018      	beq.n	d63a4 <__aeabi_ddiv+0x114>
   d6372:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6376:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d637a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d637e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6382:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6386:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d638a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d638e:	d1c0      	bne.n	d6312 <__aeabi_ddiv+0x82>
   d6390:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6394:	d10b      	bne.n	d63ae <__aeabi_ddiv+0x11e>
   d6396:	ea41 0100 	orr.w	r1, r1, r0
   d639a:	f04f 0000 	mov.w	r0, #0
   d639e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d63a2:	e7b6      	b.n	d6312 <__aeabi_ddiv+0x82>
   d63a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63a8:	bf04      	itt	eq
   d63aa:	4301      	orreq	r1, r0
   d63ac:	2000      	moveq	r0, #0
   d63ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63b2:	bf88      	it	hi
   d63b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63b8:	f63f aeaf 	bhi.w	d611a <__aeabi_dmul+0xde>
   d63bc:	ebb5 0c03 	subs.w	ip, r5, r3
   d63c0:	bf04      	itt	eq
   d63c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d63c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d63ca:	f150 0000 	adcs.w	r0, r0, #0
   d63ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d63d2:	bd70      	pop	{r4, r5, r6, pc}
   d63d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d63d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d63dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d63e0:	bfc2      	ittt	gt
   d63e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d63e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d63ea:	bd70      	popgt	{r4, r5, r6, pc}
   d63ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63f0:	f04f 0e00 	mov.w	lr, #0
   d63f4:	3c01      	subs	r4, #1
   d63f6:	e690      	b.n	d611a <__aeabi_dmul+0xde>
   d63f8:	ea45 0e06 	orr.w	lr, r5, r6
   d63fc:	e68d      	b.n	d611a <__aeabi_dmul+0xde>
   d63fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6402:	ea94 0f0c 	teq	r4, ip
   d6406:	bf08      	it	eq
   d6408:	ea95 0f0c 	teqeq	r5, ip
   d640c:	f43f af3b 	beq.w	d6286 <__aeabi_dmul+0x24a>
   d6410:	ea94 0f0c 	teq	r4, ip
   d6414:	d10a      	bne.n	d642c <__aeabi_ddiv+0x19c>
   d6416:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d641a:	f47f af34 	bne.w	d6286 <__aeabi_dmul+0x24a>
   d641e:	ea95 0f0c 	teq	r5, ip
   d6422:	f47f af25 	bne.w	d6270 <__aeabi_dmul+0x234>
   d6426:	4610      	mov	r0, r2
   d6428:	4619      	mov	r1, r3
   d642a:	e72c      	b.n	d6286 <__aeabi_dmul+0x24a>
   d642c:	ea95 0f0c 	teq	r5, ip
   d6430:	d106      	bne.n	d6440 <__aeabi_ddiv+0x1b0>
   d6432:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6436:	f43f aefd 	beq.w	d6234 <__aeabi_dmul+0x1f8>
   d643a:	4610      	mov	r0, r2
   d643c:	4619      	mov	r1, r3
   d643e:	e722      	b.n	d6286 <__aeabi_dmul+0x24a>
   d6440:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6444:	bf18      	it	ne
   d6446:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d644a:	f47f aec5 	bne.w	d61d8 <__aeabi_dmul+0x19c>
   d644e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6452:	f47f af0d 	bne.w	d6270 <__aeabi_dmul+0x234>
   d6456:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d645a:	f47f aeeb 	bne.w	d6234 <__aeabi_dmul+0x1f8>
   d645e:	e712      	b.n	d6286 <__aeabi_dmul+0x24a>

000d6460 <__gedf2>:
   d6460:	f04f 3cff 	mov.w	ip, #4294967295
   d6464:	e006      	b.n	d6474 <__cmpdf2+0x4>
   d6466:	bf00      	nop

000d6468 <__ledf2>:
   d6468:	f04f 0c01 	mov.w	ip, #1
   d646c:	e002      	b.n	d6474 <__cmpdf2+0x4>
   d646e:	bf00      	nop

000d6470 <__cmpdf2>:
   d6470:	f04f 0c01 	mov.w	ip, #1
   d6474:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6478:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d647c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6484:	bf18      	it	ne
   d6486:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d648a:	d01b      	beq.n	d64c4 <__cmpdf2+0x54>
   d648c:	b001      	add	sp, #4
   d648e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6492:	bf0c      	ite	eq
   d6494:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6498:	ea91 0f03 	teqne	r1, r3
   d649c:	bf02      	ittt	eq
   d649e:	ea90 0f02 	teqeq	r0, r2
   d64a2:	2000      	moveq	r0, #0
   d64a4:	4770      	bxeq	lr
   d64a6:	f110 0f00 	cmn.w	r0, #0
   d64aa:	ea91 0f03 	teq	r1, r3
   d64ae:	bf58      	it	pl
   d64b0:	4299      	cmppl	r1, r3
   d64b2:	bf08      	it	eq
   d64b4:	4290      	cmpeq	r0, r2
   d64b6:	bf2c      	ite	cs
   d64b8:	17d8      	asrcs	r0, r3, #31
   d64ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d64be:	f040 0001 	orr.w	r0, r0, #1
   d64c2:	4770      	bx	lr
   d64c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d64c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64cc:	d102      	bne.n	d64d4 <__cmpdf2+0x64>
   d64ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d64d2:	d107      	bne.n	d64e4 <__cmpdf2+0x74>
   d64d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d64d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d64dc:	d1d6      	bne.n	d648c <__cmpdf2+0x1c>
   d64de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d64e2:	d0d3      	beq.n	d648c <__cmpdf2+0x1c>
   d64e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d64e8:	4770      	bx	lr
   d64ea:	bf00      	nop

000d64ec <__aeabi_cdrcmple>:
   d64ec:	4684      	mov	ip, r0
   d64ee:	4610      	mov	r0, r2
   d64f0:	4662      	mov	r2, ip
   d64f2:	468c      	mov	ip, r1
   d64f4:	4619      	mov	r1, r3
   d64f6:	4663      	mov	r3, ip
   d64f8:	e000      	b.n	d64fc <__aeabi_cdcmpeq>
   d64fa:	bf00      	nop

000d64fc <__aeabi_cdcmpeq>:
   d64fc:	b501      	push	{r0, lr}
   d64fe:	f7ff ffb7 	bl	d6470 <__cmpdf2>
   d6502:	2800      	cmp	r0, #0
   d6504:	bf48      	it	mi
   d6506:	f110 0f00 	cmnmi.w	r0, #0
   d650a:	bd01      	pop	{r0, pc}

000d650c <__aeabi_dcmpeq>:
   d650c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6510:	f7ff fff4 	bl	d64fc <__aeabi_cdcmpeq>
   d6514:	bf0c      	ite	eq
   d6516:	2001      	moveq	r0, #1
   d6518:	2000      	movne	r0, #0
   d651a:	f85d fb08 	ldr.w	pc, [sp], #8
   d651e:	bf00      	nop

000d6520 <__aeabi_dcmplt>:
   d6520:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6524:	f7ff ffea 	bl	d64fc <__aeabi_cdcmpeq>
   d6528:	bf34      	ite	cc
   d652a:	2001      	movcc	r0, #1
   d652c:	2000      	movcs	r0, #0
   d652e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6532:	bf00      	nop

000d6534 <__aeabi_dcmple>:
   d6534:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6538:	f7ff ffe0 	bl	d64fc <__aeabi_cdcmpeq>
   d653c:	bf94      	ite	ls
   d653e:	2001      	movls	r0, #1
   d6540:	2000      	movhi	r0, #0
   d6542:	f85d fb08 	ldr.w	pc, [sp], #8
   d6546:	bf00      	nop

000d6548 <__aeabi_dcmpge>:
   d6548:	f84d ed08 	str.w	lr, [sp, #-8]!
   d654c:	f7ff ffce 	bl	d64ec <__aeabi_cdrcmple>
   d6550:	bf94      	ite	ls
   d6552:	2001      	movls	r0, #1
   d6554:	2000      	movhi	r0, #0
   d6556:	f85d fb08 	ldr.w	pc, [sp], #8
   d655a:	bf00      	nop

000d655c <__aeabi_dcmpgt>:
   d655c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6560:	f7ff ffc4 	bl	d64ec <__aeabi_cdrcmple>
   d6564:	bf34      	ite	cc
   d6566:	2001      	movcc	r0, #1
   d6568:	2000      	movcs	r0, #0
   d656a:	f85d fb08 	ldr.w	pc, [sp], #8
   d656e:	bf00      	nop

000d6570 <__aeabi_dcmpun>:
   d6570:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6578:	d102      	bne.n	d6580 <__aeabi_dcmpun+0x10>
   d657a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d657e:	d10a      	bne.n	d6596 <__aeabi_dcmpun+0x26>
   d6580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6588:	d102      	bne.n	d6590 <__aeabi_dcmpun+0x20>
   d658a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d658e:	d102      	bne.n	d6596 <__aeabi_dcmpun+0x26>
   d6590:	f04f 0000 	mov.w	r0, #0
   d6594:	4770      	bx	lr
   d6596:	f04f 0001 	mov.w	r0, #1
   d659a:	4770      	bx	lr

000d659c <__aeabi_d2iz>:
   d659c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d65a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d65a4:	d215      	bcs.n	d65d2 <__aeabi_d2iz+0x36>
   d65a6:	d511      	bpl.n	d65cc <__aeabi_d2iz+0x30>
   d65a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d65ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d65b0:	d912      	bls.n	d65d8 <__aeabi_d2iz+0x3c>
   d65b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d65b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d65ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d65be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d65c2:	fa23 f002 	lsr.w	r0, r3, r2
   d65c6:	bf18      	it	ne
   d65c8:	4240      	negne	r0, r0
   d65ca:	4770      	bx	lr
   d65cc:	f04f 0000 	mov.w	r0, #0
   d65d0:	4770      	bx	lr
   d65d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d65d6:	d105      	bne.n	d65e4 <__aeabi_d2iz+0x48>
   d65d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d65dc:	bf08      	it	eq
   d65de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d65e2:	4770      	bx	lr
   d65e4:	f04f 0000 	mov.w	r0, #0
   d65e8:	4770      	bx	lr
   d65ea:	bf00      	nop

000d65ec <__aeabi_d2uiz>:
   d65ec:	004a      	lsls	r2, r1, #1
   d65ee:	d211      	bcs.n	d6614 <__aeabi_d2uiz+0x28>
   d65f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d65f4:	d211      	bcs.n	d661a <__aeabi_d2uiz+0x2e>
   d65f6:	d50d      	bpl.n	d6614 <__aeabi_d2uiz+0x28>
   d65f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d65fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6600:	d40e      	bmi.n	d6620 <__aeabi_d2uiz+0x34>
   d6602:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d660a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d660e:	fa23 f002 	lsr.w	r0, r3, r2
   d6612:	4770      	bx	lr
   d6614:	f04f 0000 	mov.w	r0, #0
   d6618:	4770      	bx	lr
   d661a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d661e:	d102      	bne.n	d6626 <__aeabi_d2uiz+0x3a>
   d6620:	f04f 30ff 	mov.w	r0, #4294967295
   d6624:	4770      	bx	lr
   d6626:	f04f 0000 	mov.w	r0, #0
   d662a:	4770      	bx	lr

000d662c <__aeabi_d2f>:
   d662c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6630:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6634:	bf24      	itt	cs
   d6636:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d663a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d663e:	d90d      	bls.n	d665c <__aeabi_d2f+0x30>
   d6640:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6644:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6648:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d664c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6650:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6654:	bf08      	it	eq
   d6656:	f020 0001 	biceq.w	r0, r0, #1
   d665a:	4770      	bx	lr
   d665c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6660:	d121      	bne.n	d66a6 <__aeabi_d2f+0x7a>
   d6662:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6666:	bfbc      	itt	lt
   d6668:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d666c:	4770      	bxlt	lr
   d666e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6672:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6676:	f1c2 0218 	rsb	r2, r2, #24
   d667a:	f1c2 0c20 	rsb	ip, r2, #32
   d667e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6682:	fa20 f002 	lsr.w	r0, r0, r2
   d6686:	bf18      	it	ne
   d6688:	f040 0001 	orrne.w	r0, r0, #1
   d668c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6690:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6694:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6698:	ea40 000c 	orr.w	r0, r0, ip
   d669c:	fa23 f302 	lsr.w	r3, r3, r2
   d66a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d66a4:	e7cc      	b.n	d6640 <__aeabi_d2f+0x14>
   d66a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d66aa:	d107      	bne.n	d66bc <__aeabi_d2f+0x90>
   d66ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d66b0:	bf1e      	ittt	ne
   d66b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d66b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d66ba:	4770      	bxne	lr
   d66bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d66c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d66c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d66c8:	4770      	bx	lr
   d66ca:	bf00      	nop

000d66cc <__aeabi_uldivmod>:
   d66cc:	b953      	cbnz	r3, d66e4 <__aeabi_uldivmod+0x18>
   d66ce:	b94a      	cbnz	r2, d66e4 <__aeabi_uldivmod+0x18>
   d66d0:	2900      	cmp	r1, #0
   d66d2:	bf08      	it	eq
   d66d4:	2800      	cmpeq	r0, #0
   d66d6:	bf1c      	itt	ne
   d66d8:	f04f 31ff 	movne.w	r1, #4294967295
   d66dc:	f04f 30ff 	movne.w	r0, #4294967295
   d66e0:	f000 b9a2 	b.w	d6a28 <__aeabi_idiv0>
   d66e4:	f1ad 0c08 	sub.w	ip, sp, #8
   d66e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d66ec:	f000 f82a 	bl	d6744 <__udivmoddi4>
   d66f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d66f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d66f8:	b004      	add	sp, #16
   d66fa:	4770      	bx	lr

000d66fc <__aeabi_d2ulz>:
   d66fc:	b5d0      	push	{r4, r6, r7, lr}
   d66fe:	2200      	movs	r2, #0
   d6700:	4b0e      	ldr	r3, [pc, #56]	; (d673c <__aeabi_d2ulz+0x40>)
   d6702:	4606      	mov	r6, r0
   d6704:	460f      	mov	r7, r1
   d6706:	f7ff fc99 	bl	d603c <__aeabi_dmul>
   d670a:	f7ff ff6f 	bl	d65ec <__aeabi_d2uiz>
   d670e:	4604      	mov	r4, r0
   d6710:	f7ff fc1e 	bl	d5f50 <__aeabi_ui2d>
   d6714:	2200      	movs	r2, #0
   d6716:	4b0a      	ldr	r3, [pc, #40]	; (d6740 <__aeabi_d2ulz+0x44>)
   d6718:	f7ff fc90 	bl	d603c <__aeabi_dmul>
   d671c:	4602      	mov	r2, r0
   d671e:	460b      	mov	r3, r1
   d6720:	4630      	mov	r0, r6
   d6722:	4639      	mov	r1, r7
   d6724:	f7ff fad6 	bl	d5cd4 <__aeabi_dsub>
   d6728:	f7ff ff60 	bl	d65ec <__aeabi_d2uiz>
   d672c:	4623      	mov	r3, r4
   d672e:	2200      	movs	r2, #0
   d6730:	ea42 0200 	orr.w	r2, r2, r0
   d6734:	4610      	mov	r0, r2
   d6736:	4619      	mov	r1, r3
   d6738:	bdd0      	pop	{r4, r6, r7, pc}
   d673a:	bf00      	nop
   d673c:	3df00000 	.word	0x3df00000
   d6740:	41f00000 	.word	0x41f00000

000d6744 <__udivmoddi4>:
   d6744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6748:	468c      	mov	ip, r1
   d674a:	460e      	mov	r6, r1
   d674c:	4604      	mov	r4, r0
   d674e:	9d08      	ldr	r5, [sp, #32]
   d6750:	2b00      	cmp	r3, #0
   d6752:	d150      	bne.n	d67f6 <__udivmoddi4+0xb2>
   d6754:	428a      	cmp	r2, r1
   d6756:	4617      	mov	r7, r2
   d6758:	d96c      	bls.n	d6834 <__udivmoddi4+0xf0>
   d675a:	fab2 fe82 	clz	lr, r2
   d675e:	f1be 0f00 	cmp.w	lr, #0
   d6762:	d00b      	beq.n	d677c <__udivmoddi4+0x38>
   d6764:	f1ce 0420 	rsb	r4, lr, #32
   d6768:	fa20 f404 	lsr.w	r4, r0, r4
   d676c:	fa01 f60e 	lsl.w	r6, r1, lr
   d6770:	ea44 0c06 	orr.w	ip, r4, r6
   d6774:	fa02 f70e 	lsl.w	r7, r2, lr
   d6778:	fa00 f40e 	lsl.w	r4, r0, lr
   d677c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6780:	0c22      	lsrs	r2, r4, #16
   d6782:	fbbc f0f9 	udiv	r0, ip, r9
   d6786:	fa1f f887 	uxth.w	r8, r7
   d678a:	fb09 c610 	mls	r6, r9, r0, ip
   d678e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6792:	fb00 f308 	mul.w	r3, r0, r8
   d6796:	42b3      	cmp	r3, r6
   d6798:	d909      	bls.n	d67ae <__udivmoddi4+0x6a>
   d679a:	19f6      	adds	r6, r6, r7
   d679c:	f100 32ff 	add.w	r2, r0, #4294967295
   d67a0:	f080 8122 	bcs.w	d69e8 <__udivmoddi4+0x2a4>
   d67a4:	42b3      	cmp	r3, r6
   d67a6:	f240 811f 	bls.w	d69e8 <__udivmoddi4+0x2a4>
   d67aa:	3802      	subs	r0, #2
   d67ac:	443e      	add	r6, r7
   d67ae:	1af6      	subs	r6, r6, r3
   d67b0:	b2a2      	uxth	r2, r4
   d67b2:	fbb6 f3f9 	udiv	r3, r6, r9
   d67b6:	fb09 6613 	mls	r6, r9, r3, r6
   d67ba:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d67be:	fb03 f808 	mul.w	r8, r3, r8
   d67c2:	45a0      	cmp	r8, r4
   d67c4:	d909      	bls.n	d67da <__udivmoddi4+0x96>
   d67c6:	19e4      	adds	r4, r4, r7
   d67c8:	f103 32ff 	add.w	r2, r3, #4294967295
   d67cc:	f080 810a 	bcs.w	d69e4 <__udivmoddi4+0x2a0>
   d67d0:	45a0      	cmp	r8, r4
   d67d2:	f240 8107 	bls.w	d69e4 <__udivmoddi4+0x2a0>
   d67d6:	3b02      	subs	r3, #2
   d67d8:	443c      	add	r4, r7
   d67da:	ebc8 0404 	rsb	r4, r8, r4
   d67de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d67e2:	2100      	movs	r1, #0
   d67e4:	2d00      	cmp	r5, #0
   d67e6:	d062      	beq.n	d68ae <__udivmoddi4+0x16a>
   d67e8:	fa24 f40e 	lsr.w	r4, r4, lr
   d67ec:	2300      	movs	r3, #0
   d67ee:	602c      	str	r4, [r5, #0]
   d67f0:	606b      	str	r3, [r5, #4]
   d67f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67f6:	428b      	cmp	r3, r1
   d67f8:	d907      	bls.n	d680a <__udivmoddi4+0xc6>
   d67fa:	2d00      	cmp	r5, #0
   d67fc:	d055      	beq.n	d68aa <__udivmoddi4+0x166>
   d67fe:	2100      	movs	r1, #0
   d6800:	e885 0041 	stmia.w	r5, {r0, r6}
   d6804:	4608      	mov	r0, r1
   d6806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d680a:	fab3 f183 	clz	r1, r3
   d680e:	2900      	cmp	r1, #0
   d6810:	f040 8090 	bne.w	d6934 <__udivmoddi4+0x1f0>
   d6814:	42b3      	cmp	r3, r6
   d6816:	d302      	bcc.n	d681e <__udivmoddi4+0xda>
   d6818:	4282      	cmp	r2, r0
   d681a:	f200 80f8 	bhi.w	d6a0e <__udivmoddi4+0x2ca>
   d681e:	1a84      	subs	r4, r0, r2
   d6820:	eb66 0603 	sbc.w	r6, r6, r3
   d6824:	2001      	movs	r0, #1
   d6826:	46b4      	mov	ip, r6
   d6828:	2d00      	cmp	r5, #0
   d682a:	d040      	beq.n	d68ae <__udivmoddi4+0x16a>
   d682c:	e885 1010 	stmia.w	r5, {r4, ip}
   d6830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6834:	b912      	cbnz	r2, d683c <__udivmoddi4+0xf8>
   d6836:	2701      	movs	r7, #1
   d6838:	fbb7 f7f2 	udiv	r7, r7, r2
   d683c:	fab7 fe87 	clz	lr, r7
   d6840:	f1be 0f00 	cmp.w	lr, #0
   d6844:	d135      	bne.n	d68b2 <__udivmoddi4+0x16e>
   d6846:	1bf3      	subs	r3, r6, r7
   d6848:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d684c:	fa1f fc87 	uxth.w	ip, r7
   d6850:	2101      	movs	r1, #1
   d6852:	fbb3 f0f8 	udiv	r0, r3, r8
   d6856:	0c22      	lsrs	r2, r4, #16
   d6858:	fb08 3610 	mls	r6, r8, r0, r3
   d685c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6860:	fb0c f300 	mul.w	r3, ip, r0
   d6864:	42b3      	cmp	r3, r6
   d6866:	d907      	bls.n	d6878 <__udivmoddi4+0x134>
   d6868:	19f6      	adds	r6, r6, r7
   d686a:	f100 32ff 	add.w	r2, r0, #4294967295
   d686e:	d202      	bcs.n	d6876 <__udivmoddi4+0x132>
   d6870:	42b3      	cmp	r3, r6
   d6872:	f200 80ce 	bhi.w	d6a12 <__udivmoddi4+0x2ce>
   d6876:	4610      	mov	r0, r2
   d6878:	1af6      	subs	r6, r6, r3
   d687a:	b2a2      	uxth	r2, r4
   d687c:	fbb6 f3f8 	udiv	r3, r6, r8
   d6880:	fb08 6613 	mls	r6, r8, r3, r6
   d6884:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6888:	fb0c fc03 	mul.w	ip, ip, r3
   d688c:	45a4      	cmp	ip, r4
   d688e:	d907      	bls.n	d68a0 <__udivmoddi4+0x15c>
   d6890:	19e4      	adds	r4, r4, r7
   d6892:	f103 32ff 	add.w	r2, r3, #4294967295
   d6896:	d202      	bcs.n	d689e <__udivmoddi4+0x15a>
   d6898:	45a4      	cmp	ip, r4
   d689a:	f200 80b5 	bhi.w	d6a08 <__udivmoddi4+0x2c4>
   d689e:	4613      	mov	r3, r2
   d68a0:	ebcc 0404 	rsb	r4, ip, r4
   d68a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d68a8:	e79c      	b.n	d67e4 <__udivmoddi4+0xa0>
   d68aa:	4629      	mov	r1, r5
   d68ac:	4628      	mov	r0, r5
   d68ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68b2:	f1ce 0120 	rsb	r1, lr, #32
   d68b6:	fa06 f30e 	lsl.w	r3, r6, lr
   d68ba:	fa07 f70e 	lsl.w	r7, r7, lr
   d68be:	fa20 f901 	lsr.w	r9, r0, r1
   d68c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d68c6:	40ce      	lsrs	r6, r1
   d68c8:	ea49 0903 	orr.w	r9, r9, r3
   d68cc:	fbb6 faf8 	udiv	sl, r6, r8
   d68d0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d68d4:	fb08 661a 	mls	r6, r8, sl, r6
   d68d8:	fa1f fc87 	uxth.w	ip, r7
   d68dc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d68e0:	fb0a f20c 	mul.w	r2, sl, ip
   d68e4:	429a      	cmp	r2, r3
   d68e6:	fa00 f40e 	lsl.w	r4, r0, lr
   d68ea:	d90a      	bls.n	d6902 <__udivmoddi4+0x1be>
   d68ec:	19db      	adds	r3, r3, r7
   d68ee:	f10a 31ff 	add.w	r1, sl, #4294967295
   d68f2:	f080 8087 	bcs.w	d6a04 <__udivmoddi4+0x2c0>
   d68f6:	429a      	cmp	r2, r3
   d68f8:	f240 8084 	bls.w	d6a04 <__udivmoddi4+0x2c0>
   d68fc:	f1aa 0a02 	sub.w	sl, sl, #2
   d6900:	443b      	add	r3, r7
   d6902:	1a9b      	subs	r3, r3, r2
   d6904:	fa1f f989 	uxth.w	r9, r9
   d6908:	fbb3 f1f8 	udiv	r1, r3, r8
   d690c:	fb08 3311 	mls	r3, r8, r1, r3
   d6910:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6914:	fb01 f60c 	mul.w	r6, r1, ip
   d6918:	429e      	cmp	r6, r3
   d691a:	d907      	bls.n	d692c <__udivmoddi4+0x1e8>
   d691c:	19db      	adds	r3, r3, r7
   d691e:	f101 32ff 	add.w	r2, r1, #4294967295
   d6922:	d26b      	bcs.n	d69fc <__udivmoddi4+0x2b8>
   d6924:	429e      	cmp	r6, r3
   d6926:	d969      	bls.n	d69fc <__udivmoddi4+0x2b8>
   d6928:	3902      	subs	r1, #2
   d692a:	443b      	add	r3, r7
   d692c:	1b9b      	subs	r3, r3, r6
   d692e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d6932:	e78e      	b.n	d6852 <__udivmoddi4+0x10e>
   d6934:	f1c1 0e20 	rsb	lr, r1, #32
   d6938:	fa22 f40e 	lsr.w	r4, r2, lr
   d693c:	408b      	lsls	r3, r1
   d693e:	4323      	orrs	r3, r4
   d6940:	fa20 f70e 	lsr.w	r7, r0, lr
   d6944:	fa06 f401 	lsl.w	r4, r6, r1
   d6948:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d694c:	fa26 f60e 	lsr.w	r6, r6, lr
   d6950:	433c      	orrs	r4, r7
   d6952:	fbb6 f9fc 	udiv	r9, r6, ip
   d6956:	0c27      	lsrs	r7, r4, #16
   d6958:	fb0c 6619 	mls	r6, ip, r9, r6
   d695c:	fa1f f883 	uxth.w	r8, r3
   d6960:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6964:	fb09 f708 	mul.w	r7, r9, r8
   d6968:	42b7      	cmp	r7, r6
   d696a:	fa02 f201 	lsl.w	r2, r2, r1
   d696e:	fa00 fa01 	lsl.w	sl, r0, r1
   d6972:	d908      	bls.n	d6986 <__udivmoddi4+0x242>
   d6974:	18f6      	adds	r6, r6, r3
   d6976:	f109 30ff 	add.w	r0, r9, #4294967295
   d697a:	d241      	bcs.n	d6a00 <__udivmoddi4+0x2bc>
   d697c:	42b7      	cmp	r7, r6
   d697e:	d93f      	bls.n	d6a00 <__udivmoddi4+0x2bc>
   d6980:	f1a9 0902 	sub.w	r9, r9, #2
   d6984:	441e      	add	r6, r3
   d6986:	1bf6      	subs	r6, r6, r7
   d6988:	b2a0      	uxth	r0, r4
   d698a:	fbb6 f4fc 	udiv	r4, r6, ip
   d698e:	fb0c 6614 	mls	r6, ip, r4, r6
   d6992:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6996:	fb04 f808 	mul.w	r8, r4, r8
   d699a:	45b8      	cmp	r8, r7
   d699c:	d907      	bls.n	d69ae <__udivmoddi4+0x26a>
   d699e:	18ff      	adds	r7, r7, r3
   d69a0:	f104 30ff 	add.w	r0, r4, #4294967295
   d69a4:	d228      	bcs.n	d69f8 <__udivmoddi4+0x2b4>
   d69a6:	45b8      	cmp	r8, r7
   d69a8:	d926      	bls.n	d69f8 <__udivmoddi4+0x2b4>
   d69aa:	3c02      	subs	r4, #2
   d69ac:	441f      	add	r7, r3
   d69ae:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d69b2:	ebc8 0707 	rsb	r7, r8, r7
   d69b6:	fba0 8902 	umull	r8, r9, r0, r2
   d69ba:	454f      	cmp	r7, r9
   d69bc:	4644      	mov	r4, r8
   d69be:	464e      	mov	r6, r9
   d69c0:	d314      	bcc.n	d69ec <__udivmoddi4+0x2a8>
   d69c2:	d029      	beq.n	d6a18 <__udivmoddi4+0x2d4>
   d69c4:	b365      	cbz	r5, d6a20 <__udivmoddi4+0x2dc>
   d69c6:	ebba 0304 	subs.w	r3, sl, r4
   d69ca:	eb67 0706 	sbc.w	r7, r7, r6
   d69ce:	fa07 fe0e 	lsl.w	lr, r7, lr
   d69d2:	40cb      	lsrs	r3, r1
   d69d4:	40cf      	lsrs	r7, r1
   d69d6:	ea4e 0303 	orr.w	r3, lr, r3
   d69da:	e885 0088 	stmia.w	r5, {r3, r7}
   d69de:	2100      	movs	r1, #0
   d69e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69e4:	4613      	mov	r3, r2
   d69e6:	e6f8      	b.n	d67da <__udivmoddi4+0x96>
   d69e8:	4610      	mov	r0, r2
   d69ea:	e6e0      	b.n	d67ae <__udivmoddi4+0x6a>
   d69ec:	ebb8 0402 	subs.w	r4, r8, r2
   d69f0:	eb69 0603 	sbc.w	r6, r9, r3
   d69f4:	3801      	subs	r0, #1
   d69f6:	e7e5      	b.n	d69c4 <__udivmoddi4+0x280>
   d69f8:	4604      	mov	r4, r0
   d69fa:	e7d8      	b.n	d69ae <__udivmoddi4+0x26a>
   d69fc:	4611      	mov	r1, r2
   d69fe:	e795      	b.n	d692c <__udivmoddi4+0x1e8>
   d6a00:	4681      	mov	r9, r0
   d6a02:	e7c0      	b.n	d6986 <__udivmoddi4+0x242>
   d6a04:	468a      	mov	sl, r1
   d6a06:	e77c      	b.n	d6902 <__udivmoddi4+0x1be>
   d6a08:	3b02      	subs	r3, #2
   d6a0a:	443c      	add	r4, r7
   d6a0c:	e748      	b.n	d68a0 <__udivmoddi4+0x15c>
   d6a0e:	4608      	mov	r0, r1
   d6a10:	e70a      	b.n	d6828 <__udivmoddi4+0xe4>
   d6a12:	3802      	subs	r0, #2
   d6a14:	443e      	add	r6, r7
   d6a16:	e72f      	b.n	d6878 <__udivmoddi4+0x134>
   d6a18:	45c2      	cmp	sl, r8
   d6a1a:	d3e7      	bcc.n	d69ec <__udivmoddi4+0x2a8>
   d6a1c:	463e      	mov	r6, r7
   d6a1e:	e7d1      	b.n	d69c4 <__udivmoddi4+0x280>
   d6a20:	4629      	mov	r1, r5
   d6a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a26:	bf00      	nop

000d6a28 <__aeabi_idiv0>:
   d6a28:	4770      	bx	lr
   d6a2a:	bf00      	nop

000d6a2c <__cxa_atexit>:
   d6a2c:	b510      	push	{r4, lr}
   d6a2e:	4c05      	ldr	r4, [pc, #20]	; (d6a44 <__cxa_atexit+0x18>)
   d6a30:	4613      	mov	r3, r2
   d6a32:	b12c      	cbz	r4, d6a40 <__cxa_atexit+0x14>
   d6a34:	460a      	mov	r2, r1
   d6a36:	4601      	mov	r1, r0
   d6a38:	2002      	movs	r0, #2
   d6a3a:	f3af 8000 	nop.w
   d6a3e:	bd10      	pop	{r4, pc}
   d6a40:	4620      	mov	r0, r4
   d6a42:	bd10      	pop	{r4, pc}
   d6a44:	00000000 	.word	0x00000000

000d6a48 <memcpy>:
   d6a48:	b510      	push	{r4, lr}
   d6a4a:	1e43      	subs	r3, r0, #1
   d6a4c:	440a      	add	r2, r1
   d6a4e:	4291      	cmp	r1, r2
   d6a50:	d004      	beq.n	d6a5c <memcpy+0x14>
   d6a52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6a56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6a5a:	e7f8      	b.n	d6a4e <memcpy+0x6>
   d6a5c:	bd10      	pop	{r4, pc}

000d6a5e <memset>:
   d6a5e:	4402      	add	r2, r0
   d6a60:	4603      	mov	r3, r0
   d6a62:	4293      	cmp	r3, r2
   d6a64:	d002      	beq.n	d6a6c <memset+0xe>
   d6a66:	f803 1b01 	strb.w	r1, [r3], #1
   d6a6a:	e7fa      	b.n	d6a62 <memset+0x4>
   d6a6c:	4770      	bx	lr
	...

000d6a70 <srand>:
   d6a70:	b538      	push	{r3, r4, r5, lr}
   d6a72:	4b12      	ldr	r3, [pc, #72]	; (d6abc <srand+0x4c>)
   d6a74:	681c      	ldr	r4, [r3, #0]
   d6a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a78:	4605      	mov	r5, r0
   d6a7a:	b9d3      	cbnz	r3, d6ab2 <srand+0x42>
   d6a7c:	2018      	movs	r0, #24
   d6a7e:	f7fd fe07 	bl	d4690 <malloc>
   d6a82:	f243 330e 	movw	r3, #13070	; 0x330e
   d6a86:	63a0      	str	r0, [r4, #56]	; 0x38
   d6a88:	8003      	strh	r3, [r0, #0]
   d6a8a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6a8e:	8043      	strh	r3, [r0, #2]
   d6a90:	f241 2334 	movw	r3, #4660	; 0x1234
   d6a94:	8083      	strh	r3, [r0, #4]
   d6a96:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6a9a:	80c3      	strh	r3, [r0, #6]
   d6a9c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6aa0:	8103      	strh	r3, [r0, #8]
   d6aa2:	2305      	movs	r3, #5
   d6aa4:	8143      	strh	r3, [r0, #10]
   d6aa6:	230b      	movs	r3, #11
   d6aa8:	8183      	strh	r3, [r0, #12]
   d6aaa:	2201      	movs	r2, #1
   d6aac:	2300      	movs	r3, #0
   d6aae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6ab4:	2200      	movs	r2, #0
   d6ab6:	611d      	str	r5, [r3, #16]
   d6ab8:	615a      	str	r2, [r3, #20]
   d6aba:	bd38      	pop	{r3, r4, r5, pc}
   d6abc:	2003e3c4 	.word	0x2003e3c4

000d6ac0 <strdup>:
   d6ac0:	4b02      	ldr	r3, [pc, #8]	; (d6acc <strdup+0xc>)
   d6ac2:	4601      	mov	r1, r0
   d6ac4:	6818      	ldr	r0, [r3, #0]
   d6ac6:	f000 b803 	b.w	d6ad0 <_strdup_r>
   d6aca:	bf00      	nop
   d6acc:	2003e3c4 	.word	0x2003e3c4

000d6ad0 <_strdup_r>:
   d6ad0:	b570      	push	{r4, r5, r6, lr}
   d6ad2:	4606      	mov	r6, r0
   d6ad4:	4608      	mov	r0, r1
   d6ad6:	460c      	mov	r4, r1
   d6ad8:	f000 f80d 	bl	d6af6 <strlen>
   d6adc:	1c45      	adds	r5, r0, #1
   d6ade:	4629      	mov	r1, r5
   d6ae0:	4630      	mov	r0, r6
   d6ae2:	f7fd fdf5 	bl	d46d0 <_malloc_r>
   d6ae6:	4606      	mov	r6, r0
   d6ae8:	b118      	cbz	r0, d6af2 <_strdup_r+0x22>
   d6aea:	462a      	mov	r2, r5
   d6aec:	4621      	mov	r1, r4
   d6aee:	f7ff ffab 	bl	d6a48 <memcpy>
   d6af2:	4630      	mov	r0, r6
   d6af4:	bd70      	pop	{r4, r5, r6, pc}

000d6af6 <strlen>:
   d6af6:	4603      	mov	r3, r0
   d6af8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6afc:	2a00      	cmp	r2, #0
   d6afe:	d1fb      	bne.n	d6af8 <strlen+0x2>
   d6b00:	1a18      	subs	r0, r3, r0
   d6b02:	3801      	subs	r0, #1
   d6b04:	4770      	bx	lr

000d6b06 <link_code_end>:
	...

000d6b08 <dynalib_user>:
   d6b08:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6b18:	0000 0000 4441 2043 6f56 746c 6761 2065     ....ADC Voltage 
   d6b28:	203d 6d00 0056 6953 756d 616c 6574 2064     = .mV.Simulated 
   d6b38:	7250 7365 7573 6572 6f00 2068 6f6e 7365     Pressure.oh noes
   d6b48:	0021 6854 7461 7320 6f68 6c75 2064 6562     !.That should be
   d6b58:	6120 206e 7665 6e65 2074 6972 6867 2074      an event right 
   d6b68:	6874 7265 2e65 2e2e 0020 0000               there... ...

000d6b74 <_ZTVN5spark12NetworkClassE>:
	...
   d6b7c:	4719 000d 4723 000d 472d 000d 4737 000d     .G..#G..-G..7G..
   d6b8c:	4741 000d 474d 000d 4759 000d 4765 000d     AG..MG..YG..eG..
   d6b9c:	476d 000d 4777 000d 4781 000d               mG..wG...G..

000d6ba8 <_ZTVN5spark9WiFiClassE>:
	...
   d6bb0:	4877 000d 486d 000d 4863 000d 4819 000d     wH..mH..cH...H..
   d6bc0:	4857 000d 484b 000d 483f 000d 4837 000d     WH..KH..?H..7H..
   d6bd0:	482d 000d 4823 000d 4781 000d               -H..#H...G..

000d6bdc <_ZTVN5spark9MeshClassE>:
	...
   d6be4:	48f3 000d 48e9 000d 48df 000d 48d5 000d     .H...H...H...H..
   d6bf4:	48c9 000d 48bd 000d 48b1 000d 48a9 000d     .H...H...H...H..
   d6c04:	489f 000d 4895 000d 4781 000d               .H...H...G..

000d6c10 <_ZTV8SPIClass>:
	...
   d6c18:	49c9 000d 49cb 000d                         .I...I..

000d6c20 <_ZTV7TwoWire>:
	...
   d6c28:	4a07 000d 4a51 000d 4a29 000d 4a09 000d     .J..QJ..)J...J..
   d6c38:	4a31 000d 4a39 000d 4a41 000d 4a49 000d     1J..9J..AJ..IJ..

000d6c48 <_ZTV11USARTSerial>:
	...
   d6c50:	4aaf 000d 4ad3 000d 4adf 000d 53b3 000d     .J...J...J...S..
   d6c60:	4abb 000d 4ac7 000d 4ac1 000d 4acd 000d     .J...J...J...J..
   d6c70:	4ab1 000d 4ab5 000d                         .J...J..

000d6c78 <_ZTV9USBSerial>:
	...
   d6c80:	4b89 000d 4bcd 000d 4ba7 000d 53b3 000d     .K...K...K...S..
   d6c90:	4ba1 000d 4b8b 000d 4b93 000d 4bc7 000d     .K...K...K...K..
   d6ca0:	4b9b 000d 4b85 000d                         .K...K..

000d6ca8 <_ZTV9IPAddress>:
	...
   d6cb0:	4c73 000d 4c65 000d 4c67 000d               sL..eL..gL..

000d6cbc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6cc4:	4d49 000d 4d4f 000d 4d77 000d 4d5b 000d     IM..OM..wM..[M..
   d6cd4:	4d4b 000d 005a 2b25 3330 3a64 3025 7532     KM..Z.%+03d:%02u
   d6ce4:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d6cf4:	5325 7a25 6100 6373 6974 656d 6c00 006e     %S%z.asctime.ln.
   d6d04:	6e66 6300 646f 0065 6564 6174 6c69 0d00     fn.code.detail..
   d6d14:	000a 3025 3031 2075 5d00 0020 6425 2c00     ..%010u .] .%d.,
   d6d24:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d6d34:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d6d44:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d6d54:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d6d64:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d6d74:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d6d84:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d6d94:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d6da4:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d6db4:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
   d6dc4:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   d6dd4:	0072 6170 696e 0063 6c61 006c 616e 006e     r.panic.all.nan.
   d6de4:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d6df0 <_ZTVN5spark13EthernetClassE>:
	...
   d6df8:	58f3 000d 58e9 000d 58df 000d 58d5 000d     .X...X...X...X..
   d6e08:	58c9 000d 58bd 000d 58b1 000d 58a9 000d     .X...X...X...X..
   d6e18:	589f 000d 5895 000d 4781 000d               .X...X...G..

000d6e24 <__sf_fake_stdin>:
	...

000d6e44 <__sf_fake_stdout>:
	...

000d6e64 <__sf_fake_stderr>:
	...
   d6e84:	0043                                        C.

000d6e86 <link_const_variable_data_end>:
	...

000d6e88 <link_constructors_location>:
   d6e88:	000d4169 	.word	0x000d4169
   d6e8c:	000d42e1 	.word	0x000d42e1
   d6e90:	000d4805 	.word	0x000d4805
   d6e94:	000d4881 	.word	0x000d4881
   d6e98:	000d497d 	.word	0x000d497d
   d6e9c:	000d536d 	.word	0x000d536d
   d6ea0:	000d5389 	.word	0x000d5389
   d6ea4:	000d539d 	.word	0x000d539d
   d6ea8:	000d587d 	.word	0x000d587d
   d6eac:	000d58fd 	.word	0x000d58fd
   d6eb0:	000d5951 	.word	0x000d5951
   d6eb4:	000d5a3d 	.word	0x000d5a3d
   d6eb8:	000d5ac1 	.word	0x000d5ac1
   d6ebc:	000d5b85 	.word	0x000d5b85
   d6ec0:	000d5c49 	.word	0x000d5c49

000d6ec4 <link_constructors_end>:
	...
